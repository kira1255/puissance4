var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/components/AppComponent.html",[0,0.403,1,0.938]],["body/components/AppComponent.html",[0,0.741,1,1.664,2,1.867,3,0.295,4,0.244,5,2.293,6,1.572,7,1.572,8,1.572,9,0.244,10,2.849,11,0.728,12,2.285,13,1.572,14,1.851,15,3.729,16,2.057,17,5.022,18,2.057,19,4.506,20,0.728,21,1.407,22,5.022,23,0.728,24,0.037,25,3.159,26,1.572,27,3.729,28,1.075,29,3.443,30,2.834,31,2.529,32,3.729,33,4.506,34,0.538,35,0.403,36,2.166,37,1.181,38,1.933,39,1.572,40,2.458,41,0.295,42,0.295,43,3.443,44,2.529,45,1.933,46,3.443,47,3.443,48,3.443,49,1.572,50,2.057,51,2.057,52,1.572,53,2.433,54,1.572,55,1.054,56,1.572,57,1.075,58,1.572,59,1.075,60,1.427,61,2.057,62,0.978,63,1.075,64,1.572,65,0.978,66,1.572,67,0.978,68,1.572,69,1.572,70,1.572,71,0.02,72,0.026,73,0.02]],["title/modules/AppModule.html",[74,1.372,75,1.89]],["body/modules/AppModule.html",[1,1.874,3,0.275,4,0.228,9,0.228,12,1.619,24,0.037,34,0.616,35,0.375,37,1.099,39,1.463,40,2.288,41,0.275,42,0.275,63,1.736,67,1.579,71,0.019,72,0.025,73,0.019,75,3.835,76,1.099,77,2.169,78,2.652,79,2.652,80,2.652,81,2.652,82,3.12,83,2.538,84,2.703,85,1.618,86,1.799,87,3.205,88,2.703,89,1.962,90,4.297,91,1.962,92,4.297,93,3.556,94,2.288,95,2.288,96,3.205,97,4.297,98,3.205,99,2.288,100,3.205,101,2.652,102,2.652,103,3.205,104,3.205,105,3.205,106,3.205,107,3.205,108,2.652,109,2.652,110,4.297,111,3.205,112,1.962,113,2.288,114,2.016,115,2.652,116,3.205,117,3.205,118,3.205,119,3.205,120,3.205,121,3.205,122,3.205,123,3.205,124,3.205,125,3.205,126,3.205,127,3.205,128,3.205,129,3.205,130,2.652,131,3.205,132,3.205,133,3.205]],["title/modules/AppRoutingModule.html",[74,1.372,82,1.686]],["body/modules/AppRoutingModule.html",[0,0.538,3,0.344,4,0.285,9,0.285,24,0.038,34,0.545,35,0.47,41,0.344,42,0.344,67,1.412,71,0.024,72,0.029,73,0.024,76,1.378,82,2.79,89,1.834,91,2.269,114,2.527,115,3.324,134,4.017,135,2.868,136,3.548,137,2.725,138,2.028,139,1.664,140,4.137,141,4.97,142,4.97,143,4.017,144,2.527,145,4.97,146,4.017,147,4.017,148,1.141,149,4.017,150,4.017,151,4.113,152,4.017,153,2.527]],["title/components/CaseComponent.html",[0,0.403,57,0.938]],["body/components/CaseComponent.html",[0,0.711,1,0.951,2,1.719,3,0.261,4,0.216,5,1.39,6,1.39,7,1.39,8,1.39,9,0.216,11,0.644,12,2.179,13,1.39,14,1.806,16,1.895,18,1.895,20,0.878,23,0.878,24,0.037,28,0.951,34,0.419,35,0.357,41,0.261,42,0.261,44,1.709,45,2.846,49,1.39,50,1.895,51,1.895,52,1.39,53,2.315,54,1.39,55,0.971,56,1.39,57,1.583,58,1.39,59,0.951,60,1.261,61,1.895,62,0.865,63,0.951,64,1.39,65,0.865,66,1.39,67,0.865,68,1.39,69,1.39,70,1.39,71,0.018,72,0.024,73,0.018,148,1.179,154,2.519,155,4.391,156,4.15,157,4.15,158,2.963,159,3.434,160,3.434,161,4.721,162,4.15,163,4.15,164,2.225,165,3.044,166,2.095,167,3.434,168,3.044,169,2.519,170,2.519,171,3.044,172,2.519,173,2.963,174,4.15,175,1.709,176,2.519,177,2.173,178,1.39,179,4.531,180,3.044,181,4.721,182,3.371,183,4.721,184,4.15,185,4.15,186,3.434,187,4.531,188,2.519,189,1.915,190,4.248,191,3.044,192,2.519,193,1.915,194,1.915,195,2.173,196,2.519,197,1.709,198,3.044,199,2.173,200,3.044]],["title/components/EndGameComponent.html",[0,0.403,59,0.938]],["body/components/EndGameComponent.html",[0,0.672,1,0.814,2,1.543,3,0.223,4,0.185,5,1.19,6,1.19,7,1.19,8,1.19,9,0.185,11,0.788,12,2.105,13,1.19,14,1.744,16,1.7,18,1.7,20,0.551,21,1.163,23,1.002,24,0.037,26,1.19,28,1.48,31,2.439,34,0.439,35,0.305,41,0.223,42,0.223,49,1.19,50,1.7,51,1.7,52,1.19,53,2.164,54,1.19,55,1.017,56,1.19,57,0.814,58,1.19,59,1.48,60,2.274,61,1.7,62,0.741,63,0.814,64,1.19,65,0.741,66,1.19,67,0.741,68,1.19,69,1.19,70,1.19,71,0.015,72,0.022,73,0.015,148,1.525,159,3.082,160,3.082,169,2.157,175,1.463,192,2.157,197,2.09,199,2.659,201,4.148,202,3.153,203,2.157,204,3.922,205,3.724,206,3.082,207,3.595,208,3.082,209,3.988,210,4.344,211,3.012,212,4.344,213,3.102,214,2.607,215,2.105,216,3.724,217,3.724,218,3.724,219,1.316,220,1.08,221,3.595,222,3.922,223,2.09,224,2.09,225,5.487,226,5.487,227,4.739,228,2.607,229,2.926,230,3.922,231,4.739,232,2.607,233,2.607,234,4.739,235,2.607,236,2.607,237,1.861,238,1.861,239,1.861,240,2.607,241,3.082,242,3.082,243,1.88,244,3.082,245,2.343,246,2.343,247,3.724,248,3.724,249,2.607,250,1.861,251,3.082,252,2.607,253,2.607,254,2.343,255,2.659,256,2.157]],["title/interfaces/Game.html",[148,0.854,257,1.372]],["body/interfaces/Game.html",[3,0.286,4,0.237,9,0.237,11,0.706,20,0.706,21,1.379,23,1.213,24,0.037,34,0.446,41,0.286,71,0.02,72,0.026,73,0.02,148,1.655,158,3.758,164,2.063,211,2.955,215,2.353,220,2.181,221,3.654,257,1.524,258,2.1,259,2.763,260,3.152,261,2.229,262,3.157,263,3.157,264,3.758,265,3.758,266,3.157,267,3.311,268,2.717,269,2.658,270,3.758,271,2.229,272,4.415,273,2.016,274,2.777,275,3.654,276,3.654]],["title/components/GameComponent.html",[0,0.403,62,0.854]],["body/components/GameComponent.html",[0,0.446,1,0.352,2,0.796,3,0.096,4,0.08,5,1.861,6,0.514,7,0.514,8,0.514,9,0.08,11,0.818,12,1.603,13,0.514,14,1.328,16,0.877,18,0.877,20,0.406,21,0.6,23,0.985,24,0.038,25,1.866,26,0.514,28,1.455,31,2.773,34,0.481,35,0.132,36,0.708,37,0.386,38,0.632,41,0.096,42,0.096,44,0.632,45,1.078,49,0.514,50,0.877,51,0.877,52,0.514,53,1.354,54,0.514,55,0.954,56,0.514,57,0.352,58,0.514,59,0.6,60,1.379,61,0.877,62,0.843,63,0.352,64,0.514,65,0.32,66,0.514,67,0.32,68,0.514,69,0.514,70,0.514,71,0.011,72,0.011,73,0.007,112,0.514,113,0.804,138,0.568,139,1.04,144,1.866,148,1.445,155,2.077,158,3.146,164,2.152,166,1.83,173,2.118,175,1.665,176,0.932,177,0.804,178,0.877,179,1.589,186,0.932,187,0.932,188,1.589,189,1.208,193,0.708,194,0.708,195,1.792,196,0.932,197,1.078,199,1.371,202,0.708,204,2.077,206,1.589,207,2.077,208,1.589,209,3.526,211,1.409,213,0.804,215,2.061,219,1.83,220,1.502,223,1.409,224,1.078,229,1.078,230,0.932,237,0.804,239,3.146,241,0.932,242,0.932,243,1.681,244,0.932,245,0.708,246,0.708,254,1.208,255,0.804,261,0.969,262,2.548,263,2.615,266,1.665,267,1.866,268,2.608,271,2.599,273,0.877,274,0.708,275,1.589,277,0.932,278,1.371,279,2.077,280,2.51,281,2.51,282,0.877,283,1.92,284,2.91,285,2.996,286,1.92,287,1.92,288,1.92,289,2.454,290,1.92,291,2.118,292,2.454,293,1.92,294,3.241,295,1.126,296,2.966,297,2.966,298,3.027,299,1.589,300,1.92,301,1.92,302,1.92,303,1.92,304,1.942,305,2.288,306,1.126,307,3.624,308,2.034,309,1.92,310,2.28,311,0.969,312,1.92,313,1.126,314,1.792,315,1.92,316,1.92,317,1.371,318,2.966,319,1.92,320,3.202,321,1.126,322,1.92,323,1.92,324,1.92,325,2.454,326,4.076,327,4.076,328,1.92,329,1.126,330,1.92,331,1.92,332,1.126,333,1.92,334,1.126,335,2.966,336,1.126,337,2.454,338,1.92,339,1.126,340,1.371,341,1.92,342,1.92,343,1.126,344,1.866,345,1.92,346,1.92,347,1.371,348,1.92,349,1.126,350,2.587,351,1.126,352,2.966,353,2.966,354,1.126,355,1.92,356,0.932,357,0.932,358,1.92,359,0.932,360,0.932,361,1.126,362,1.126,363,0.932,364,0.932,365,0.804,366,2.077,367,1.126,368,1.371,369,1.126,370,0.932,371,1.126,372,2.966,373,1.126,374,1.126,375,1.126,376,1.126,377,2.118,378,1.126,379,1.92,380,1.126,381,1.126,382,1.126,383,1.126,384,1.126,385,1.589,386,1.126,387,2.077,388,0.804,389,1.126,390,1.92,391,1.126,392,1.126,393,1.126,394,1.92,395,0.804,396,1.126,397,1.126,398,1.498,399,2.51,400,1.498,401,0.932,402,1.126,403,2.077,404,1.589,405,1.589,406,0.708,407,1.92,408,1.866,409,1.126,410,1.589,411,1.126,412,1.126,413,1.126,414,1.126,415,0.804,416,2.51,417,0.632,418,1.126,419,0.932,420,1.126,421,1.126,422,1.126,423,1.126,424,0.932,425,1.126,426,1.126,427,1.126,428,1.126,429,1.126,430,1.126,431,1.126,432,0.632,433,1.126,434,1.126,435,1.126,436,1.126,437,2.51,438,1.126,439,1.126,440,1.92,441,1.126,442,1.126,443,1.92,444,1.126,445,1.126,446,1.126,447,1.92,448,1.92,449,1.126,450,0.932,451,1.126,452,1.126,453,1.92,454,1.92,455,1.92,456,1.792,457,1.92,458,2.376,459,2.51,460,1.126,461,1.126,462,1.589,463,1.92,464,3.87,465,2.077,466,1.126,467,1.589,468,1.126,469,1.126,470,1.126,471,0.708,472,0.932,473,1.126,474,1.126,475,1.126,476,1.126,477,1.126,478,1.126,479,1.126,480,1.92,481,1.126,482,0.932,483,1.126,484,1.126,485,1.126,486,0.804,487,1.126,488,1.589,489,1.126,490,1.208,491,0.932,492,2.077,493,0.932,494,1.126,495,0.932,496,1.126,497,1.126,498,1.126,499,1.126,500,2.966,501,4.658,502,1.92,503,1.126,504,1.92]],["title/modules/GameModule.html",[74,1.372,505,1.89]],["body/modules/GameModule.html",[3,0.317,4,0.263,9,0.263,24,0.037,34,0.601,35,0.434,41,0.317,42,0.317,57,1.806,59,1.806,62,1.644,71,0.022,72,0.028,73,0.022,76,1.271,77,2.385,83,2.641,84,2.971,85,1.87,86,2.079,88,2.971,89,2.157,91,2.157,95,2.644,99,2.644,148,1.052,202,2.33,364,3.065,365,3.372,505,3.888,506,3.065,507,3.065,508,3.065,509,3.247,510,3.704,511,3.372,512,2.33,513,3.704,514,3.909,515,2.644,516,2.644]],["title/modules/GameRoutingModule.html",[74,1.372,509,1.686]],["body/modules/GameRoutingModule.html",[0,0.585,3,0.374,4,0.31,9,0.31,24,0.037,34,0.565,35,0.511,41,0.374,42,0.374,62,1.486,71,0.026,72,0.031,73,0.026,76,1.497,89,1.993,91,2.387,135,3.117,136,3.733,137,2.826,138,2.204,139,1.809,140,3.117,153,2.746,365,3.117,509,2.935,517,4.366,518,3.613]],["title/injectables/GameState.html",[112,1.372,519,1.132]],["body/injectables/GameState.html",[3,0.126,4,0.104,9,0.104,11,0.31,14,1.364,20,0.31,21,0.748,23,1.05,24,0.038,26,2.213,28,1.55,34,0.441,35,0.172,37,0.503,41,0.205,42,0.205,55,1.24,71,0.009,72,0.014,73,0.009,85,1.768,112,1.093,139,2.056,144,1.908,148,1.649,164,1.941,166,1.768,178,1.762,197,1.344,211,2.645,215,1.716,219,2.447,220,2.008,223,0.823,224,0.823,238,1.047,243,0.74,245,0.922,246,0.922,261,2.979,262,2.721,263,2.842,264,1.709,265,1.709,266,2.721,267,3.049,268,0.67,269,1.768,271,1.948,273,1.762,274,0.922,282,1.599,284,2.166,285,1.908,289,1.981,291,2.956,292,1.981,298,1.703,304,2.448,305,2.452,308,0.823,310,1.506,311,1.768,314,2.956,317,2.5,340,1.709,344,0.922,347,1.709,350,2.755,388,1.047,395,1.709,398,1.532,400,1.532,406,0.922,408,0.922,415,1.047,417,2.721,471,1.506,519,0.902,520,0.922,521,1.047,522,2.511,523,2.965,524,2.394,525,2.394,526,2.394,527,2.956,528,2.956,529,1.466,530,3.544,531,1.981,532,1.466,533,1.466,534,3.859,535,1.981,536,1.466,537,1.981,538,2.898,539,2.203,540,2.5,541,1.981,542,1.981,543,1.981,544,3.049,545,1.466,546,1.981,547,1.466,548,1.981,549,1.466,550,1.466,551,2.898,552,1.981,553,1.466,554,1.981,555,1.466,556,1.981,557,1.466,558,1.709,559,1.466,560,1.981,561,1.466,562,1.466,563,1.981,564,1.466,565,1.466,566,1.981,567,1.466,568,2.166,569,2.203,570,1.466,571,1.213,572,1.213,573,1.047,574,1.213,575,1.213,576,1.213,577,0.922,578,1.213,579,1.213,580,2.5,581,2.5,582,1.344,583,1.981,584,0.922,585,3.614,586,1.981,587,1.213,588,1.213,589,3.29,590,1.981,591,2.747,592,3.426,593,1.213,594,1.213,595,1.213,596,1.213,597,1.981,598,1.213,599,1.213,600,1.981,601,1.213,602,1.981,603,1.981,604,1.981,605,1.213,606,1.981,607,1.213,608,1.213,609,1.047,610,1.213,611,2.755,612,1.981,613,1.047,614,1.709,615,1.047,616,2.898,617,2.898,618,2.5,619,1.213,620,1.213,621,2.898,622,1.213,623,1.213,624,1.709,625,1.047,626,1.213,627,1.213,628,1.213]],["title/classes/GameStateModel.html",[42,0.257,544,1.89]],["body/classes/GameStateModel.html",[3,0.157,4,0.13,9,0.13,11,0.389,14,1.243,20,0.389,21,0.895,23,0.389,24,0.038,28,0.574,34,0.483,35,0.215,37,0.63,41,0.246,42,0.246,55,1.118,71,0.011,72,0.017,73,0.011,85,1.447,112,0.839,139,2.192,144,1.803,148,1.686,164,1.862,166,1.447,178,2.181,197,1.031,211,2.774,215,1.627,223,1.031,224,1.031,238,1.311,243,0.927,245,1.155,246,1.155,261,2.996,262,2.915,263,3.017,264,2.516,265,2.516,266,2.915,267,3.109,268,1.309,269,1.447,271,2.01,273,1.609,274,1.803,282,0.839,284,1.311,285,1.155,291,2.046,298,1.609,304,1.609,308,1.031,310,1.155,311,1.447,314,2.046,317,2.046,340,1.311,344,1.155,347,1.311,350,2.842,388,1.311,395,2.046,398,1.779,400,2.01,406,1.155,408,1.155,415,1.311,417,2.774,471,2.217,519,1.08,521,1.311,522,1.52,523,2.217,527,2.046,528,2.046,530,3.109,531,1.52,535,1.52,537,1.52,538,2.372,539,1.803,540,2.046,541,1.52,542,1.52,543,1.52,544,2.716,546,1.52,548,1.52,551,2.372,552,1.52,554,1.52,556,1.52,558,1.311,560,1.52,563,1.52,566,1.52,568,1.978,569,2.217,571,1.52,572,1.52,573,1.311,574,1.52,575,1.52,576,1.52,577,1.803,578,2.372,579,2.372,580,3.266,581,3.266,582,1.978,583,2.916,584,1.155,585,3.953,586,2.372,587,1.52,588,1.52,589,3.468,590,2.372,591,3.005,592,3.785,593,1.52,594,1.52,595,1.52,596,1.52,597,2.372,598,1.52,599,1.52,600,2.372,601,1.52,602,2.372,603,2.372,604,2.372,605,1.52,606,2.372,607,1.52,608,1.52,609,1.311,610,1.52,611,3.082,612,2.372,613,1.311,614,2.046,615,1.311,616,3.294,617,3.294,618,2.842,619,1.52,620,1.52,621,3.294,622,1.52,623,1.52,624,2.046,625,1.311,626,1.52,627,1.52,628,1.52,629,1.311,630,1.837]],["title/components/HeaderComponent.html",[0,0.403,63,0.938]],["body/components/HeaderComponent.html",[0,0.691,1,0.878,2,1.627,3,0.241,4,0.2,5,1.283,6,1.283,7,1.283,8,1.283,9,0.2,11,0.595,12,2.192,13,1.283,14,1.775,16,1.793,18,1.793,20,0.595,21,1.226,23,0.831,24,0.037,25,3.083,26,1.283,27,3.25,28,1.414,30,3.519,31,2.894,32,3.25,34,0.54,35,0.329,36,1.768,37,0.964,38,1.578,39,1.283,40,2.007,41,0.241,42,0.241,49,1.283,50,1.793,51,1.793,52,1.283,53,2.238,54,1.283,55,0.919,56,1.283,57,0.878,58,1.283,59,0.878,60,1.165,61,1.793,62,0.799,63,1.531,64,1.283,65,0.799,66,1.283,67,0.799,68,1.283,69,1.283,70,1.283,71,0.017,72,0.023,73,0.017,166,1.983,172,2.326,173,2.007,189,1.768,190,2.804,229,1.578,269,1.983,273,1.283,278,2.804,279,3.746,282,1.793,304,1.793,305,2.541,359,2.326,360,2.326,368,2.804,370,2.326,377,2.007,400,1.419,490,1.768,539,2.471,631,2.326,632,4.901,633,4.527,634,3.927,635,3.232,636,4.901,637,3.814,638,2.811,639,3.927,640,3.927,641,3.927,642,3.927,643,3.927,644,2.811,645,3.927,646,2.811,647,2.811,648,2.811,649,3.927,650,2.811,651,2.811,652,2.811,653,2.811,654,3.927,655,3.927,656,3.927,657,2.811,658,2.811,659,2.007,660,2.326,661,2.326,662,2.326,663,2.326]],["title/components/HomepageComponent.html",[0,0.403,65,0.854]],["body/components/HomepageComponent.html",[0,0.721,1,0.702,2,1.385,3,0.193,4,0.16,5,1.026,6,1.026,7,1.026,8,1.026,9,0.16,11,0.475,12,2.027,13,1.026,14,1.68,16,1.526,18,1.526,20,0.475,21,1.044,23,0.934,24,0.037,25,3.224,26,1.526,28,1.475,31,3.119,34,0.5,35,0.263,36,1.414,37,0.771,38,1.261,41,0.193,42,0.193,44,1.876,45,1.876,49,1.026,50,1.526,51,1.526,52,1.026,53,2.017,54,1.026,55,1.158,56,1.026,57,0.702,58,1.026,59,0.702,60,0.931,61,1.526,62,0.639,63,0.702,64,1.026,65,1.255,66,1.026,67,0.639,68,1.026,69,1.026,70,1.026,71,0.013,72,0.02,73,0.013,112,1.026,113,1.604,138,1.135,148,1.255,166,2.231,175,1.876,177,1.604,178,1.026,182,2.848,189,2.102,190,3.154,193,1.414,194,2.102,213,1.604,219,2.231,220,1.385,229,2.24,239,2.386,250,1.604,251,3.656,256,1.86,262,2.877,266,2.877,270,3.371,273,1.026,282,1.526,285,2.102,294,2.386,298,1.876,304,1.822,305,2.24,311,2.231,344,2.102,363,1.86,366,3.302,368,1.604,377,2.848,400,1.135,450,1.86,456,2.386,458,3.154,462,2.766,465,1.86,467,1.86,486,1.604,488,1.86,490,1.414,492,2.766,493,2.766,527,2.848,528,2.848,582,1.261,659,3.154,660,1.86,661,1.86,662,2.766,663,2.766,664,1.86,665,3.99,666,3.342,667,4.418,668,3.342,669,2.247,670,5.626,671,3.342,672,3.342,673,2.247,674,2.247,675,3.342,676,2.766,677,2.386,678,3.342,679,2.247,680,4.418,681,4.418,682,3.342,683,2.247,684,2.247,685,2.247,686,2.247,687,3.342,688,3.342,689,3.342,690,1.86,691,2.247,692,2.247,693,1.86,694,1.86,695,2.247,696,2.247,697,2.247,698,1.86,699,3.342,700,2.247,701,2.247,702,2.247,703,1.86,704,2.247,705,3.99,706,3.342,707,2.247,708,4.418,709,2.247]],["title/modules/HomepageModule.html",[74,1.372,710,1.89]],["body/modules/HomepageModule.html",[3,0.333,4,0.276,9,0.276,24,0.037,34,0.6,35,0.455,41,0.333,42,0.333,65,1.664,71,0.023,72,0.029,73,0.023,76,1.332,77,2.457,83,2.673,84,3.062,85,1.961,86,2.18,88,3.062,89,2.222,91,2.222,95,2.773,99,2.773,270,2.773,511,3.475,512,2.443,514,4.028,515,2.773,516,2.773,710,3.839,711,3.214,712,3.214,713,3.214,714,3.286,715,3.884,716,3.214,717,4.867,718,3.214]],["title/modules/HomepageRoutingModule.html",[74,1.372,714,1.686]],["body/modules/HomepageRoutingModule.html",[0,0.585,3,0.374,4,0.31,9,0.31,24,0.037,34,0.565,35,0.511,41,0.374,42,0.374,65,1.486,71,0.026,72,0.031,73,0.026,76,1.497,89,1.993,91,2.387,135,3.117,136,3.733,137,2.826,138,2.204,139,1.809,140,3.117,153,2.746,518,3.613,714,2.935,716,3.613,719,4.366]],["title/modules/MaterialModule.html",[74,1.372,83,1.372]],["body/modules/MaterialModule.html",[3,0.264,4,0.219,9,0.219,24,0.035,34,0.642,35,0.361,41,0.264,42,0.264,71,0.018,72,0.025,73,0.018,76,1.057,83,1.911,88,1.938,89,1.407,91,1.911,153,1.938,237,2.2,356,2.55,357,3.463,511,2.987,512,1.938,720,3.081,721,4.184,722,3.081,723,4.184,724,3.081,725,4.184,726,3.081,727,3.081,728,4.184,729,3.081,730,4.184,731,3.081,732,4.184,733,3.081,734,4.184,735,3.081,736,4.184,737,3.081,738,4.184,739,3.081,740,4.184,741,3.081,742,4.184,743,3.081,744,3.081,745,4.184,746,4.184,747,4.184,748,4.184,749,4.184,750,3.081,751,4.184,752,3.081,753,4.184,754,3.081,755,4.184,756,3.081,757,4.184,758,3.081,759,4.184,760,4.184,761,3.081,762,4.184,763,3.081,764,4.184,765,3.081,766,3.081,767,4.184,768,3.081,769,4.184,770,3.081,771,4.184,772,3.081,773,4.184,774,3.081,775,4.184,776,4.184,777,3.081,778,4.184,779,3.081,780,4.184,781,4.184,782,4.184,783,3.081,784,4.184,785,3.081,786,4.184,787,3.081,788,4.184,789,3.081,790,4.184,791,3.081,792,4.184,793,3.081,794,4.184,795,4.184,796,3.081,797,4.184,798,3.081,799,4.184,800,3.081,801,4.184,802,3.081,803,4.184,804,3.081,805,4.184,806,3.081,807,4.184,808,3.081]],["title/components/NotFoundComponent.html",[0,0.403,67,0.854]],["body/components/NotFoundComponent.html",[0,0.741,1,1.077,2,1.869,3,0.296,4,0.245,5,1.575,6,1.575,7,1.575,8,1.575,9,0.245,11,0.73,12,2.235,13,1.575,14,1.852,16,2.06,18,2.06,24,0.037,34,0.349,35,0.404,41,0.296,42,0.296,44,1.937,49,1.575,50,2.06,51,2.06,52,1.575,53,2.434,54,1.575,55,1.056,56,1.575,57,1.077,58,1.575,59,1.077,60,1.429,61,2.06,62,0.98,63,1.077,64,1.575,65,0.98,66,1.575,67,1.515,68,2.434,69,1.575,70,1.575,71,0.02,72,0.026,73,0.02,114,2.17,151,3.733,175,1.937,182,2.463,193,2.17,229,1.937,243,2.278,250,2.463,254,2.17,255,2.463,456,3.221,458,3.221,486,2.463,490,2.838,491,2.855,659,3.221,677,3.221,690,2.855,693,2.855,694,2.855,698,2.855,809,2.855,810,2.855,811,5.027,812,4.511,813,4.511,814,3.45,815,4.511,816,4.511,817,3.45,818,3.45,819,3.45,820,3.45,821,3.45,822,3.45,823,3.45,824,3.45]],["title/interfaces/Pawn.html",[164,1.132,257,1.372]],["body/interfaces/Pawn.html",[3,0.328,4,0.272,9,0.272,11,0.811,20,0.811,21,1.507,23,1.117,24,0.037,34,0.387,41,0.328,71,0.023,72,0.028,73,0.023,164,2.32,195,3.446,215,2.308,220,2,257,1.75,258,2.411,260,3.446,268,2.664,271,2.437,320,4.829,325,4.829,432,2.709,825,3.172,826,5.546,827,4.827,828,4.827,829,4.827,830,5.546,831,2.411]],["title/interfaces/Player.html",[215,1.132,257,1.372]],["body/interfaces/Player.html",[3,0.356,4,0.295,9,0.295,11,0.88,20,0.88,21,1.586,23,1.074,24,0.037,41,0.356,55,1.393,71,0.024,72,0.03,73,0.024,178,2.318,215,2.335,222,4.536,257,1.899,258,2.617,260,2.969,268,2.503,273,2.318,276,4.202,400,2.564,580,4.251,582,2.85,832,3.442,833,5.078]],["title/injectables/ThemeState.html",[39,1.372,519,1.132]],["body/injectables/ThemeState.html",[3,0.297,4,0.246,9,0.246,11,0.733,14,1.573,20,0.733,23,0.957,24,0.038,26,2.065,28,1.412,30,3.733,34,0.509,35,0.406,37,1.188,39,2.065,41,0.388,42,0.388,55,1.179,71,0.02,72,0.027,73,0.02,139,1.435,219,2.284,220,1.874,261,3.024,269,1.749,282,2.065,304,2.065,305,1.944,308,1.944,311,2.284,398,1.749,432,1.944,519,1.704,520,2.179,523,3.168,530,3.359,577,2.179,584,2.179,589,2.845,591,2.179,635,3.812,637,3.596,831,2.845,834,2.473,835,4.523,836,3.743,837,3.359,838,3.464,839,3.743,840,3.229,841,3.464,842,3.743,843,3.464,844,2.866,845,3.743,846,2.866]],["title/classes/ThemeStateModel.html",[42,0.257,837,1.89]],["body/classes/ThemeStateModel.html",[3,0.314,4,0.26,9,0.26,11,0.775,14,1.465,20,0.775,21,1.465,23,0.775,24,0.038,28,1.145,30,3.736,34,0.523,35,0.429,37,1.257,39,1.674,41,0.402,42,0.402,55,0.858,71,0.022,72,0.028,73,0.022,139,1.519,223,2.058,224,2.058,261,2.999,269,2.369,308,2.058,311,1.851,398,1.851,432,2.634,519,1.768,523,2.306,530,2.951,577,2.951,584,2.306,589,2.951,591,2.306,629,2.617,635,4.187,637,2.617,831,3.255,834,2.617,836,3.033,837,3.255,839,3.033,840,3.35,842,3.033,844,3.033,845,3.883,846,3.033,847,3.666]],["title/injectables/VictoryCheckService.html",[519,1.132,568,1.686]],["body/injectables/VictoryCheckService.html",[3,0.153,4,0.127,9,0.127,11,0.377,15,1.477,20,0.901,23,0.829,24,0.038,28,1.224,34,0.349,35,0.209,41,0.153,42,0.153,55,0.917,71,0.01,72,0.016,73,0.01,148,1.602,164,2.039,167,3.243,170,1.477,178,2.502,194,2.465,209,3.81,219,1.979,220,1.624,243,1.979,254,2.465,263,2.891,268,2.352,271,2.471,282,1.789,294,2,298,1.573,299,3.243,304,1.789,310,3.079,337,4.416,385,3.243,387,3.243,398,1.979,401,3.243,403,2.319,404,4.416,405,2.319,406,1.123,408,1.763,410,2.863,417,3.075,419,2.319,424,2.863,432,2.2,482,3.243,495,3.243,519,1.056,520,1.123,539,3.573,540,3.677,568,1.573,573,1.274,581,2.798,609,1.274,611,3.81,613,2,614,2.798,615,2,618,1.274,624,2.798,625,2,831,2.465,840,3.81,848,3.524,849,1.477,850,2.802,851,2.802,852,2.802,853,2.802,854,2.802,855,2.802,856,1.785,857,3.919,858,2.802,859,1.785,860,2.802,861,3.919,862,1.785,863,2.802,864,2.802,865,1.785,866,2.802,867,1.785,868,3.919,869,2.802,870,2.802,871,2.802,872,2.802,873,2.802,874,3.919,875,3.919,876,3.919,877,3.919,878,3.919,879,1.785,880,1.785,881,1.785,882,3.919,883,5.337,884,1.785,885,3.919,886,4.519,887,3.459,888,3.919,889,3.243,890,3.919,891,1.785,892,2.802,893,1.785,894,3.459,895,3.459,896,1.785,897,1.785,898,3.459,899,1.785,900,2.802,901,3.919,902,2.802,903,2.802,904,2.802,905,2.802]],["title/coverage.html",[906,3.403]],["body/coverage.html",[0,0.793,1,1.192,9,0.271,10,3.158,23,0.807,24,0.037,39,1.743,42,0.412,45,3.493,57,1.192,59,1.192,62,1.084,63,1.192,65,1.084,67,1.084,71,0.022,72,0.028,73,0.022,112,1.743,114,2.401,148,1.084,154,3.158,164,1.438,201,3.158,202,2.401,203,3.158,215,1.438,257,2.408,259,3.158,277,3.158,519,1.987,521,3.437,544,2.401,568,2.142,569,2.401,631,3.158,664,3.158,809,3.158,810,3.158,825,3.158,832,3.158,834,3.437,837,2.401,848,3.158,849,3.158,906,3.158,907,3.817,908,3.817,909,3.817,910,5.537,911,5.273,912,3.817,913,3.817,914,3.817,915,3.817,916,4.814,917,3.817,918,3.817,919,3.817,920,3.817]],["title/dependencies.html",[77,1.826,921,2.071]],["body/dependencies.html",[24,0.037,35,0.495,37,1.451,38,2.374,71,0.025,72,0.03,73,0.025,77,2.135,93,4.245,94,3.662,101,3.5,102,3.5,108,3.5,109,3.5,138,2.135,512,2.661,515,3.019,516,3.019,718,3.5,922,4.229,923,6.147,924,4.229,925,4.245,926,4.229,927,4.229,928,4.229,929,4.229,930,4.229,931,5.129,932,4.229,933,4.229,934,4.229,935,4.229,936,4.229]],["title/index.html",[20,0.529,937,2.503,938,2.503]],["body/index.html",[0,0.708,4,0.272,12,1.444,24,0.028,55,0.897,60,2.418,71,0.023,72,0.028,73,0.023,86,2.152,130,3.172,278,2.737,417,2.152,558,2.737,569,2.411,676,3.172,677,2.737,703,4.902,921,3.172,925,3.172,939,3.833,940,4.827,941,3.833,942,5.283,943,5.283,944,3.833,945,3.833,946,4.827,947,5.716,948,3.833,949,3.833,950,3.833,951,3.833,952,3.833,953,3.833,954,3.833,955,3.833,956,3.833,957,5.283,958,5.283,959,3.833,960,5.546,961,3.833,962,3.833,963,3.833,964,3.833,965,4.827,966,4.827,967,5.546,968,3.833,969,4.827,970,4.827,971,3.833,972,3.833,973,3.833,974,3.833,975,4.827,976,3.833,977,3.833,978,3.833,979,3.833,980,5.283,981,3.833,982,3.833,983,2.737,984,3.833]],["title/modules.html",[76,1.411]],["body/modules.html",[24,0.031,71,0.027,72,0.031,73,0.027,75,2.845,76,1.551,82,2.539,83,2.065,94,4.056,505,2.845,509,2.539,710,2.845,714,2.539,985,5.681,986,5.681,987,6.13,988,5.869,989,5.869]],["title/overview.html",[983,2.936]],["body/overview.html",[1,1.838,2,1.545,24,0.037,57,1.629,59,1.629,62,1.482,63,1.629,65,1.482,67,1.482,71,0.022,72,0.028,73,0.022,75,3.876,76,1.279,77,2.395,78,3.085,79,3.085,80,3.085,81,3.085,82,2.928,83,2.588,84,2.983,85,1.882,86,2.092,137,1.882,258,2.345,471,2.983,472,3.085,505,3.859,506,3.085,507,3.085,508,3.085,509,2.928,520,2.345,582,2.092,629,2.661,710,3.749,711,3.085,712,3.085,713,3.085,714,2.928,889,3.924,983,2.661]],["title/routes.html",[137,2.076]],["body/routes.html",[24,0.033,71,0.029,72,0.033,73,0.029,137,2.481]]],"invertedIndex":[["",{"_index":24,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/CaseComponent.html":{},"components/EndGameComponent.html":{},"interfaces/Game.html":{},"components/GameComponent.html":{},"modules/GameModule.html":{},"modules/GameRoutingModule.html":{},"injectables/GameState.html":{},"classes/GameStateModel.html":{},"components/HeaderComponent.html":{},"components/HomepageComponent.html":{},"modules/HomepageModule.html":{},"modules/HomepageRoutingModule.html":{},"modules/MaterialModule.html":{},"components/NotFoundComponent.html":{},"interfaces/Pawn.html":{},"interfaces/Player.html":{},"injectables/ThemeState.html":{},"classes/ThemeStateModel.html":{},"injectables/VictoryCheckService.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"routes.html":{}}}],["0",{"_index":400,"title":{},"body":{"components/GameComponent.html":{},"injectables/GameState.html":{},"classes/GameStateModel.html":{},"components/HeaderComponent.html":{},"components/HomepageComponent.html":{},"interfaces/Player.html":{}}}],["0.11.4",{"_index":936,"title":{},"body":{"dependencies.html":{}}}],["0px",{"_index":485,"title":{},"body":{"components/GameComponent.html":{}}}],["1",{"_index":178,"title":{},"body":{"components/CaseComponent.html":{},"components/GameComponent.html":{},"injectables/GameState.html":{},"classes/GameStateModel.html":{},"components/HomepageComponent.html":{},"interfaces/Player.html":{},"injectables/VictoryCheckService.html":{}}}],["1.2rem",{"_index":697,"title":{},"body":{"components/HomepageComponent.html":{}}}],["1/1",{"_index":917,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":450,"title":{},"body":{"components/GameComponent.html":{},"components/HomepageComponent.html":{}}}],["100",{"_index":45,"title":{},"body":{"components/AppComponent.html":{},"components/CaseComponent.html":{},"components/GameComponent.html":{},"components/HomepageComponent.html":{},"coverage.html":{}}}],["100px",{"_index":822,"title":{},"body":{"components/NotFoundComponent.html":{}}}],["10px",{"_index":501,"title":{},"body":{"components/GameComponent.html":{}}}],["11",{"_index":474,"title":{},"body":{"components/GameComponent.html":{}}}],["12.0.0",{"_index":927,"title":{},"body":{"dependencies.html":{}}}],["12.1.0",{"_index":923,"title":{},"body":{"dependencies.html":{}}}],["12.1.3",{"_index":925,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["12/12",{"_index":918,"title":{},"body":{"coverage.html":{}}}],["12px",{"_index":466,"title":{},"body":{"components/GameComponent.html":{}}}],["13",{"_index":476,"title":{},"body":{"components/GameComponent.html":{}}}],["13/13",{"_index":912,"title":{},"body":{"coverage.html":{}}}],["140",{"_index":452,"title":{},"body":{"components/GameComponent.html":{}}}],["15",{"_index":478,"title":{},"body":{"components/GameComponent.html":{}}}],["15s",{"_index":497,"title":{},"body":{"components/GameComponent.html":{}}}],["1]?.x",{"_index":898,"title":{},"body":{"injectables/VictoryCheckService.html":{}}}],["1]?.y",{"_index":887,"title":{},"body":{"injectables/VictoryCheckService.html":{}}}],["1fr",{"_index":464,"title":{},"body":{"components/GameComponent.html":{}}}],["1px",{"_index":185,"title":{},"body":{"components/CaseComponent.html":{}}}],["2",{"_index":582,"title":{},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{},"components/HomepageComponent.html":{},"interfaces/Player.html":{},"overview.html":{}}}],["2.2.0",{"_index":934,"title":{},"body":{"dependencies.html":{}}}],["2/2",{"_index":910,"title":{},"body":{"coverage.html":{}}}],["20",{"_index":701,"title":{},"body":{"components/HomepageComponent.html":{}}}],["20px",{"_index":462,"title":{},"body":{"components/GameComponent.html":{},"components/HomepageComponent.html":{}}}],["23px",{"_index":468,"title":{},"body":{"components/GameComponent.html":{}}}],["2867b2",{"_index":187,"title":{},"body":{"components/CaseComponent.html":{},"components/GameComponent.html":{}}}],["2px",{"_index":190,"title":{},"body":{"components/CaseComponent.html":{},"components/HeaderComponent.html":{},"components/HomepageComponent.html":{}}}],["2rem",{"_index":693,"title":{},"body":{"components/HomepageComponent.html":{},"components/NotFoundComponent.html":{}}}],["3",{"_index":889,"title":{},"body":{"injectables/VictoryCheckService.html":{},"overview.html":{}}}],["3.7.2",{"_index":931,"title":{},"body":{"dependencies.html":{}}}],["3/3",{"_index":916,"title":{},"body":{"coverage.html":{}}}],["30",{"_index":126,"title":{},"body":{"modules/AppModule.html":{}}}],["30px",{"_index":486,"title":{},"body":{"components/GameComponent.html":{},"components/HomepageComponent.html":{},"components/NotFoundComponent.html":{}}}],["3rem",{"_index":691,"title":{},"body":{"components/HomepageComponent.html":{}}}],["4",{"_index":539,"title":{},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{},"components/HeaderComponent.html":{},"injectables/VictoryCheckService.html":{}}}],["4/4",{"_index":914,"title":{},"body":{"coverage.html":{}}}],["404",{"_index":151,"title":{},"body":{"modules/AppRoutingModule.html":{},"components/NotFoundComponent.html":{}}}],["40vh",{"_index":820,"title":{},"body":{"components/NotFoundComponent.html":{}}}],["5",{"_index":469,"title":{},"body":{"components/GameComponent.html":{}}}],["5/5",{"_index":911,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":492,"title":{},"body":{"components/GameComponent.html":{},"components/HomepageComponent.html":{}}}],["50px",{"_index":491,"title":{},"body":{"components/GameComponent.html":{},"components/NotFoundComponent.html":{}}}],["5px",{"_index":698,"title":{},"body":{"components/HomepageComponent.html":{},"components/NotFoundComponent.html":{}}}],["6",{"_index":583,"title":{},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{}}}],["6.6.0",{"_index":932,"title":{},"body":{"dependencies.html":{}}}],["6/6",{"_index":913,"title":{},"body":{"coverage.html":{}}}],["6b641a",{"_index":504,"title":{},"body":{"components/GameComponent.html":{}}}],["6px",{"_index":662,"title":{},"body":{"components/HeaderComponent.html":{},"components/HomepageComponent.html":{}}}],["7",{"_index":471,"title":{},"body":{"components/GameComponent.html":{},"injectables/GameState.html":{},"classes/GameStateModel.html":{},"overview.html":{}}}],["72211d",{"_index":502,"title":{},"body":{"components/GameComponent.html":{}}}],["8/8",{"_index":915,"title":{},"body":{"coverage.html":{}}}],["80",{"_index":250,"title":{},"body":{"components/EndGameComponent.html":{},"components/HomepageComponent.html":{},"components/NotFoundComponent.html":{}}}],["84px",{"_index":48,"title":{},"body":{"components/AppComponent.html":{}}}],["88vh",{"_index":457,"title":{},"body":{"components/GameComponent.html":{}}}],["9",{"_index":472,"title":{},"body":{"components/GameComponent.html":{},"overview.html":{}}}],["90",{"_index":488,"title":{},"body":{"components/GameComponent.html":{},"components/HomepageComponent.html":{}}}],["999",{"_index":663,"title":{},"body":{"components/HeaderComponent.html":{},"components/HomepageComponent.html":{}}}],["__action",{"_index":821,"title":{},"body":{"components/NotFoundComponent.html":{}}}],["__container",{"_index":46,"title":{},"body":{"components/AppComponent.html":{}}}],["__grid",{"_index":460,"title":{},"body":{"components/GameComponent.html":{}}}],["__image",{"_index":694,"title":{},"body":{"components/HomepageComponent.html":{},"components/NotFoundComponent.html":{}}}],["__play",{"_index":695,"title":{},"body":{"components/HomepageComponent.html":{}}}],["__settings",{"_index":699,"title":{},"body":{"components/HomepageComponent.html":{}}}],["__title",{"_index":690,"title":{},"body":{"components/HomepageComponent.html":{},"components/NotFoundComponent.html":{}}}],["_snack",{"_index":369,"title":{},"body":{"components/GameComponent.html":{}}}],["a.x",{"_index":894,"title":{},"body":{"injectables/VictoryCheckService.html":{}}}],["a.y",{"_index":880,"title":{},"body":{"injectables/VictoryCheckService.html":{}}}],["a11ymodule",{"_index":721,"title":{},"body":{"modules/MaterialModule.html":{}}}],["absolute",{"_index":489,"title":{},"body":{"components/GameComponent.html":{}}}],["action",{"_index":308,"title":{},"body":{"components/GameComponent.html":{},"injectables/GameState.html":{},"classes/GameStateModel.html":{},"injectables/ThemeState.html":{},"classes/ThemeStateModel.html":{}}}],["action(cancellastmove",{"_index":531,"title":{},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{}}}],["action(checkwinner",{"_index":535,"title":{},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{}}}],["action(gameinit",{"_index":552,"title":{},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{}}}],["action(gamereset",{"_index":560,"title":{},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{}}}],["action(playpawn",{"_index":556,"title":{},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{}}}],["action(setcolumns",{"_index":563,"title":{},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{}}}],["action(setrows",{"_index":566,"title":{},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{}}}],["action(toogletheme",{"_index":842,"title":{},"body":{"injectables/ThemeState.html":{},"classes/ThemeStateModel.html":{}}}],["actual",{"_index":353,"title":{},"body":{"components/GameComponent.html":{}}}],["actual_component",{"_index":70,"title":{},"body":{"components/AppComponent.html":{},"components/CaseComponent.html":{},"components/EndGameComponent.html":{},"components/GameComponent.html":{},"components/HeaderComponent.html":{},"components/HomepageComponent.html":{},"components/NotFoundComponent.html":{}}}],["add",{"_index":558,"title":{},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{},"index.html":{}}}],["align",{"_index":254,"title":{},"body":{"components/EndGameComponent.html":{},"components/GameComponent.html":{},"components/NotFoundComponent.html":{},"injectables/VictoryCheckService.html":{}}}],["aligned",{"_index":540,"title":{},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{},"injectables/VictoryCheckService.html":{}}}],["alignedpawns",{"_index":883,"title":{},"body":{"injectables/VictoryCheckService.html":{}}}],["alignés",{"_index":882,"title":{},"body":{"injectables/VictoryCheckService.html":{}}}],["already",{"_index":608,"title":{},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{}}}],["angular",{"_index":942,"title":{},"body":{"index.html":{}}}],["angular/animations",{"_index":922,"title":{},"body":{"dependencies.html":{}}}],["angular/cdk",{"_index":924,"title":{},"body":{"dependencies.html":{}}}],["angular/cdk/a11y",{"_index":722,"title":{},"body":{"modules/MaterialModule.html":{}}}],["angular/cdk/clipboard",{"_index":724,"title":{},"body":{"modules/MaterialModule.html":{}}}],["angular/cdk/drag",{"_index":726,"title":{},"body":{"modules/MaterialModule.html":{}}}],["angular/cdk/overlay",{"_index":808,"title":{},"body":{"modules/MaterialModule.html":{}}}],["angular/cdk/portal",{"_index":729,"title":{},"body":{"modules/MaterialModule.html":{}}}],["angular/cdk/scrolling",{"_index":731,"title":{},"body":{"modules/MaterialModule.html":{}}}],["angular/cdk/stepper",{"_index":733,"title":{},"body":{"modules/MaterialModule.html":{}}}],["angular/cdk/table",{"_index":735,"title":{},"body":{"modules/MaterialModule.html":{}}}],["angular/cdk/tree",{"_index":737,"title":{},"body":{"modules/MaterialModule.html":{}}}],["angular/common",{"_index":512,"title":{},"body":{"modules/GameModule.html":{},"modules/HomepageModule.html":{},"modules/MaterialModule.html":{},"dependencies.html":{}}}],["angular/compiler",{"_index":926,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":35,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/CaseComponent.html":{},"components/EndGameComponent.html":{},"components/GameComponent.html":{},"modules/GameModule.html":{},"modules/GameRoutingModule.html":{},"injectables/GameState.html":{},"classes/GameStateModel.html":{},"components/HeaderComponent.html":{},"components/HomepageComponent.html":{},"modules/HomepageModule.html":{},"modules/HomepageRoutingModule.html":{},"modules/MaterialModule.html":{},"components/NotFoundComponent.html":{},"injectables/ThemeState.html":{},"classes/ThemeStateModel.html":{},"injectables/VictoryCheckService.html":{},"dependencies.html":{}}}],["angular/flex",{"_index":515,"title":{},"body":{"modules/GameModule.html":{},"modules/HomepageModule.html":{},"dependencies.html":{}}}],["angular/forms",{"_index":718,"title":{},"body":{"modules/HomepageModule.html":{},"dependencies.html":{}}}],["angular/material",{"_index":929,"title":{},"body":{"dependencies.html":{}}}],["angular/material/autocomplete",{"_index":739,"title":{},"body":{"modules/MaterialModule.html":{}}}],["angular/material/badge",{"_index":741,"title":{},"body":{"modules/MaterialModule.html":{}}}],["angular/material/bottom",{"_index":743,"title":{},"body":{"modules/MaterialModule.html":{}}}],["angular/material/button",{"_index":746,"title":{},"body":{"modules/MaterialModule.html":{}}}],["angular/material/card",{"_index":750,"title":{},"body":{"modules/MaterialModule.html":{}}}],["angular/material/checkbox",{"_index":752,"title":{},"body":{"modules/MaterialModule.html":{}}}],["angular/material/chips",{"_index":754,"title":{},"body":{"modules/MaterialModule.html":{}}}],["angular/material/core",{"_index":777,"title":{},"body":{"modules/MaterialModule.html":{}}}],["angular/material/datepicker",{"_index":758,"title":{},"body":{"modules/MaterialModule.html":{}}}],["angular/material/dialog",{"_index":237,"title":{},"body":{"components/EndGameComponent.html":{},"components/GameComponent.html":{},"modules/MaterialModule.html":{}}}],["angular/material/divider",{"_index":761,"title":{},"body":{"modules/MaterialModule.html":{}}}],["angular/material/expansion",{"_index":763,"title":{},"body":{"modules/MaterialModule.html":{}}}],["angular/material/grid",{"_index":765,"title":{},"body":{"modules/MaterialModule.html":{}}}],["angular/material/icon",{"_index":768,"title":{},"body":{"modules/MaterialModule.html":{}}}],["angular/material/input",{"_index":770,"title":{},"body":{"modules/MaterialModule.html":{}}}],["angular/material/list",{"_index":772,"title":{},"body":{"modules/MaterialModule.html":{}}}],["angular/material/menu",{"_index":774,"title":{},"body":{"modules/MaterialModule.html":{}}}],["angular/material/paginator",{"_index":779,"title":{},"body":{"modules/MaterialModule.html":{}}}],["angular/material/progress",{"_index":781,"title":{},"body":{"modules/MaterialModule.html":{}}}],["angular/material/radio",{"_index":785,"title":{},"body":{"modules/MaterialModule.html":{}}}],["angular/material/select",{"_index":787,"title":{},"body":{"modules/MaterialModule.html":{}}}],["angular/material/sidenav",{"_index":789,"title":{},"body":{"modules/MaterialModule.html":{}}}],["angular/material/slide",{"_index":793,"title":{},"body":{"modules/MaterialModule.html":{}}}],["angular/material/slider",{"_index":791,"title":{},"body":{"modules/MaterialModule.html":{}}}],["angular/material/snack",{"_index":356,"title":{},"body":{"components/GameComponent.html":{},"modules/MaterialModule.html":{}}}],["angular/material/sort",{"_index":796,"title":{},"body":{"modules/MaterialModule.html":{}}}],["angular/material/stepper",{"_index":756,"title":{},"body":{"modules/MaterialModule.html":{}}}],["angular/material/table",{"_index":798,"title":{},"body":{"modules/MaterialModule.html":{}}}],["angular/material/tabs",{"_index":800,"title":{},"body":{"modules/MaterialModule.html":{}}}],["angular/material/toolbar",{"_index":802,"title":{},"body":{"modules/MaterialModule.html":{}}}],["angular/material/tooltip",{"_index":804,"title":{},"body":{"modules/MaterialModule.html":{}}}],["angular/material/tree",{"_index":806,"title":{},"body":{"modules/MaterialModule.html":{}}}],["angular/platform",{"_index":93,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["angular/router",{"_index":138,"title":{},"body":{"modules/AppRoutingModule.html":{},"components/GameComponent.html":{},"modules/GameRoutingModule.html":{},"components/HomepageComponent.html":{},"modules/HomepageRoutingModule.html":{},"dependencies.html":{}}}],["angular/service",{"_index":101,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["animate",{"_index":296,"title":{},"body":{"components/GameComponent.html":{}}}],["animatefallingpawn",{"_index":283,"title":{},"body":{"components/GameComponent.html":{}}}],["animatefallingpawn(column",{"_index":293,"title":{},"body":{"components/GameComponent.html":{}}}],["animation",{"_index":301,"title":{},"body":{"components/GameComponent.html":{}}}],["app",{"_index":12,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/CaseComponent.html":{},"components/EndGameComponent.html":{},"components/GameComponent.html":{},"components/HeaderComponent.html":{},"components/HomepageComponent.html":{},"components/NotFoundComponent.html":{},"index.html":{}}}],["app.component",{"_index":96,"title":{},"body":{"modules/AppModule.html":{}}}],["app.component.html",{"_index":19,"title":{},"body":{"components/AppComponent.html":{}}}],["app.component.scss",{"_index":17,"title":{},"body":{"components/AppComponent.html":{}}}],["appartiennent",{"_index":871,"title":{},"body":{"injectables/VictoryCheckService.html":{}}}],["appcomponent",{"_index":1,"title":{"components/AppComponent.html":{}},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/CaseComponent.html":{},"components/EndGameComponent.html":{},"components/GameComponent.html":{},"components/HeaderComponent.html":{},"components/HomepageComponent.html":{},"components/NotFoundComponent.html":{},"coverage.html":{},"overview.html":{}}}],["applied",{"_index":33,"title":{},"body":{"components/AppComponent.html":{}}}],["applies",{"_index":639,"title":{},"body":{"components/HeaderComponent.html":{}}}],["applydarktheme",{"_index":636,"title":{},"body":{"components/HeaderComponent.html":{}}}],["appmodule",{"_index":75,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["approutingmodule",{"_index":82,"title":{"modules/AppRoutingModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules.html":{},"overview.html":{}}}],["array",{"_index":350,"title":{},"body":{"components/GameComponent.html":{},"injectables/GameState.html":{},"classes/GameStateModel.html":{}}}],["array(g!.columns",{"_index":374,"title":{},"body":{"components/GameComponent.html":{}}}],["array(g!.rows",{"_index":376,"title":{},"body":{"components/GameComponent.html":{}}}],["artifacts",{"_index":961,"title":{},"body":{"index.html":{}}}],["async)!.turn!.name",{"_index":453,"title":{},"body":{"components/GameComponent.html":{}}}],["au",{"_index":872,"title":{},"body":{"injectables/VictoryCheckService.html":{}}}],["aucun",{"_index":601,"title":{},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{}}}],["auto",{"_index":459,"title":{},"body":{"components/GameComponent.html":{}}}],["automatically",{"_index":951,"title":{},"body":{"index.html":{}}}],["aux",{"_index":420,"title":{},"body":{"components/GameComponent.html":{}}}],["available",{"_index":989,"title":{},"body":{"modules.html":{}}}],["b.x",{"_index":895,"title":{},"body":{"injectables/VictoryCheckService.html":{}}}],["b.y",{"_index":881,"title":{},"body":{"injectables/VictoryCheckService.html":{}}}],["background",{"_index":179,"title":{},"body":{"components/CaseComponent.html":{},"components/GameComponent.html":{}}}],["bar",{"_index":357,"title":{},"body":{"components/GameComponent.html":{},"modules/MaterialModule.html":{}}}],["before",{"_index":191,"title":{},"body":{"components/CaseComponent.html":{}}}],["began",{"_index":272,"title":{},"body":{"interfaces/Game.html":{}}}],["beta.34",{"_index":928,"title":{},"body":{"dependencies.html":{}}}],["block",{"_index":196,"title":{},"body":{"components/CaseComponent.html":{},"components/GameComponent.html":{}}}],["body",{"_index":640,"title":{},"body":{"components/HeaderComponent.html":{}}}],["bold",{"_index":819,"title":{},"body":{"components/NotFoundComponent.html":{}}}],["boolean",{"_index":840,"title":{},"body":{"injectables/ThemeState.html":{},"classes/ThemeStateModel.html":{},"injectables/VictoryCheckService.html":{}}}],["bootstrap",{"_index":90,"title":{},"body":{"modules/AppModule.html":{}}}],["border",{"_index":465,"title":{},"body":{"components/GameComponent.html":{},"components/HomepageComponent.html":{}}}],["bottom",{"_index":194,"title":{},"body":{"components/CaseComponent.html":{},"components/GameComponent.html":{},"components/HomepageComponent.html":{},"injectables/VictoryCheckService.html":{}}}],["box",{"_index":188,"title":{},"body":{"components/CaseComponent.html":{},"components/GameComponent.html":{}}}],["break",{"_index":437,"title":{},"body":{"components/GameComponent.html":{}}}],["brightness_5",{"_index":655,"title":{},"body":{"components/HeaderComponent.html":{}}}],["browse",{"_index":987,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":94,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{},"modules.html":{}}}],["browser/animations",{"_index":98,"title":{},"body":{"modules/AppModule.html":{}}}],["browseranimationsmodule",{"_index":97,"title":{},"body":{"modules/AppModule.html":{}}}],["browsermodule",{"_index":92,"title":{},"body":{"modules/AppModule.html":{}}}],["build",{"_index":960,"title":{},"body":{"index.html":{}}}],["button",{"_index":696,"title":{},"body":{"components/HomepageComponent.html":{}}}],["calc(100vh",{"_index":47,"title":{},"body":{"components/AppComponent.html":{}}}],["cancellastmove",{"_index":284,"title":{},"body":{"components/GameComponent.html":{},"injectables/GameState.html":{},"classes/GameStateModel.html":{}}}],["cancellastmove(undefined",{"_index":529,"title":{},"body":{"injectables/GameState.html":{}}}],["cancellastmove({getstate",{"_index":596,"title":{},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{}}}],["capabilities",{"_index":978,"title":{},"body":{"index.html":{}}}],["case",{"_index":155,"title":{},"body":{"components/CaseComponent.html":{},"components/GameComponent.html":{}}}],["case'},{'name",{"_index":58,"title":{},"body":{"components/AppComponent.html":{},"components/CaseComponent.html":{},"components/EndGameComponent.html":{},"components/GameComponent.html":{},"components/HeaderComponent.html":{},"components/HomepageComponent.html":{},"components/NotFoundComponent.html":{}}}],["case.component.html",{"_index":162,"title":{},"body":{"components/CaseComponent.html":{}}}],["case.component.scss",{"_index":161,"title":{},"body":{"components/CaseComponent.html":{}}}],["case.png",{"_index":181,"title":{},"body":{"components/CaseComponent.html":{}}}],["case/case.component",{"_index":513,"title":{},"body":{"modules/GameModule.html":{}}}],["case__animated",{"_index":487,"title":{},"body":{"components/GameComponent.html":{}}}],["casecomponent",{"_index":57,"title":{"components/CaseComponent.html":{}},"body":{"components/AppComponent.html":{},"components/CaseComponent.html":{},"components/EndGameComponent.html":{},"components/GameComponent.html":{},"modules/GameModule.html":{},"components/HeaderComponent.html":{},"components/HomepageComponent.html":{},"components/NotFoundComponent.html":{},"coverage.html":{},"overview.html":{}}}],["causes",{"_index":316,"title":{},"body":{"components/GameComponent.html":{}}}],["cdksteppermodule",{"_index":732,"title":{},"body":{"modules/MaterialModule.html":{}}}],["cdktablemodule",{"_index":734,"title":{},"body":{"modules/MaterialModule.html":{}}}],["cdktreemodule",{"_index":736,"title":{},"body":{"modules/MaterialModule.html":{}}}],["cell",{"_index":167,"title":{},"body":{"components/CaseComponent.html":{},"injectables/VictoryCheckService.html":{}}}],["cells",{"_index":156,"title":{},"body":{"components/CaseComponent.html":{}}}],["center",{"_index":255,"title":{},"body":{"components/EndGameComponent.html":{},"components/GameComponent.html":{},"components/NotFoundComponent.html":{}}}],["change",{"_index":953,"title":{},"body":{"index.html":{}}}],["changedetection",{"_index":159,"title":{},"body":{"components/CaseComponent.html":{},"components/EndGameComponent.html":{}}}],["changedetectionstrategy",{"_index":169,"title":{},"body":{"components/CaseComponent.html":{},"components/EndGameComponent.html":{}}}],["changedetectionstrategy.onpush",{"_index":160,"title":{},"body":{"components/CaseComponent.html":{},"components/EndGameComponent.html":{}}}],["check",{"_index":417,"title":{},"body":{"components/GameComponent.html":{},"injectables/GameState.html":{},"classes/GameStateModel.html":{},"injectables/VictoryCheckService.html":{},"index.html":{}}}],["check.service",{"_index":576,"title":{},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{}}}],["check.service.ts",{"_index":849,"title":{},"body":{"injectables/VictoryCheckService.html":{},"coverage.html":{}}}],["check.service.ts:101",{"_index":856,"title":{},"body":{"injectables/VictoryCheckService.html":{}}}],["check.service.ts:16",{"_index":865,"title":{},"body":{"injectables/VictoryCheckService.html":{}}}],["check.service.ts:44",{"_index":862,"title":{},"body":{"injectables/VictoryCheckService.html":{}}}],["check.service.ts:72",{"_index":859,"title":{},"body":{"injectables/VictoryCheckService.html":{}}}],["checks",{"_index":315,"title":{},"body":{"components/GameComponent.html":{}}}],["checkvictory",{"_index":286,"title":{},"body":{"components/GameComponent.html":{}}}],["checkvictory(playedpawn",{"_index":312,"title":{},"body":{"components/GameComponent.html":{}}}],["checkwinner",{"_index":314,"title":{},"body":{"components/GameComponent.html":{},"injectables/GameState.html":{},"classes/GameStateModel.html":{}}}],["checkwinner(playedpawn)).subscribe(store",{"_index":426,"title":{},"body":{"components/GameComponent.html":{}}}],["checkwinner(undefined",{"_index":533,"title":{},"body":{"injectables/GameState.html":{}}}],["checkwinner({getstate",{"_index":610,"title":{},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{}}}],["choice",{"_index":974,"title":{},"body":{"index.html":{}}}],["class",{"_index":42,"title":{"classes/GameStateModel.html":{},"classes/ThemeStateModel.html":{}},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/CaseComponent.html":{},"components/EndGameComponent.html":{},"components/GameComponent.html":{},"modules/GameModule.html":{},"modules/GameRoutingModule.html":{},"injectables/GameState.html":{},"classes/GameStateModel.html":{},"components/HeaderComponent.html":{},"components/HomepageComponent.html":{},"modules/HomepageModule.html":{},"modules/HomepageRoutingModule.html":{},"modules/MaterialModule.html":{},"components/NotFoundComponent.html":{},"injectables/ThemeState.html":{},"classes/ThemeStateModel.html":{},"injectables/VictoryCheckService.html":{},"coverage.html":{}}}],["classes",{"_index":629,"title":{},"body":{"classes/GameStateModel.html":{},"classes/ThemeStateModel.html":{},"overview.html":{}}}],["cli",{"_index":943,"title":{},"body":{"index.html":{}}}],["clipboardmodule",{"_index":723,"title":{},"body":{"modules/MaterialModule.html":{}}}],["cluster_appmodule",{"_index":78,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_bootstrap",{"_index":79,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_declarations",{"_index":80,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":81,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_gamemodule",{"_index":506,"title":{},"body":{"modules/GameModule.html":{},"overview.html":{}}}],["cluster_gamemodule_declarations",{"_index":507,"title":{},"body":{"modules/GameModule.html":{},"overview.html":{}}}],["cluster_gamemodule_imports",{"_index":508,"title":{},"body":{"modules/GameModule.html":{},"overview.html":{}}}],["cluster_homepagemodule",{"_index":711,"title":{},"body":{"modules/HomepageModule.html":{},"overview.html":{}}}],["cluster_homepagemodule_declarations",{"_index":712,"title":{},"body":{"modules/HomepageModule.html":{},"overview.html":{}}}],["cluster_homepagemodule_imports",{"_index":713,"title":{},"body":{"modules/HomepageModule.html":{},"overview.html":{}}}],["code",{"_index":955,"title":{},"body":{"index.html":{}}}],["colonne",{"_index":406,"title":{},"body":{"components/GameComponent.html":{},"injectables/GameState.html":{},"classes/GameStateModel.html":{},"injectables/VictoryCheckService.html":{}}}],["colonnes",{"_index":687,"title":{},"body":{"components/HomepageComponent.html":{}}}],["color",{"_index":303,"title":{},"body":{"components/GameComponent.html":{}}}],["column",{"_index":298,"title":{},"body":{"components/GameComponent.html":{},"injectables/GameState.html":{},"classes/GameStateModel.html":{},"components/HomepageComponent.html":{},"injectables/VictoryCheckService.html":{}}}],["column).length",{"_index":411,"title":{},"body":{"components/GameComponent.html":{}}}],["columnplayed",{"_index":614,"title":{},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{},"injectables/VictoryCheckService.html":{}}}],["columns",{"_index":262,"title":{},"body":{"interfaces/Game.html":{},"components/GameComponent.html":{},"injectables/GameState.html":{},"classes/GameStateModel.html":{},"components/HomepageComponent.html":{}}}],["column}`)[0",{"_index":445,"title":{},"body":{"components/GameComponent.html":{}}}],["comes",{"_index":129,"title":{},"body":{"modules/AppModule.html":{}}}],["command",{"_index":975,"title":{},"body":{"index.html":{}}}],["commonmodule",{"_index":511,"title":{},"body":{"modules/GameModule.html":{},"modules/HomepageModule.html":{},"modules/MaterialModule.html":{}}}],["component",{"_index":0,"title":{"components/AppComponent.html":{},"components/CaseComponent.html":{},"components/EndGameComponent.html":{},"components/GameComponent.html":{},"components/HeaderComponent.html":{},"components/HomepageComponent.html":{},"components/NotFoundComponent.html":{}},"body":{"components/AppComponent.html":{},"modules/AppRoutingModule.html":{},"components/CaseComponent.html":{},"components/EndGameComponent.html":{},"components/GameComponent.html":{},"modules/GameRoutingModule.html":{},"components/HeaderComponent.html":{},"components/HomepageComponent.html":{},"modules/HomepageRoutingModule.html":{},"components/NotFoundComponent.html":{},"coverage.html":{},"index.html":{}}}],["component_template",{"_index":54,"title":{},"body":{"components/AppComponent.html":{},"components/CaseComponent.html":{},"components/EndGameComponent.html":{},"components/GameComponent.html":{},"components/HeaderComponent.html":{},"components/HomepageComponent.html":{},"components/NotFoundComponent.html":{}}}],["components",{"_index":2,"title":{},"body":{"components/AppComponent.html":{},"components/CaseComponent.html":{},"components/EndGameComponent.html":{},"components/GameComponent.html":{},"components/HeaderComponent.html":{},"components/HomepageComponent.html":{},"components/NotFoundComponent.html":{},"overview.html":{}}}],["composes",{"_index":157,"title":{},"body":{"components/CaseComponent.html":{}}}],["console.info(pawnplayed.player.name",{"_index":890,"title":{},"body":{"injectables/VictoryCheckService.html":{}}}],["const",{"_index":139,"title":{},"body":{"modules/AppRoutingModule.html":{},"components/GameComponent.html":{},"modules/GameRoutingModule.html":{},"injectables/GameState.html":{},"classes/GameStateModel.html":{},"modules/HomepageRoutingModule.html":{},"injectables/ThemeState.html":{},"classes/ThemeStateModel.html":{}}}],["constructor",{"_index":213,"title":{},"body":{"components/EndGameComponent.html":{},"components/GameComponent.html":{},"components/HomepageComponent.html":{}}}],["constructor(@inject(mat_dialog_data",{"_index":240,"title":{},"body":{"components/EndGameComponent.html":{}}}],["constructor(private",{"_index":648,"title":{},"body":{"components/HeaderComponent.html":{}}}],["constructor(winner",{"_index":214,"title":{},"body":{"components/EndGameComponent.html":{}}}],["contain",{"_index":183,"title":{},"body":{"components/CaseComponent.html":{}}}],["container",{"_index":461,"title":{},"body":{"components/GameComponent.html":{}}}],["contains",{"_index":578,"title":{},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{}}}],["content",{"_index":192,"title":{},"body":{"components/CaseComponent.html":{},"components/EndGameComponent.html":{}}}],["coordinate",{"_index":830,"title":{},"body":{"interfaces/Pawn.html":{}}}],["coordinates",{"_index":324,"title":{},"body":{"components/GameComponent.html":{}}}],["coordonnées",{"_index":421,"title":{},"body":{"components/GameComponent.html":{}}}],["coverage",{"_index":906,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["dans",{"_index":405,"title":{},"body":{"components/GameComponent.html":{},"injectables/VictoryCheckService.html":{}}}],["dark",{"_index":635,"title":{},"body":{"components/HeaderComponent.html":{},"injectables/ThemeState.html":{},"classes/ThemeStateModel.html":{}}}],["dark_mode",{"_index":656,"title":{},"body":{"components/HeaderComponent.html":{}}}],["data",{"_index":430,"title":{},"body":{"components/GameComponent.html":{}}}],["de",{"_index":403,"title":{},"body":{"components/GameComponent.html":{},"injectables/VictoryCheckService.html":{}}}],["declarations",{"_index":88,"title":{},"body":{"modules/AppModule.html":{},"modules/GameModule.html":{},"modules/HomepageModule.html":{},"modules/MaterialModule.html":{}}}],["decorators",{"_index":26,"title":{},"body":{"components/AppComponent.html":{},"components/EndGameComponent.html":{},"components/GameComponent.html":{},"injectables/GameState.html":{},"components/HeaderComponent.html":{},"components/HomepageComponent.html":{},"injectables/ThemeState.html":{}}}],["deep",{"_index":704,"title":{},"body":{"components/HomepageComponent.html":{}}}],["default",{"_index":223,"title":{},"body":{"components/EndGameComponent.html":{},"components/GameComponent.html":{},"injectables/GameState.html":{},"classes/GameStateModel.html":{},"classes/ThemeStateModel.html":{}}}],["defaults",{"_index":584,"title":{},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{},"injectables/ThemeState.html":{},"classes/ThemeStateModel.html":{}}}],["defined",{"_index":28,"title":{},"body":{"components/AppComponent.html":{},"components/CaseComponent.html":{},"components/EndGameComponent.html":{},"components/GameComponent.html":{},"injectables/GameState.html":{},"classes/GameStateModel.html":{},"components/HeaderComponent.html":{},"components/HomepageComponent.html":{},"injectables/ThemeState.html":{},"classes/ThemeStateModel.html":{},"injectables/VictoryCheckService.html":{}}}],["dependencies",{"_index":77,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/GameModule.html":{},"modules/HomepageModule.html":{},"dependencies.html":{},"overview.html":{}}}],["des",{"_index":226,"title":{},"body":{"components/EndGameComponent.html":{}}}],["description",{"_index":11,"title":{},"body":{"components/AppComponent.html":{},"components/CaseComponent.html":{},"components/EndGameComponent.html":{},"interfaces/Game.html":{},"components/GameComponent.html":{},"injectables/GameState.html":{},"classes/GameStateModel.html":{},"components/HeaderComponent.html":{},"components/HomepageComponent.html":{},"components/NotFoundComponent.html":{},"interfaces/Pawn.html":{},"interfaces/Player.html":{},"injectables/ThemeState.html":{},"classes/ThemeStateModel.html":{},"injectables/VictoryCheckService.html":{}}}],["determine",{"_index":302,"title":{},"body":{"components/GameComponent.html":{}}}],["dev",{"_index":949,"title":{},"body":{"index.html":{}}}],["development",{"_index":945,"title":{},"body":{"index.html":{}}}],["diagonale",{"_index":624,"title":{},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{},"injectables/VictoryCheckService.html":{}}}],["diagonalleftcheck",{"_index":851,"title":{},"body":{"injectables/VictoryCheckService.html":{}}}],["diagonalleftcheck(game",{"_index":855,"title":{},"body":{"injectables/VictoryCheckService.html":{}}}],["diagonally",{"_index":857,"title":{},"body":{"injectables/VictoryCheckService.html":{}}}],["diagonalrightcheck",{"_index":852,"title":{},"body":{"injectables/VictoryCheckService.html":{}}}],["diagonalrightcheck(game",{"_index":858,"title":{},"body":{"injectables/VictoryCheckService.html":{}}}],["dialog",{"_index":204,"title":{},"body":{"components/EndGameComponent.html":{},"components/GameComponent.html":{}}}],["dialogref",{"_index":428,"title":{},"body":{"components/GameComponent.html":{}}}],["dialogref.afterclosed().subscribe(result",{"_index":433,"title":{},"body":{"components/GameComponent.html":{}}}],["dialogs/end",{"_index":364,"title":{},"body":{"components/GameComponent.html":{},"modules/GameModule.html":{}}}],["directive",{"_index":52,"title":{},"body":{"components/AppComponent.html":{},"components/CaseComponent.html":{},"components/EndGameComponent.html":{},"components/GameComponent.html":{},"components/HeaderComponent.html":{},"components/HomepageComponent.html":{},"components/NotFoundComponent.html":{}}}],["directives",{"_index":69,"title":{},"body":{"components/AppComponent.html":{},"components/CaseComponent.html":{},"components/EndGameComponent.html":{},"components/GameComponent.html":{},"components/HeaderComponent.html":{},"components/HomepageComponent.html":{},"components/NotFoundComponent.html":{}}}],["directive|pipe|service|class|guard|interface|enum|module",{"_index":959,"title":{},"body":{"index.html":{}}}],["directory",{"_index":964,"title":{},"body":{"index.html":{}}}],["disableclose",{"_index":431,"title":{},"body":{"components/GameComponent.html":{}}}],["dispatch",{"_index":307,"title":{},"body":{"components/GameComponent.html":{}}}],["display",{"_index":195,"title":{},"body":{"components/CaseComponent.html":{},"components/GameComponent.html":{},"interfaces/Pawn.html":{}}}],["displaypawn",{"_index":287,"title":{},"body":{"components/GameComponent.html":{}}}],["displaypawn(x",{"_index":319,"title":{},"body":{"components/GameComponent.html":{}}}],["dist",{"_index":963,"title":{},"body":{"index.html":{}}}],["document.body.classlist.add(\"dark",{"_index":652,"title":{},"body":{"components/HeaderComponent.html":{}}}],["document.body.classlist.remove(\"dark",{"_index":653,"title":{},"body":{"components/HeaderComponent.html":{}}}],["document.getelementsbyclassname(`falling",{"_index":444,"title":{},"body":{"components/GameComponent.html":{}}}],["documentation",{"_index":907,"title":{},"body":{"coverage.html":{}}}],["doesn't",{"_index":352,"title":{},"body":{"components/GameComponent.html":{}}}],["dom",{"_index":7,"title":{},"body":{"components/AppComponent.html":{},"components/CaseComponent.html":{},"components/EndGameComponent.html":{},"components/GameComponent.html":{},"components/HeaderComponent.html":{},"components/HomepageComponent.html":{},"components/NotFoundComponent.html":{}}}],["dragdropmodule",{"_index":725,"title":{},"body":{"modules/MaterialModule.html":{}}}],["droite",{"_index":625,"title":{},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{},"injectables/VictoryCheckService.html":{}}}],["drop",{"_index":727,"title":{},"body":{"modules/MaterialModule.html":{}}}],["du",{"_index":419,"title":{},"body":{"components/GameComponent.html":{},"injectables/VictoryCheckService.html":{}}}],["dynamic",{"_index":930,"title":{},"body":{"dependencies.html":{}}}],["e2e",{"_index":972,"title":{},"body":{"index.html":{}}}],["element",{"_index":51,"title":{},"body":{"components/AppComponent.html":{},"components/CaseComponent.html":{},"components/EndGameComponent.html":{},"components/GameComponent.html":{},"components/HeaderComponent.html":{},"components/HomepageComponent.html":{},"components/NotFoundComponent.html":{}}}],["en",{"_index":408,"title":{},"body":{"components/GameComponent.html":{},"injectables/GameState.html":{},"classes/GameStateModel.html":{},"injectables/VictoryCheckService.html":{}}}],["enabled",{"_index":120,"title":{},"body":{"modules/AppModule.html":{}}}],["end",{"_index":60,"title":{},"body":{"components/AppComponent.html":{},"components/CaseComponent.html":{},"components/EndGameComponent.html":{},"components/GameComponent.html":{},"components/HeaderComponent.html":{},"components/HomepageComponent.html":{},"components/NotFoundComponent.html":{},"index.html":{}}}],["endgamecomponent",{"_index":59,"title":{"components/EndGameComponent.html":{}},"body":{"components/AppComponent.html":{},"components/CaseComponent.html":{},"components/EndGameComponent.html":{},"components/GameComponent.html":{},"modules/GameModule.html":{},"components/HeaderComponent.html":{},"components/HomepageComponent.html":{},"components/NotFoundComponent.html":{},"coverage.html":{},"overview.html":{}}}],["ends",{"_index":206,"title":{},"body":{"components/EndGameComponent.html":{},"components/GameComponent.html":{}}}],["environment",{"_index":103,"title":{},"body":{"modules/AppModule.html":{}}}],["environment.production",{"_index":121,"title":{},"body":{"modules/AppModule.html":{}}}],["environments/environment",{"_index":104,"title":{},"body":{"modules/AppModule.html":{}}}],["error",{"_index":395,"title":{},"body":{"components/GameComponent.html":{},"injectables/GameState.html":{},"classes/GameStateModel.html":{}}}],["est",{"_index":245,"title":{},"body":{"components/EndGameComponent.html":{},"components/GameComponent.html":{},"injectables/GameState.html":{},"classes/GameStateModel.html":{}}}],["event",{"_index":671,"title":{},"body":{"components/HomepageComponent.html":{}}}],["execute",{"_index":969,"title":{},"body":{"index.html":{}}}],["export",{"_index":41,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/CaseComponent.html":{},"components/EndGameComponent.html":{},"interfaces/Game.html":{},"components/GameComponent.html":{},"modules/GameModule.html":{},"modules/GameRoutingModule.html":{},"injectables/GameState.html":{},"classes/GameStateModel.html":{},"components/HeaderComponent.html":{},"components/HomepageComponent.html":{},"modules/HomepageModule.html":{},"modules/HomepageRoutingModule.html":{},"modules/MaterialModule.html":{},"components/NotFoundComponent.html":{},"interfaces/Pawn.html":{},"interfaces/Player.html":{},"injectables/ThemeState.html":{},"classes/ThemeStateModel.html":{},"injectables/VictoryCheckService.html":{}}}],["exports",{"_index":153,"title":{},"body":{"modules/AppRoutingModule.html":{},"modules/GameRoutingModule.html":{},"modules/HomepageRoutingModule.html":{},"modules/MaterialModule.html":{}}}],["f4433b",{"_index":499,"title":{},"body":{"components/GameComponent.html":{}}}],["f4e43b",{"_index":503,"title":{},"body":{"components/GameComponent.html":{}}}],["fall",{"_index":300,"title":{},"body":{"components/GameComponent.html":{}}}],["falling",{"_index":297,"title":{},"body":{"components/GameComponent.html":{}}}],["false",{"_index":831,"title":{},"body":{"interfaces/Pawn.html":{},"injectables/ThemeState.html":{},"classes/ThemeStateModel.html":{},"injectables/VictoryCheckService.html":{}}}],["family",{"_index":660,"title":{},"body":{"components/HeaderComponent.html":{},"components/HomepageComponent.html":{}}}],["file",{"_index":9,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/CaseComponent.html":{},"components/EndGameComponent.html":{},"interfaces/Game.html":{},"components/GameComponent.html":{},"modules/GameModule.html":{},"modules/GameRoutingModule.html":{},"injectables/GameState.html":{},"classes/GameStateModel.html":{},"components/HeaderComponent.html":{},"components/HomepageComponent.html":{},"modules/HomepageModule.html":{},"modules/HomepageRoutingModule.html":{},"modules/MaterialModule.html":{},"components/NotFoundComponent.html":{},"interfaces/Pawn.html":{},"interfaces/Player.html":{},"injectables/ThemeState.html":{},"classes/ThemeStateModel.html":{},"injectables/VictoryCheckService.html":{},"coverage.html":{}}}],["files",{"_index":954,"title":{},"body":{"index.html":{}}}],["first",{"_index":130,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["flexlayoutmodule",{"_index":514,"title":{},"body":{"modules/GameModule.html":{},"modules/HomepageModule.html":{}}}],["font",{"_index":659,"title":{},"body":{"components/HeaderComponent.html":{},"components/HomepageComponent.html":{},"components/NotFoundComponent.html":{}}}],["formsmodule",{"_index":717,"title":{},"body":{"modules/HomepageModule.html":{}}}],["found",{"_index":68,"title":{},"body":{"components/AppComponent.html":{},"components/CaseComponent.html":{},"components/EndGameComponent.html":{},"components/GameComponent.html":{},"components/HeaderComponent.html":{},"components/HomepageComponent.html":{},"components/NotFoundComponent.html":{}}}],["found.component",{"_index":115,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{}}}],["found.component.html",{"_index":812,"title":{},"body":{"components/NotFoundComponent.html":{}}}],["found.component.scss",{"_index":811,"title":{},"body":{"components/NotFoundComponent.html":{}}}],["found.component.ts",{"_index":810,"title":{},"body":{"components/NotFoundComponent.html":{},"coverage.html":{}}}],["found/not",{"_index":114,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/NotFoundComponent.html":{},"coverage.html":{}}}],["fresh",{"_index":345,"title":{},"body":{"components/GameComponent.html":{}}}],["full",{"_index":144,"title":{},"body":{"modules/AppRoutingModule.html":{},"components/GameComponent.html":{},"injectables/GameState.html":{},"classes/GameStateModel.html":{}}}],["fullscreen",{"_index":480,"title":{},"body":{"components/GameComponent.html":{}}}],["further",{"_index":979,"title":{},"body":{"index.html":{}}}],["g.pawns.filter(p",{"_index":409,"title":{},"body":{"components/GameComponent.html":{}}}],["g.pawns.map(p",{"_index":423,"title":{},"body":{"components/GameComponent.html":{}}}],["g.turn",{"_index":379,"title":{},"body":{"components/GameComponent.html":{}}}],["game",{"_index":148,"title":{"interfaces/Game.html":{}},"body":{"modules/AppRoutingModule.html":{},"components/CaseComponent.html":{},"components/EndGameComponent.html":{},"interfaces/Game.html":{},"components/GameComponent.html":{},"modules/GameModule.html":{},"injectables/GameState.html":{},"classes/GameStateModel.html":{},"components/HomepageComponent.html":{},"injectables/VictoryCheckService.html":{},"coverage.html":{}}}],["game'},{'name",{"_index":61,"title":{},"body":{"components/AppComponent.html":{},"components/CaseComponent.html":{},"components/EndGameComponent.html":{},"components/GameComponent.html":{},"components/HeaderComponent.html":{},"components/HomepageComponent.html":{},"components/NotFoundComponent.html":{}}}],["game.actions",{"_index":574,"title":{},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{}}}],["game.component",{"_index":365,"title":{},"body":{"components/GameComponent.html":{},"modules/GameModule.html":{},"modules/GameRoutingModule.html":{}}}],["game.component.html",{"_index":208,"title":{},"body":{"components/EndGameComponent.html":{},"components/GameComponent.html":{}}}],["game.component.scss",{"_index":207,"title":{},"body":{"components/EndGameComponent.html":{},"components/GameComponent.html":{}}}],["game.component.ts",{"_index":203,"title":{},"body":{"components/EndGameComponent.html":{},"coverage.html":{}}}],["game.component.ts:19",{"_index":228,"title":{},"body":{"components/EndGameComponent.html":{}}}],["game.component.ts:23",{"_index":216,"title":{},"body":{"components/EndGameComponent.html":{}}}],["game.component.ts:29",{"_index":233,"title":{},"body":{"components/EndGameComponent.html":{}}}],["game.pawns.filter(p",{"_index":874,"title":{},"body":{"injectables/VictoryCheckService.html":{}}}],["game/end",{"_index":202,"title":{},"body":{"components/EndGameComponent.html":{},"components/GameComponent.html":{},"modules/GameModule.html":{},"coverage.html":{}}}],["game__action",{"_index":483,"title":{},"body":{"components/GameComponent.html":{}}}],["game__actions",{"_index":484,"title":{},"body":{"components/GameComponent.html":{}}}],["game__players",{"_index":481,"title":{},"body":{"components/GameComponent.html":{}}}],["gamecomponent",{"_index":62,"title":{"components/GameComponent.html":{}},"body":{"components/AppComponent.html":{},"components/CaseComponent.html":{},"components/EndGameComponent.html":{},"components/GameComponent.html":{},"modules/GameModule.html":{},"modules/GameRoutingModule.html":{},"components/HeaderComponent.html":{},"components/HomepageComponent.html":{},"components/NotFoundComponent.html":{},"coverage.html":{},"overview.html":{}}}],["gameinit",{"_index":551,"title":{},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{}}}],["gamemodule",{"_index":505,"title":{"modules/GameModule.html":{}},"body":{"modules/GameModule.html":{},"modules.html":{},"overview.html":{}}}],["gamereset",{"_index":344,"title":{},"body":{"components/GameComponent.html":{},"injectables/GameState.html":{},"classes/GameStateModel.html":{},"components/HomepageComponent.html":{}}}],["gameroutingmodule",{"_index":509,"title":{"modules/GameRoutingModule.html":{}},"body":{"modules/GameModule.html":{},"modules/GameRoutingModule.html":{},"modules.html":{},"overview.html":{}}}],["games",{"_index":342,"title":{},"body":{"components/GameComponent.html":{}}}],["gamestate",{"_index":112,"title":{"injectables/GameState.html":{}},"body":{"modules/AppModule.html":{},"components/GameComponent.html":{},"injectables/GameState.html":{},"classes/GameStateModel.html":{},"components/HomepageComponent.html":{},"coverage.html":{}}}],["gamestatemodel",{"_index":544,"title":{"classes/GameStateModel.html":{}},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{},"coverage.html":{}}}],["gauche",{"_index":627,"title":{},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{}}}],["generate",{"_index":957,"title":{},"body":{"index.html":{}}}],["generated",{"_index":941,"title":{},"body":{"index.html":{}}}],["getcolumns",{"_index":524,"title":{},"body":{"injectables/GameState.html":{}}}],["getcolumns(state",{"_index":543,"title":{},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{}}}],["getgame",{"_index":525,"title":{},"body":{"injectables/GameState.html":{}}}],["getgame(state",{"_index":546,"title":{},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{}}}],["getrows",{"_index":526,"title":{},"body":{"injectables/GameState.html":{}}}],["getrows(state",{"_index":548,"title":{},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{}}}],["gets",{"_index":32,"title":{},"body":{"components/AppComponent.html":{},"components/HeaderComponent.html":{}}}],["getstate",{"_index":591,"title":{},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{},"injectables/ThemeState.html":{},"classes/ThemeStateModel.html":{}}}],["gettheme",{"_index":835,"title":{},"body":{"injectables/ThemeState.html":{}}}],["gettheme(state",{"_index":836,"title":{},"body":{"injectables/ThemeState.html":{},"classes/ThemeStateModel.html":{}}}],["getting",{"_index":937,"title":{"index.html":{}},"body":{}}],["getypositionincolumn",{"_index":288,"title":{},"body":{"components/GameComponent.html":{}}}],["getypositionincolumn(column",{"_index":328,"title":{},"body":{"components/GameComponent.html":{}}}],["given",{"_index":323,"title":{},"body":{"components/GameComponent.html":{}}}],["global",{"_index":642,"title":{},"body":{"components/HeaderComponent.html":{}}}],["go",{"_index":982,"title":{},"body":{"index.html":{}}}],["graph",{"_index":988,"title":{},"body":{"modules.html":{}}}],["grid",{"_index":158,"title":{},"body":{"components/CaseComponent.html":{},"interfaces/Game.html":{},"components/GameComponent.html":{}}}],["gridx",{"_index":280,"title":{},"body":{"components/GameComponent.html":{}}}],["gridy",{"_index":281,"title":{},"body":{"components/GameComponent.html":{}}}],["grille",{"_index":244,"title":{},"body":{"components/EndGameComponent.html":{},"components/GameComponent.html":{}}}],["header",{"_index":632,"title":{},"body":{"components/HeaderComponent.html":{}}}],["header'},{'name",{"_index":64,"title":{},"body":{"components/AppComponent.html":{},"components/CaseComponent.html":{},"components/EndGameComponent.html":{},"components/GameComponent.html":{},"components/HeaderComponent.html":{},"components/HomepageComponent.html":{},"components/NotFoundComponent.html":{}}}],["header.component.html",{"_index":634,"title":{},"body":{"components/HeaderComponent.html":{}}}],["header.component.scss",{"_index":633,"title":{},"body":{"components/HeaderComponent.html":{}}}],["header__title",{"_index":658,"title":{},"body":{"components/HeaderComponent.html":{}}}],["headercomponent",{"_index":63,"title":{"components/HeaderComponent.html":{}},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/CaseComponent.html":{},"components/EndGameComponent.html":{},"components/GameComponent.html":{},"components/HeaderComponent.html":{},"components/HomepageComponent.html":{},"components/NotFoundComponent.html":{},"coverage.html":{},"overview.html":{}}}],["height",{"_index":44,"title":{},"body":{"components/AppComponent.html":{},"components/CaseComponent.html":{},"components/GameComponent.html":{},"components/HomepageComponent.html":{},"components/NotFoundComponent.html":{}}}],["help",{"_index":980,"title":{},"body":{"index.html":{}}}],["hidden",{"_index":253,"title":{},"body":{"components/EndGameComponent.html":{}}}],["home",{"_index":142,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["homepage",{"_index":270,"title":{},"body":{"interfaces/Game.html":{},"components/HomepageComponent.html":{},"modules/HomepageModule.html":{}}}],["homepage'},{'name",{"_index":66,"title":{},"body":{"components/AppComponent.html":{},"components/CaseComponent.html":{},"components/EndGameComponent.html":{},"components/GameComponent.html":{},"components/HeaderComponent.html":{},"components/HomepageComponent.html":{},"components/NotFoundComponent.html":{}}}],["homepage.component",{"_index":716,"title":{},"body":{"modules/HomepageModule.html":{},"modules/HomepageRoutingModule.html":{}}}],["homepage.component.html",{"_index":666,"title":{},"body":{"components/HomepageComponent.html":{}}}],["homepage.component.scss",{"_index":665,"title":{},"body":{"components/HomepageComponent.html":{}}}],["homepagecomponent",{"_index":65,"title":{"components/HomepageComponent.html":{}},"body":{"components/AppComponent.html":{},"components/CaseComponent.html":{},"components/EndGameComponent.html":{},"components/GameComponent.html":{},"components/HeaderComponent.html":{},"components/HomepageComponent.html":{},"modules/HomepageModule.html":{},"modules/HomepageRoutingModule.html":{},"components/NotFoundComponent.html":{},"coverage.html":{},"overview.html":{}}}],["homepagemodule",{"_index":710,"title":{"modules/HomepageModule.html":{}},"body":{"modules/HomepageModule.html":{},"modules.html":{},"overview.html":{}}}],["homepageroutingmodule",{"_index":714,"title":{"modules/HomepageRoutingModule.html":{}},"body":{"modules/HomepageModule.html":{},"modules/HomepageRoutingModule.html":{},"modules.html":{},"overview.html":{}}}],["horizontal",{"_index":702,"title":{},"body":{"components/HomepageComponent.html":{}}}],["horizontalcheck",{"_index":853,"title":{},"body":{"injectables/VictoryCheckService.html":{}}}],["horizontalcheck(game",{"_index":860,"title":{},"body":{"injectables/VictoryCheckService.html":{}}}],["horizontale",{"_index":622,"title":{},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{}}}],["horizontalement",{"_index":899,"title":{},"body":{"injectables/VictoryCheckService.html":{}}}],["horizontally",{"_index":863,"title":{},"body":{"injectables/VictoryCheckService.html":{}}}],["host",{"_index":172,"title":{},"body":{"components/CaseComponent.html":{},"components/HeaderComponent.html":{}}}],["html",{"_index":50,"title":{},"body":{"components/AppComponent.html":{},"components/CaseComponent.html":{},"components/EndGameComponent.html":{},"components/GameComponent.html":{},"components/HeaderComponent.html":{},"components/HomepageComponent.html":{},"components/NotFoundComponent.html":{}}}],["htmlelement",{"_index":443,"title":{},"body":{"components/GameComponent.html":{}}}],["http://localhost:4200",{"_index":950,"title":{},"body":{"index.html":{}}}],["id",{"_index":580,"title":{},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{},"interfaces/Player.html":{}}}],["identifier",{"_index":908,"title":{},"body":{"coverage.html":{}}}],["if((pawn.x",{"_index":904,"title":{},"body":{"injectables/VictoryCheckService.html":{}}}],["if(alignedpawns",{"_index":888,"title":{},"body":{"injectables/VictoryCheckService.html":{}}}],["if(isdark",{"_index":651,"title":{},"body":{"components/HeaderComponent.html":{}}}],["if(pawn.x",{"_index":897,"title":{},"body":{"injectables/VictoryCheckService.html":{}}}],["if(pawn.y",{"_index":609,"title":{},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{},"injectables/VictoryCheckService.html":{}}}],["if(state.game.pawns.length",{"_index":599,"title":{},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{}}}],["if(store.game.game.pawns?.length",{"_index":391,"title":{},"body":{"components/GameComponent.html":{}}}],["if(store.game.game.winner",{"_index":427,"title":{},"body":{"components/GameComponent.html":{}}}],["if(this.victoryservice.diagonalleftcheck(state.game",{"_index":628,"title":{},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{}}}],["if(this.victoryservice.diagonalrightcheck(state.game",{"_index":626,"title":{},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{}}}],["if(this.victoryservice.horizontalcheck(state.game",{"_index":623,"title":{},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{}}}],["if(this.victoryservice.verticalcheck(state.game",{"_index":620,"title":{},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{}}}],["ignore",{"_index":368,"title":{},"body":{"components/GameComponent.html":{},"components/HeaderComponent.html":{},"components/HomepageComponent.html":{}}}],["implements",{"_index":278,"title":{},"body":{"components/GameComponent.html":{},"components/HeaderComponent.html":{},"index.html":{}}}],["import",{"_index":34,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/CaseComponent.html":{},"components/EndGameComponent.html":{},"interfaces/Game.html":{},"components/GameComponent.html":{},"modules/GameModule.html":{},"modules/GameRoutingModule.html":{},"injectables/GameState.html":{},"classes/GameStateModel.html":{},"components/HeaderComponent.html":{},"components/HomepageComponent.html":{},"modules/HomepageModule.html":{},"modules/HomepageRoutingModule.html":{},"modules/MaterialModule.html":{},"components/NotFoundComponent.html":{},"interfaces/Pawn.html":{},"injectables/ThemeState.html":{},"classes/ThemeStateModel.html":{},"injectables/VictoryCheckService.html":{}}}],["import('./game/game.module').then(m",{"_index":149,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["import('./homepage/homepage.module').then(m",{"_index":146,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["important",{"_index":708,"title":{},"body":{"components/HomepageComponent.html":{}}}],["imports",{"_index":89,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules/GameModule.html":{},"modules/GameRoutingModule.html":{},"modules/HomepageModule.html":{},"modules/HomepageRoutingModule.html":{},"modules/MaterialModule.html":{}}}],["index",{"_index":20,"title":{"index.html":{}},"body":{"components/AppComponent.html":{},"components/CaseComponent.html":{},"components/EndGameComponent.html":{},"interfaces/Game.html":{},"components/GameComponent.html":{},"injectables/GameState.html":{},"classes/GameStateModel.html":{},"components/HeaderComponent.html":{},"components/HomepageComponent.html":{},"interfaces/Pawn.html":{},"interfaces/Player.html":{},"injectables/ThemeState.html":{},"classes/ThemeStateModel.html":{},"injectables/VictoryCheckService.html":{}}}],["info",{"_index":3,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/CaseComponent.html":{},"components/EndGameComponent.html":{},"interfaces/Game.html":{},"components/GameComponent.html":{},"modules/GameModule.html":{},"modules/GameRoutingModule.html":{},"injectables/GameState.html":{},"classes/GameStateModel.html":{},"components/HeaderComponent.html":{},"components/HomepageComponent.html":{},"modules/HomepageModule.html":{},"modules/HomepageRoutingModule.html":{},"modules/MaterialModule.html":{},"components/NotFoundComponent.html":{},"interfaces/Pawn.html":{},"interfaces/Player.html":{},"injectables/ThemeState.html":{},"classes/ThemeStateModel.html":{},"injectables/VictoryCheckService.html":{}}}],["initgame",{"_index":289,"title":{},"body":{"components/GameComponent.html":{},"injectables/GameState.html":{}}}],["initgame(undefined",{"_index":550,"title":{},"body":{"injectables/GameState.html":{}}}],["initgame({getstate",{"_index":588,"title":{},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{}}}],["initialize",{"_index":554,"title":{},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{}}}],["inject",{"_index":235,"title":{},"body":{"components/EndGameComponent.html":{}}}],["inject(mat_dialog_data",{"_index":232,"title":{},"body":{"components/EndGameComponent.html":{}}}],["injectable",{"_index":519,"title":{"injectables/GameState.html":{},"injectables/ThemeState.html":{},"injectables/VictoryCheckService.html":{}},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{},"injectables/ThemeState.html":{},"classes/ThemeStateModel.html":{},"injectables/VictoryCheckService.html":{},"coverage.html":{}}}],["injectables",{"_index":520,"title":{},"body":{"injectables/GameState.html":{},"injectables/ThemeState.html":{},"injectables/VictoryCheckService.html":{},"overview.html":{}}}],["input",{"_index":168,"title":{},"body":{"components/CaseComponent.html":{}}}],["input('pawn",{"_index":171,"title":{},"body":{"components/CaseComponent.html":{}}}],["inputs",{"_index":163,"title":{},"body":{"components/CaseComponent.html":{}}}],["inset",{"_index":500,"title":{},"body":{"components/GameComponent.html":{}}}],["interface",{"_index":257,"title":{"interfaces/Game.html":{},"interfaces/Pawn.html":{},"interfaces/Player.html":{}},"body":{"interfaces/Game.html":{},"interfaces/Pawn.html":{},"interfaces/Player.html":{},"coverage.html":{}}}],["interfaces",{"_index":258,"title":{},"body":{"interfaces/Game.html":{},"interfaces/Pawn.html":{},"interfaces/Player.html":{},"overview.html":{}}}],["isdarktheme",{"_index":22,"title":{},"body":{"components/AppComponent.html":{}}}],["isinwinningline",{"_index":826,"title":{},"body":{"interfaces/Pawn.html":{}}}],["isn't",{"_index":340,"title":{},"body":{"components/GameComponent.html":{},"injectables/GameState.html":{},"classes/GameStateModel.html":{}}}],["item",{"_index":700,"title":{},"body":{"components/HomepageComponent.html":{}}}],["jaunes",{"_index":234,"title":{},"body":{"components/EndGameComponent.html":{}}}],["jeu",{"_index":388,"title":{},"body":{"components/GameComponent.html":{},"injectables/GameState.html":{},"classes/GameStateModel.html":{}}}],["jouer",{"_index":689,"title":{},"body":{"components/HomepageComponent.html":{}}}],["joueur",{"_index":581,"title":{},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{},"injectables/VictoryCheckService.html":{}}}],["jouée",{"_index":869,"title":{},"body":{"injectables/VictoryCheckService.html":{}}}],["karma",{"_index":971,"title":{},"body":{"index.html":{}}}],["l'accueil",{"_index":817,"title":{},"body":{"components/NotFoundComponent.html":{}}}],["l\\'accueil",{"_index":824,"title":{},"body":{"components/NotFoundComponent.html":{}}}],["la",{"_index":243,"title":{},"body":{"components/EndGameComponent.html":{},"components/GameComponent.html":{},"injectables/GameState.html":{},"classes/GameStateModel.html":{},"components/NotFoundComponent.html":{},"injectables/VictoryCheckService.html":{}}}],["label",{"_index":706,"title":{},"body":{"components/HomepageComponent.html":{}}}],["last",{"_index":310,"title":{},"body":{"components/GameComponent.html":{},"injectables/GameState.html":{},"classes/GameStateModel.html":{},"injectables/VictoryCheckService.html":{}}}],["layout",{"_index":516,"title":{},"body":{"modules/GameModule.html":{},"modules/HomepageModule.html":{},"dependencies.html":{}}}],["layout/header/header.component",{"_index":105,"title":{},"body":{"modules/AppModule.html":{}}}],["le",{"_index":387,"title":{},"body":{"components/GameComponent.html":{},"injectables/VictoryCheckService.html":{}}}],["left",{"_index":495,"title":{},"body":{"components/GameComponent.html":{},"injectables/VictoryCheckService.html":{}}}],["legend",{"_index":49,"title":{},"body":{"components/AppComponent.html":{},"components/CaseComponent.html":{},"components/EndGameComponent.html":{},"components/GameComponent.html":{},"components/HeaderComponent.html":{},"components/HomepageComponent.html":{},"components/NotFoundComponent.html":{}}}],["les",{"_index":868,"title":{},"body":{"injectables/VictoryCheckService.html":{}}}],["ligne",{"_index":618,"title":{},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{},"injectables/VictoryCheckService.html":{}}}],["lignes",{"_index":688,"title":{},"body":{"components/HomepageComponent.html":{}}}],["line",{"_index":828,"title":{},"body":{"interfaces/Pawn.html":{}}}],["lineplayed",{"_index":612,"title":{},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{}}}],["list",{"_index":766,"title":{},"body":{"modules/MaterialModule.html":{}}}],["liste",{"_index":418,"title":{},"body":{"components/GameComponent.html":{}}}],["loadchildren",{"_index":145,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["loading",{"_index":680,"title":{},"body":{"components/HomepageComponent.html":{}}}],["m.gamemodule",{"_index":150,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["m.homepagemodule",{"_index":147,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["margin",{"_index":458,"title":{},"body":{"components/GameComponent.html":{},"components/HomepageComponent.html":{},"components/NotFoundComponent.html":{}}}],["mat",{"_index":251,"title":{},"body":{"components/EndGameComponent.html":{},"components/HomepageComponent.html":{}}}],["mat_dialog_data",{"_index":236,"title":{},"body":{"components/EndGameComponent.html":{}}}],["matautocompletemodule",{"_index":738,"title":{},"body":{"modules/MaterialModule.html":{}}}],["matbadgemodule",{"_index":740,"title":{},"body":{"modules/MaterialModule.html":{}}}],["matbottomsheetmodule",{"_index":742,"title":{},"body":{"modules/MaterialModule.html":{}}}],["matbuttonmodule",{"_index":745,"title":{},"body":{"modules/MaterialModule.html":{}}}],["matbuttontogglemodule",{"_index":747,"title":{},"body":{"modules/MaterialModule.html":{}}}],["matcardmodule",{"_index":749,"title":{},"body":{"modules/MaterialModule.html":{}}}],["match",{"_index":241,"title":{},"body":{"components/EndGameComponent.html":{},"components/GameComponent.html":{}}}],["matcheckboxmodule",{"_index":751,"title":{},"body":{"modules/MaterialModule.html":{}}}],["matching",{"_index":72,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/CaseComponent.html":{},"components/EndGameComponent.html":{},"interfaces/Game.html":{},"components/GameComponent.html":{},"modules/GameModule.html":{},"modules/GameRoutingModule.html":{},"injectables/GameState.html":{},"classes/GameStateModel.html":{},"components/HeaderComponent.html":{},"components/HomepageComponent.html":{},"modules/HomepageModule.html":{},"modules/HomepageRoutingModule.html":{},"modules/MaterialModule.html":{},"components/NotFoundComponent.html":{},"interfaces/Pawn.html":{},"interfaces/Player.html":{},"injectables/ThemeState.html":{},"classes/ThemeStateModel.html":{},"injectables/VictoryCheckService.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"routes.html":{}}}],["matchipsmodule",{"_index":753,"title":{},"body":{"modules/MaterialModule.html":{}}}],["matdatepickermodule",{"_index":757,"title":{},"body":{"modules/MaterialModule.html":{}}}],["matdialog",{"_index":358,"title":{},"body":{"components/GameComponent.html":{}}}],["matdialogmodule",{"_index":759,"title":{},"body":{"modules/MaterialModule.html":{}}}],["matdividermodule",{"_index":760,"title":{},"body":{"modules/MaterialModule.html":{}}}],["material/material.module",{"_index":99,"title":{},"body":{"modules/AppModule.html":{},"modules/GameModule.html":{},"modules/HomepageModule.html":{}}}],["materialmodule",{"_index":83,"title":{"modules/MaterialModule.html":{}},"body":{"modules/AppModule.html":{},"modules/GameModule.html":{},"modules/HomepageModule.html":{},"modules/MaterialModule.html":{},"modules.html":{},"overview.html":{}}}],["matexpansionmodule",{"_index":762,"title":{},"body":{"modules/MaterialModule.html":{}}}],["matgridlistmodule",{"_index":764,"title":{},"body":{"modules/MaterialModule.html":{}}}],["maticonmodule",{"_index":767,"title":{},"body":{"modules/MaterialModule.html":{}}}],["matinputmodule",{"_index":769,"title":{},"body":{"modules/MaterialModule.html":{}}}],["matlistmodule",{"_index":771,"title":{},"body":{"modules/MaterialModule.html":{}}}],["matmenumodule",{"_index":773,"title":{},"body":{"modules/MaterialModule.html":{}}}],["matnativedatemodule",{"_index":775,"title":{},"body":{"modules/MaterialModule.html":{}}}],["matpaginatormodule",{"_index":778,"title":{},"body":{"modules/MaterialModule.html":{}}}],["matprogressbarmodule",{"_index":780,"title":{},"body":{"modules/MaterialModule.html":{}}}],["matprogressspinnermodule",{"_index":782,"title":{},"body":{"modules/MaterialModule.html":{}}}],["matradiomodule",{"_index":784,"title":{},"body":{"modules/MaterialModule.html":{}}}],["matripplemodule",{"_index":776,"title":{},"body":{"modules/MaterialModule.html":{}}}],["matselectmodule",{"_index":786,"title":{},"body":{"modules/MaterialModule.html":{}}}],["matsidenavmodule",{"_index":788,"title":{},"body":{"modules/MaterialModule.html":{}}}],["matslidermodule",{"_index":790,"title":{},"body":{"modules/MaterialModule.html":{}}}],["matslidetogglemodule",{"_index":792,"title":{},"body":{"modules/MaterialModule.html":{}}}],["matsnackbar",{"_index":355,"title":{},"body":{"components/GameComponent.html":{}}}],["matsnackbarmodule",{"_index":794,"title":{},"body":{"modules/MaterialModule.html":{}}}],["matsortmodule",{"_index":795,"title":{},"body":{"modules/MaterialModule.html":{}}}],["matsteppermodule",{"_index":755,"title":{},"body":{"modules/MaterialModule.html":{}}}],["mattablemodule",{"_index":797,"title":{},"body":{"modules/MaterialModule.html":{}}}],["mattabsmodule",{"_index":799,"title":{},"body":{"modules/MaterialModule.html":{}}}],["mattoolbarmodule",{"_index":801,"title":{},"body":{"modules/MaterialModule.html":{}}}],["mattooltipmodule",{"_index":803,"title":{},"body":{"modules/MaterialModule.html":{}}}],["mattreemodule",{"_index":805,"title":{},"body":{"modules/MaterialModule.html":{}}}],["max",{"_index":456,"title":{},"body":{"components/GameComponent.html":{},"components/HomepageComponent.html":{},"components/NotFoundComponent.html":{}}}],["metadata",{"_index":13,"title":{},"body":{"components/AppComponent.html":{},"components/CaseComponent.html":{},"components/EndGameComponent.html":{},"components/GameComponent.html":{},"components/HeaderComponent.html":{},"components/HomepageComponent.html":{},"components/NotFoundComponent.html":{}}}],["methods",{"_index":282,"title":{},"body":{"components/GameComponent.html":{},"injectables/GameState.html":{},"classes/GameStateModel.html":{},"components/HeaderComponent.html":{},"components/HomepageComponent.html":{},"injectables/ThemeState.html":{},"injectables/VictoryCheckService.html":{}}}],["min",{"_index":43,"title":{},"body":{"components/AppComponent.html":{}}}],["model",{"_index":577,"title":{},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{},"injectables/ThemeState.html":{},"classes/ThemeStateModel.html":{}}}],["models/game",{"_index":361,"title":{},"body":{"components/GameComponent.html":{}}}],["models/pawn",{"_index":362,"title":{},"body":{"components/GameComponent.html":{}}}],["models/player",{"_index":367,"title":{},"body":{"components/GameComponent.html":{}}}],["module",{"_index":74,"title":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules/GameModule.html":{},"modules/GameRoutingModule.html":{},"modules/HomepageModule.html":{},"modules/HomepageRoutingModule.html":{},"modules/MaterialModule.html":{}},"body":{}}],["modules",{"_index":76,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules/GameModule.html":{},"modules/GameRoutingModule.html":{},"modules/HomepageModule.html":{},"modules/HomepageRoutingModule.html":{},"modules/MaterialModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":981,"title":{},"body":{"index.html":{}}}],["n'existe",{"_index":814,"title":{},"body":{"components/NotFoundComponent.html":{}}}],["n\\'existe",{"_index":823,"title":{},"body":{"components/NotFoundComponent.html":{}}}],["name",{"_index":55,"title":{},"body":{"components/AppComponent.html":{},"components/CaseComponent.html":{},"components/EndGameComponent.html":{},"components/GameComponent.html":{},"injectables/GameState.html":{},"classes/GameStateModel.html":{},"components/HeaderComponent.html":{},"components/HomepageComponent.html":{},"components/NotFoundComponent.html":{},"interfaces/Player.html":{},"injectables/ThemeState.html":{},"classes/ThemeStateModel.html":{},"injectables/VictoryCheckService.html":{},"index.html":{}}}],["navigate",{"_index":676,"title":{},"body":{"components/HomepageComponent.html":{},"index.html":{}}}],["need",{"_index":976,"title":{},"body":{"index.html":{}}}],["new",{"_index":569,"title":{},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{},"coverage.html":{},"index.html":{}}}],["next",{"_index":331,"title":{},"body":{"components/GameComponent.html":{}}}],["ng",{"_index":703,"title":{},"body":{"components/HomepageComponent.html":{},"index.html":{}}}],["ngmodule",{"_index":91,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules/GameModule.html":{},"modules/GameRoutingModule.html":{},"modules/HomepageModule.html":{},"modules/HomepageRoutingModule.html":{},"modules/MaterialModule.html":{}}}],["ngoninit",{"_index":370,"title":{},"body":{"components/GameComponent.html":{},"components/HeaderComponent.html":{}}}],["ngxs.config",{"_index":111,"title":{},"body":{"modules/AppModule.html":{}}}],["ngxs/storage",{"_index":108,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["ngxs/store",{"_index":37,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/GameComponent.html":{},"injectables/GameState.html":{},"classes/GameStateModel.html":{},"components/HeaderComponent.html":{},"components/HomepageComponent.html":{},"injectables/ThemeState.html":{},"classes/ThemeStateModel.html":{},"dependencies.html":{}}}],["ngxs/store/operators",{"_index":572,"title":{},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{}}}],["ngxsconfig",{"_index":110,"title":{},"body":{"modules/AppModule.html":{}}}],["ngxsmodule",{"_index":106,"title":{},"body":{"modules/AppModule.html":{}}}],["ngxsmodule.forroot([themestate",{"_index":116,"title":{},"body":{"modules/AppModule.html":{}}}],["ngxsstoragepluginmodule",{"_index":107,"title":{},"body":{"modules/AppModule.html":{}}}],["ngxsstoragepluginmodule.forroot",{"_index":117,"title":{},"body":{"modules/AppModule.html":{}}}],["nombre",{"_index":402,"title":{},"body":{"components/GameComponent.html":{}}}],["none",{"_index":498,"title":{},"body":{"components/GameComponent.html":{}}}],["notfoundcomponent",{"_index":67,"title":{"components/NotFoundComponent.html":{}},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/CaseComponent.html":{},"components/EndGameComponent.html":{},"components/GameComponent.html":{},"components/HeaderComponent.html":{},"components/HomepageComponent.html":{},"components/NotFoundComponent.html":{},"coverage.html":{},"overview.html":{}}}],["now",{"_index":276,"title":{},"body":{"interfaces/Game.html":{},"interfaces/Player.html":{}}}],["nul",{"_index":242,"title":{},"body":{"components/EndGameComponent.html":{},"components/GameComponent.html":{}}}],["number",{"_index":268,"title":{},"body":{"interfaces/Game.html":{},"components/GameComponent.html":{},"injectables/GameState.html":{},"classes/GameStateModel.html":{},"interfaces/Pawn.html":{},"interfaces/Player.html":{},"injectables/VictoryCheckService.html":{}}}],["object",{"_index":681,"title":{},"body":{"components/HomepageComponent.html":{}}}],["observable",{"_index":25,"title":{},"body":{"components/AppComponent.html":{},"components/GameComponent.html":{},"components/HeaderComponent.html":{},"components/HomepageComponent.html":{}}}],["occuper",{"_index":413,"title":{},"body":{"components/GameComponent.html":{}}}],["ok",{"_index":397,"title":{},"body":{"components/GameComponent.html":{}}}],["one",{"_index":273,"title":{},"body":{"interfaces/Game.html":{},"components/GameComponent.html":{},"injectables/GameState.html":{},"classes/GameStateModel.html":{},"components/HeaderComponent.html":{},"components/HomepageComponent.html":{},"interfaces/Player.html":{}}}],["oninit",{"_index":279,"title":{},"body":{"components/GameComponent.html":{},"components/HeaderComponent.html":{}}}],["opacity",{"_index":177,"title":{},"body":{"components/CaseComponent.html":{},"components/GameComponent.html":{},"components/HomepageComponent.html":{}}}],["openendgamedialog",{"_index":290,"title":{},"body":{"components/GameComponent.html":{}}}],["openendgamedialog(winner",{"_index":333,"title":{},"body":{"components/GameComponent.html":{}}}],["optional",{"_index":220,"title":{},"body":{"components/EndGameComponent.html":{},"interfaces/Game.html":{},"components/GameComponent.html":{},"injectables/GameState.html":{},"components/HomepageComponent.html":{},"interfaces/Pawn.html":{},"injectables/ThemeState.html":{},"injectables/VictoryCheckService.html":{}}}],["ordonne",{"_index":877,"title":{},"body":{"injectables/VictoryCheckService.html":{}}}],["oups",{"_index":813,"title":{},"body":{"components/NotFoundComponent.html":{}}}],["out",{"_index":86,"title":{},"body":{"modules/AppModule.html":{},"modules/GameModule.html":{},"modules/HomepageModule.html":{},"index.html":{},"overview.html":{}}}],["outline",{"_index":184,"title":{},"body":{"components/CaseComponent.html":{}}}],["overflow",{"_index":252,"title":{},"body":{"components/EndGameComponent.html":{}}}],["overlaymodule",{"_index":807,"title":{},"body":{"modules/MaterialModule.html":{}}}],["overview",{"_index":983,"title":{"overview.html":{}},"body":{"index.html":{},"overview.html":{}}}],["p",{"_index":425,"title":{},"body":{"components/GameComponent.html":{}}}],["p.player.id",{"_index":875,"title":{},"body":{"injectables/VictoryCheckService.html":{}}}],["p.x",{"_index":410,"title":{},"body":{"components/GameComponent.html":{},"injectables/VictoryCheckService.html":{}}}],["p.y",{"_index":424,"title":{},"body":{"components/GameComponent.html":{},"injectables/VictoryCheckService.html":{}}}],["package",{"_index":921,"title":{"dependencies.html":{}},"body":{"index.html":{}}}],["padding",{"_index":193,"title":{},"body":{"components/CaseComponent.html":{},"components/GameComponent.html":{},"components/HomepageComponent.html":{},"components/NotFoundComponent.html":{}}}],["page",{"_index":677,"title":{},"body":{"components/HomepageComponent.html":{},"components/NotFoundComponent.html":{},"index.html":{}}}],["par",{"_index":414,"title":{},"body":{"components/GameComponent.html":{}}}],["param",{"_index":239,"title":{},"body":{"components/EndGameComponent.html":{},"components/GameComponent.html":{},"components/HomepageComponent.html":{}}}],["parameter",{"_index":218,"title":{},"body":{"components/EndGameComponent.html":{}}}],["parameters",{"_index":219,"title":{},"body":{"components/EndGameComponent.html":{},"components/GameComponent.html":{},"injectables/GameState.html":{},"components/HomepageComponent.html":{},"injectables/ThemeState.html":{},"injectables/VictoryCheckService.html":{}}}],["paramètres",{"_index":422,"title":{},"body":{"components/GameComponent.html":{}}}],["pas",{"_index":815,"title":{},"body":{"components/NotFoundComponent.html":{}}}],["passée",{"_index":407,"title":{},"body":{"components/GameComponent.html":{}}}],["patchstate",{"_index":589,"title":{},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{},"injectables/ThemeState.html":{},"classes/ThemeStateModel.html":{}}}],["path",{"_index":140,"title":{},"body":{"modules/AppRoutingModule.html":{},"modules/GameRoutingModule.html":{},"modules/HomepageRoutingModule.html":{}}}],["pathmatch",{"_index":143,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["pawn",{"_index":164,"title":{"interfaces/Pawn.html":{}},"body":{"components/CaseComponent.html":{},"interfaces/Game.html":{},"components/GameComponent.html":{},"injectables/GameState.html":{},"classes/GameStateModel.html":{},"interfaces/Pawn.html":{},"injectables/VictoryCheckService.html":{},"coverage.html":{}}}],["pawn.y",{"_index":905,"title":{},"body":{"injectables/VictoryCheckService.html":{}}}],["pawncolor",{"_index":440,"title":{},"body":{"components/GameComponent.html":{}}}],["pawnlist",{"_index":885,"title":{},"body":{"injectables/VictoryCheckService.html":{}}}],["pawnlist[index",{"_index":886,"title":{},"body":{"injectables/VictoryCheckService.html":{}}}],["pawnplayed",{"_index":611,"title":{},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{},"injectables/VictoryCheckService.html":{}}}],["pawnplayed.player",{"_index":621,"title":{},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{}}}],["pawnplayed.player.id",{"_index":876,"title":{},"body":{"injectables/VictoryCheckService.html":{}}}],["pawnplayed.x",{"_index":615,"title":{},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{},"injectables/VictoryCheckService.html":{}}}],["pawnplayed.y",{"_index":613,"title":{},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{},"injectables/VictoryCheckService.html":{}}}],["pawns",{"_index":263,"title":{},"body":{"interfaces/Game.html":{},"components/GameComponent.html":{},"injectables/GameState.html":{},"classes/GameStateModel.html":{},"injectables/VictoryCheckService.html":{}}}],["pawnsincolumn",{"_index":399,"title":{},"body":{"components/GameComponent.html":{}}}],["pawnslist",{"_index":606,"title":{},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{}}}],["pawntoanimate",{"_index":442,"title":{},"body":{"components/GameComponent.html":{}}}],["pawntoanimate.classlist.add(\"show",{"_index":446,"title":{},"body":{"components/GameComponent.html":{}}}],["pawntoanimate.classlist.remove(\"show",{"_index":451,"title":{},"body":{"components/GameComponent.html":{}}}],["pawntoanimate.style.top",{"_index":448,"title":{},"body":{"components/GameComponent.html":{}}}],["pawntodisplay",{"_index":416,"title":{},"body":{"components/GameComponent.html":{}}}],["payload",{"_index":590,"title":{},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{}}}],["pion",{"_index":415,"title":{},"body":{"components/GameComponent.html":{},"injectables/GameState.html":{},"classes/GameStateModel.html":{}}}],["pions",{"_index":404,"title":{},"body":{"components/GameComponent.html":{},"injectables/VictoryCheckService.html":{}}}],["platform",{"_index":973,"title":{},"body":{"index.html":{}}}],["play",{"_index":275,"title":{},"body":{"interfaces/Game.html":{},"components/GameComponent.html":{}}}],["played",{"_index":271,"title":{},"body":{"interfaces/Game.html":{},"components/GameComponent.html":{},"injectables/GameState.html":{},"classes/GameStateModel.html":{},"interfaces/Pawn.html":{},"injectables/VictoryCheckService.html":{}}}],["playedpawn",{"_index":318,"title":{},"body":{"components/GameComponent.html":{}}}],["playedpawn.y",{"_index":382,"title":{},"body":{"components/GameComponent.html":{}}}],["player",{"_index":215,"title":{"interfaces/Player.html":{}},"body":{"components/EndGameComponent.html":{},"interfaces/Game.html":{},"components/GameComponent.html":{},"injectables/GameState.html":{},"classes/GameStateModel.html":{},"interfaces/Pawn.html":{},"interfaces/Player.html":{},"coverage.html":{}}}],["player.id",{"_index":441,"title":{},"body":{"components/GameComponent.html":{}}}],["player1",{"_index":264,"title":{},"body":{"interfaces/Game.html":{},"injectables/GameState.html":{},"classes/GameStateModel.html":{}}}],["player2",{"_index":265,"title":{},"body":{"interfaces/Game.html":{},"injectables/GameState.html":{},"classes/GameStateModel.html":{}}}],["playercolumn",{"_index":873,"title":{},"body":{"injectables/VictoryCheckService.html":{}}}],["playercolumn.map((pawn",{"_index":884,"title":{},"body":{"injectables/VictoryCheckService.html":{}}}],["playercolumn.sort((a,b",{"_index":879,"title":{},"body":{"injectables/VictoryCheckService.html":{}}}],["playerpawns",{"_index":901,"title":{},"body":{"injectables/VictoryCheckService.html":{}}}],["playerpawns.map((pawn",{"_index":903,"title":{},"body":{"injectables/VictoryCheckService.html":{}}}],["playerpawns.sort((a,b",{"_index":902,"title":{},"body":{"injectables/VictoryCheckService.html":{}}}],["playerrow",{"_index":892,"title":{},"body":{"injectables/VictoryCheckService.html":{}}}],["playerrow.map((pawn",{"_index":896,"title":{},"body":{"injectables/VictoryCheckService.html":{}}}],["playerrow.sort((a,b",{"_index":893,"title":{},"body":{"injectables/VictoryCheckService.html":{}}}],["players",{"_index":579,"title":{},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{}}}],["playpawn",{"_index":291,"title":{},"body":{"components/GameComponent.html":{},"injectables/GameState.html":{},"classes/GameStateModel.html":{}}}],["playpawn(column",{"_index":338,"title":{},"body":{"components/GameComponent.html":{}}}],["playpawn(undefined",{"_index":555,"title":{},"body":{"injectables/GameState.html":{}}}],["playpawn({getstate",{"_index":605,"title":{},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{}}}],["pleine",{"_index":246,"title":{},"body":{"components/EndGameComponent.html":{},"components/GameComponent.html":{},"injectables/GameState.html":{},"classes/GameStateModel.html":{}}}],["plugin",{"_index":109,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["portalmodule",{"_index":728,"title":{},"body":{"modules/MaterialModule.html":{}}}],["position",{"_index":173,"title":{},"body":{"components/CaseComponent.html":{},"components/GameComponent.html":{},"components/HeaderComponent.html":{}}}],["pour",{"_index":616,"title":{},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{}}}],["present",{"_index":322,"title":{},"body":{"components/GameComponent.html":{}}}],["private",{"_index":285,"title":{},"body":{"components/GameComponent.html":{},"injectables/GameState.html":{},"classes/GameStateModel.html":{},"components/HomepageComponent.html":{}}}],["project",{"_index":940,"title":{},"body":{"index.html":{}}}],["properties",{"_index":21,"title":{},"body":{"components/AppComponent.html":{},"components/EndGameComponent.html":{},"interfaces/Game.html":{},"components/GameComponent.html":{},"injectables/GameState.html":{},"classes/GameStateModel.html":{},"components/HeaderComponent.html":{},"components/HomepageComponent.html":{},"interfaces/Pawn.html":{},"interfaces/Player.html":{},"classes/ThemeStateModel.html":{}}}],["provide",{"_index":850,"title":{},"body":{"injectables/VictoryCheckService.html":{}}}],["providedin",{"_index":867,"title":{},"body":{"injectables/VictoryCheckService.html":{}}}],["providers",{"_index":133,"title":{},"body":{"modules/AppModule.html":{}}}],["public",{"_index":209,"title":{},"body":{"components/EndGameComponent.html":{},"components/GameComponent.html":{},"injectables/VictoryCheckService.html":{}}}],["puissance",{"_index":654,"title":{},"body":{"components/HeaderComponent.html":{}}}],["puissance4",{"_index":939,"title":{},"body":{"index.html":{}}}],["purpose",{"_index":829,"title":{},"body":{"interfaces/Pawn.html":{}}}],["put",{"_index":327,"title":{},"body":{"components/GameComponent.html":{}}}],["qui",{"_index":870,"title":{},"body":{"injectables/VictoryCheckService.html":{}}}],["quit",{"_index":435,"title":{},"body":{"components/GameComponent.html":{}}}],["quitter",{"_index":247,"title":{},"body":{"components/EndGameComponent.html":{}}}],["radius",{"_index":467,"title":{},"body":{"components/GameComponent.html":{},"components/HomepageComponent.html":{}}}],["red",{"_index":197,"title":{},"body":{"components/CaseComponent.html":{},"components/EndGameComponent.html":{},"components/GameComponent.html":{},"injectables/GameState.html":{},"classes/GameStateModel.html":{}}}],["redirectto",{"_index":141,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["redwins",{"_index":210,"title":{},"body":{"components/EndGameComponent.html":{}}}],["reference",{"_index":984,"title":{},"body":{"index.html":{}}}],["register",{"_index":122,"title":{},"body":{"modules/AppModule.html":{}}}],["registerwhenstable:30000",{"_index":132,"title":{},"body":{"modules/AppModule.html":{}}}],["registrationstrategy",{"_index":131,"title":{},"body":{"modules/AppModule.html":{}}}],["rejouer",{"_index":248,"title":{},"body":{"components/EndGameComponent.html":{}}}],["relative",{"_index":174,"title":{},"body":{"components/CaseComponent.html":{}}}],["reload",{"_index":952,"title":{},"body":{"index.html":{}}}],["remove",{"_index":309,"title":{},"body":{"components/GameComponent.html":{}}}],["removeitem",{"_index":571,"title":{},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{}}}],["removes",{"_index":347,"title":{},"body":{"components/GameComponent.html":{},"injectables/GameState.html":{},"classes/GameStateModel.html":{}}}],["repeat(11",{"_index":475,"title":{},"body":{"components/GameComponent.html":{}}}],["repeat(13",{"_index":477,"title":{},"body":{"components/GameComponent.html":{}}}],["repeat(15",{"_index":479,"title":{},"body":{"components/GameComponent.html":{}}}],["repeat(5",{"_index":470,"title":{},"body":{"components/GameComponent.html":{}}}],["repeat(7",{"_index":463,"title":{},"body":{"components/GameComponent.html":{}}}],["repeat(9",{"_index":473,"title":{},"body":{"components/GameComponent.html":{}}}],["replay",{"_index":438,"title":{},"body":{"components/GameComponent.html":{}}}],["represents",{"_index":260,"title":{},"body":{"interfaces/Game.html":{},"interfaces/Pawn.html":{},"interfaces/Player.html":{}}}],["reset",{"_index":85,"title":{},"body":{"modules/AppModule.html":{},"modules/GameModule.html":{},"injectables/GameState.html":{},"classes/GameStateModel.html":{},"modules/HomepageModule.html":{},"overview.html":{}}}],["resetgame",{"_index":292,"title":{},"body":{"components/GameComponent.html":{},"injectables/GameState.html":{}}}],["resetgame(undefined",{"_index":559,"title":{},"body":{"injectables/GameState.html":{}}}],["resetgame({getstate",{"_index":595,"title":{},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{}}}],["resets",{"_index":675,"title":{},"body":{"components/HomepageComponent.html":{}}}],["result",{"_index":71,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/CaseComponent.html":{},"components/EndGameComponent.html":{},"interfaces/Game.html":{},"components/GameComponent.html":{},"modules/GameModule.html":{},"modules/GameRoutingModule.html":{},"injectables/GameState.html":{},"classes/GameStateModel.html":{},"components/HeaderComponent.html":{},"components/HomepageComponent.html":{},"modules/HomepageModule.html":{},"modules/HomepageRoutingModule.html":{},"modules/MaterialModule.html":{},"components/NotFoundComponent.html":{},"interfaces/Pawn.html":{},"interfaces/Player.html":{},"injectables/ThemeState.html":{},"classes/ThemeStateModel.html":{},"injectables/VictoryCheckService.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"routes.html":{}}}],["results",{"_index":73,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/CaseComponent.html":{},"components/EndGameComponent.html":{},"interfaces/Game.html":{},"components/GameComponent.html":{},"modules/GameModule.html":{},"modules/GameRoutingModule.html":{},"injectables/GameState.html":{},"classes/GameStateModel.html":{},"components/HeaderComponent.html":{},"components/HomepageComponent.html":{},"modules/HomepageModule.html":{},"modules/HomepageRoutingModule.html":{},"modules/MaterialModule.html":{},"components/NotFoundComponent.html":{},"interfaces/Pawn.html":{},"interfaces/Player.html":{},"injectables/ThemeState.html":{},"classes/ThemeStateModel.html":{},"injectables/VictoryCheckService.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"routes.html":{}}}],["retourne",{"_index":412,"title":{},"body":{"components/GameComponent.html":{}}}],["retrieves",{"_index":839,"title":{},"body":{"injectables/ThemeState.html":{},"classes/ThemeStateModel.html":{}}}],["return",{"_index":398,"title":{},"body":{"components/GameComponent.html":{},"injectables/GameState.html":{},"classes/GameStateModel.html":{},"injectables/ThemeState.html":{},"classes/ThemeStateModel.html":{},"injectables/VictoryCheckService.html":{}}}],["returns",{"_index":304,"title":{},"body":{"components/GameComponent.html":{},"injectables/GameState.html":{},"classes/GameStateModel.html":{},"components/HeaderComponent.html":{},"components/HomepageComponent.html":{},"injectables/ThemeState.html":{},"injectables/VictoryCheckService.html":{}}}],["revenir",{"_index":816,"title":{},"body":{"components/NotFoundComponent.html":{}}}],["right",{"_index":482,"title":{},"body":{"components/GameComponent.html":{},"injectables/VictoryCheckService.html":{}}}],["root",{"_index":15,"title":{},"body":{"components/AppComponent.html":{},"injectables/VictoryCheckService.html":{}}}],["root'},{'name",{"_index":56,"title":{},"body":{"components/AppComponent.html":{},"components/CaseComponent.html":{},"components/EndGameComponent.html":{},"components/GameComponent.html":{},"components/HeaderComponent.html":{},"components/HomepageComponent.html":{},"components/NotFoundComponent.html":{}}}],["rotate(45deg",{"_index":707,"title":{},"body":{"components/HomepageComponent.html":{}}}],["rouges",{"_index":227,"title":{},"body":{"components/EndGameComponent.html":{}}}],["router",{"_index":366,"title":{},"body":{"components/GameComponent.html":{},"components/HomepageComponent.html":{}}}],["routermodule",{"_index":136,"title":{},"body":{"modules/AppRoutingModule.html":{},"modules/GameRoutingModule.html":{},"modules/HomepageRoutingModule.html":{}}}],["routermodule.forchild(routes",{"_index":518,"title":{},"body":{"modules/GameRoutingModule.html":{},"modules/HomepageRoutingModule.html":{}}}],["routermodule.forroot(routes",{"_index":152,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["routes",{"_index":137,"title":{"routes.html":{}},"body":{"modules/AppRoutingModule.html":{},"modules/GameRoutingModule.html":{},"modules/HomepageRoutingModule.html":{},"overview.html":{},"routes.html":{}}}],["routing.module",{"_index":95,"title":{},"body":{"modules/AppModule.html":{},"modules/GameModule.html":{},"modules/HomepageModule.html":{}}}],["routing.module.ts",{"_index":135,"title":{},"body":{"modules/AppRoutingModule.html":{},"modules/GameRoutingModule.html":{},"modules/HomepageRoutingModule.html":{}}}],["row",{"_index":294,"title":{},"body":{"components/GameComponent.html":{},"components/HomepageComponent.html":{},"injectables/VictoryCheckService.html":{}}}],["rowplayed",{"_index":861,"title":{},"body":{"injectables/VictoryCheckService.html":{}}}],["rows",{"_index":266,"title":{},"body":{"interfaces/Game.html":{},"components/GameComponent.html":{},"injectables/GameState.html":{},"classes/GameStateModel.html":{},"components/HomepageComponent.html":{}}}],["run",{"_index":947,"title":{},"body":{"index.html":{}}}],["running",{"_index":965,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":38,"title":{},"body":{"components/AppComponent.html":{},"components/GameComponent.html":{},"components/HeaderComponent.html":{},"components/HomepageComponent.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":360,"title":{},"body":{"components/GameComponent.html":{},"components/HeaderComponent.html":{}}}],["récupère",{"_index":401,"title":{},"body":{"components/GameComponent.html":{},"injectables/VictoryCheckService.html":{}}}],["scaffolding",{"_index":956,"title":{},"body":{"index.html":{}}}],["scale(0",{"_index":709,"title":{},"body":{"components/HomepageComponent.html":{}}}],["scrollingmodule",{"_index":730,"title":{},"body":{"modules/MaterialModule.html":{}}}],["seconds",{"_index":127,"title":{},"body":{"modules/AppModule.html":{}}}],["select",{"_index":36,"title":{},"body":{"components/AppComponent.html":{},"components/GameComponent.html":{},"components/HeaderComponent.html":{},"components/HomepageComponent.html":{}}}],["select(gamestate.getcolumns",{"_index":678,"title":{},"body":{"components/HomepageComponent.html":{}}}],["select(gamestate.getgame",{"_index":348,"title":{},"body":{"components/GameComponent.html":{}}}],["select(gamestate.getrows",{"_index":682,"title":{},"body":{"components/HomepageComponent.html":{}}}],["select(themestate.gettheme",{"_index":27,"title":{},"body":{"components/AppComponent.html":{},"components/HeaderComponent.html":{}}}],["selected",{"_index":269,"title":{},"body":{"interfaces/Game.html":{},"injectables/GameState.html":{},"classes/GameStateModel.html":{},"components/HeaderComponent.html":{},"injectables/ThemeState.html":{},"classes/ThemeStateModel.html":{}}}],["selector",{"_index":14,"title":{},"body":{"components/AppComponent.html":{},"components/CaseComponent.html":{},"components/EndGameComponent.html":{},"components/GameComponent.html":{},"injectables/GameState.html":{},"classes/GameStateModel.html":{},"components/HeaderComponent.html":{},"components/HomepageComponent.html":{},"components/NotFoundComponent.html":{},"injectables/ThemeState.html":{},"classes/ThemeStateModel.html":{}}}],["serve",{"_index":948,"title":{},"body":{"index.html":{}}}],["server",{"_index":946,"title":{},"body":{"index.html":{}}}],["service",{"_index":538,"title":{},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{}}}],["services/victory",{"_index":575,"title":{},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{}}}],["serviceworker",{"_index":123,"title":{},"body":{"modules/AppModule.html":{}}}],["serviceworkermodule",{"_index":100,"title":{},"body":{"modules/AppModule.html":{}}}],["serviceworkermodule.register('ngsw",{"_index":118,"title":{},"body":{"modules/AppModule.html":{}}}],["set",{"_index":166,"title":{},"body":{"components/CaseComponent.html":{},"components/GameComponent.html":{},"injectables/GameState.html":{},"classes/GameStateModel.html":{},"components/HeaderComponent.html":{},"components/HomepageComponent.html":{}}}],["setcolumns",{"_index":527,"title":{},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{},"components/HomepageComponent.html":{}}}],["setcolumns(event",{"_index":668,"title":{},"body":{"components/HomepageComponent.html":{}}}],["setcolumns(event.value",{"_index":685,"title":{},"body":{"components/HomepageComponent.html":{}}}],["setcolumns(undefined",{"_index":562,"title":{},"body":{"injectables/GameState.html":{}}}],["setcolumns({getstate",{"_index":594,"title":{},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{}}}],["setrows",{"_index":528,"title":{},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{},"components/HomepageComponent.html":{}}}],["setrows(event",{"_index":672,"title":{},"body":{"components/HomepageComponent.html":{}}}],["setrows(event.value",{"_index":686,"title":{},"body":{"components/HomepageComponent.html":{}}}],["setrows(undefined",{"_index":565,"title":{},"body":{"injectables/GameState.html":{}}}],["setrows({getstate",{"_index":593,"title":{},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{}}}],["sets",{"_index":311,"title":{},"body":{"components/GameComponent.html":{},"injectables/GameState.html":{},"classes/GameStateModel.html":{},"components/HomepageComponent.html":{},"injectables/ThemeState.html":{},"classes/ThemeStateModel.html":{}}}],["settimeout",{"_index":447,"title":{},"body":{"components/GameComponent.html":{}}}],["shadow",{"_index":189,"title":{},"body":{"components/CaseComponent.html":{},"components/GameComponent.html":{},"components/HeaderComponent.html":{},"components/HomepageComponent.html":{}}}],["sheet",{"_index":744,"title":{},"body":{"modules/MaterialModule.html":{}}}],["show",{"_index":230,"title":{},"body":{"components/EndGameComponent.html":{},"components/GameComponent.html":{}}}],["shown",{"_index":205,"title":{},"body":{"components/EndGameComponent.html":{}}}],["shows",{"_index":335,"title":{},"body":{"components/GameComponent.html":{}}}],["si",{"_index":385,"title":{},"body":{"components/GameComponent.html":{},"injectables/VictoryCheckService.html":{}}}],["size",{"_index":182,"title":{},"body":{"components/CaseComponent.html":{},"components/HomepageComponent.html":{},"components/NotFoundComponent.html":{}}}],["slider",{"_index":670,"title":{},"body":{"components/HomepageComponent.html":{}}}],["small",{"_index":692,"title":{},"body":{"components/HomepageComponent.html":{}}}],["snackbar",{"_index":341,"title":{},"body":{"components/GameComponent.html":{}}}],["solid",{"_index":186,"title":{},"body":{"components/CaseComponent.html":{},"components/GameComponent.html":{}}}],["soon",{"_index":124,"title":{},"body":{"modules/AppModule.html":{}}}],["source",{"_index":4,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/CaseComponent.html":{},"components/EndGameComponent.html":{},"interfaces/Game.html":{},"components/GameComponent.html":{},"modules/GameModule.html":{},"modules/GameRoutingModule.html":{},"injectables/GameState.html":{},"classes/GameStateModel.html":{},"components/HeaderComponent.html":{},"components/HomepageComponent.html":{},"modules/HomepageModule.html":{},"modules/HomepageRoutingModule.html":{},"modules/MaterialModule.html":{},"components/NotFoundComponent.html":{},"interfaces/Pawn.html":{},"interfaces/Player.html":{},"injectables/ThemeState.html":{},"classes/ThemeStateModel.html":{},"injectables/VictoryCheckService.html":{},"index.html":{}}}],["spinner",{"_index":783,"title":{},"body":{"modules/MaterialModule.html":{}}}],["src/app/app",{"_index":134,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["src/app/app.component.ts",{"_index":10,"title":{},"body":{"components/AppComponent.html":{},"coverage.html":{}}}],["src/app/app.component.ts:18",{"_index":29,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.module.ts",{"_index":87,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app/game/case/case.component.ts",{"_index":154,"title":{},"body":{"components/CaseComponent.html":{},"coverage.html":{}}}],["src/app/game/case/case.component.ts:18",{"_index":165,"title":{},"body":{"components/CaseComponent.html":{}}}],["src/app/game/dialogs/end",{"_index":201,"title":{},"body":{"components/EndGameComponent.html":{},"coverage.html":{}}}],["src/app/game/game",{"_index":517,"title":{},"body":{"modules/GameRoutingModule.html":{}}}],["src/app/game/game.component.ts",{"_index":277,"title":{},"body":{"components/GameComponent.html":{},"coverage.html":{}}}],["src/app/game/game.component.ts:117",{"_index":329,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/game/game.component.ts:133",{"_index":321,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/game/game.component.ts:151",{"_index":313,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/game/game.component.ts:163",{"_index":334,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/game/game.component.ts:190",{"_index":295,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/game/game.component.ts:29",{"_index":349,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/game/game.component.ts:35",{"_index":351,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/game/game.component.ts:41",{"_index":354,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/game/game.component.ts:63",{"_index":332,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/game/game.component.ts:73",{"_index":343,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/game/game.component.ts:80",{"_index":306,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/game/game.component.ts:88",{"_index":339,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/game/game.module.ts",{"_index":510,"title":{},"body":{"modules/GameModule.html":{}}}],["src/app/homepage/homepage",{"_index":719,"title":{},"body":{"modules/HomepageRoutingModule.html":{}}}],["src/app/homepage/homepage.component.ts",{"_index":664,"title":{},"body":{"components/HomepageComponent.html":{},"coverage.html":{}}}],["src/app/homepage/homepage.component.ts:23",{"_index":683,"title":{},"body":{"components/HomepageComponent.html":{}}}],["src/app/homepage/homepage.component.ts:29",{"_index":679,"title":{},"body":{"components/HomepageComponent.html":{}}}],["src/app/homepage/homepage.component.ts:41",{"_index":674,"title":{},"body":{"components/HomepageComponent.html":{}}}],["src/app/homepage/homepage.component.ts:49",{"_index":669,"title":{},"body":{"components/HomepageComponent.html":{}}}],["src/app/homepage/homepage.component.ts:56",{"_index":673,"title":{},"body":{"components/HomepageComponent.html":{}}}],["src/app/homepage/homepage.module.ts",{"_index":715,"title":{},"body":{"modules/HomepageModule.html":{}}}],["src/app/layout/header/header.component.ts",{"_index":631,"title":{},"body":{"components/HeaderComponent.html":{},"coverage.html":{}}}],["src/app/layout/header/header.component.ts:22",{"_index":646,"title":{},"body":{"components/HeaderComponent.html":{}}}],["src/app/layout/header/header.component.ts:41",{"_index":644,"title":{},"body":{"components/HeaderComponent.html":{}}}],["src/app/layout/header/header.component.ts:49",{"_index":638,"title":{},"body":{"components/HeaderComponent.html":{}}}],["src/app/material/material.module.ts",{"_index":720,"title":{},"body":{"modules/MaterialModule.html":{}}}],["src/app/models/game",{"_index":573,"title":{},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{},"injectables/VictoryCheckService.html":{}}}],["src/app/models/game.ts",{"_index":259,"title":{},"body":{"interfaces/Game.html":{},"coverage.html":{}}}],["src/app/models/pawn",{"_index":170,"title":{},"body":{"components/CaseComponent.html":{},"injectables/VictoryCheckService.html":{}}}],["src/app/models/pawn.ts",{"_index":825,"title":{},"body":{"interfaces/Pawn.html":{},"coverage.html":{}}}],["src/app/models/player",{"_index":238,"title":{},"body":{"components/EndGameComponent.html":{},"injectables/GameState.html":{},"classes/GameStateModel.html":{}}}],["src/app/models/player.ts",{"_index":832,"title":{},"body":{"interfaces/Player.html":{},"coverage.html":{}}}],["src/app/not",{"_index":809,"title":{},"body":{"components/NotFoundComponent.html":{},"coverage.html":{}}}],["src/app/store/game/game.state.ts",{"_index":521,"title":{},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{},"coverage.html":{}}}],["src/app/store/game/game.state.ts:106",{"_index":564,"title":{},"body":{"injectables/GameState.html":{}}}],["src/app/store/game/game.state.ts:122",{"_index":561,"title":{},"body":{"injectables/GameState.html":{}}}],["src/app/store/game/game.state.ts:137",{"_index":532,"title":{},"body":{"injectables/GameState.html":{}}}],["src/app/store/game/game.state.ts:157",{"_index":557,"title":{},"body":{"injectables/GameState.html":{}}}],["src/app/store/game/game.state.ts:16",{"_index":630,"title":{},"body":{"classes/GameStateModel.html":{}}}],["src/app/store/game/game.state.ts:177",{"_index":536,"title":{},"body":{"injectables/GameState.html":{}}}],["src/app/store/game/game.state.ts:46",{"_index":570,"title":{},"body":{"injectables/GameState.html":{}}}],["src/app/store/game/game.state.ts:52",{"_index":547,"title":{},"body":{"injectables/GameState.html":{}}}],["src/app/store/game/game.state.ts:60",{"_index":549,"title":{},"body":{"injectables/GameState.html":{}}}],["src/app/store/game/game.state.ts:68",{"_index":545,"title":{},"body":{"injectables/GameState.html":{}}}],["src/app/store/game/game.state.ts:76",{"_index":553,"title":{},"body":{"injectables/GameState.html":{}}}],["src/app/store/game/game.state.ts:90",{"_index":567,"title":{},"body":{"injectables/GameState.html":{}}}],["src/app/store/services/victory",{"_index":848,"title":{},"body":{"injectables/VictoryCheckService.html":{},"coverage.html":{}}}],["src/app/store/theme/theme.state.ts",{"_index":834,"title":{},"body":{"injectables/ThemeState.html":{},"classes/ThemeStateModel.html":{},"coverage.html":{}}}],["src/app/store/theme/theme.state.ts:12",{"_index":847,"title":{},"body":{"classes/ThemeStateModel.html":{}}}],["src/app/store/theme/theme.state.ts:31",{"_index":838,"title":{},"body":{"injectables/ThemeState.html":{}}}],["src/app/store/theme/theme.state.ts:39",{"_index":843,"title":{},"body":{"injectables/ThemeState.html":{}}}],["stable",{"_index":125,"title":{},"body":{"modules/AppModule.html":{}}}],["start",{"_index":346,"title":{},"body":{"components/GameComponent.html":{}}}],["started",{"_index":938,"title":{"index.html":{}},"body":{}}],["startgame",{"_index":667,"title":{},"body":{"components/HomepageComponent.html":{}}}],["state",{"_index":261,"title":{},"body":{"interfaces/Game.html":{},"components/GameComponent.html":{},"injectables/GameState.html":{},"classes/GameStateModel.html":{},"injectables/ThemeState.html":{},"classes/ThemeStateModel.html":{}}}],["state.dark",{"_index":845,"title":{},"body":{"injectables/ThemeState.html":{},"classes/ThemeStateModel.html":{}}}],["state.game",{"_index":585,"title":{},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{}}}],["state.game.columns",{"_index":587,"title":{},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{}}}],["state.game.pawns",{"_index":607,"title":{},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{}}}],["state.game.pawns.slice(0",{"_index":598,"title":{},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{}}}],["state.game.player1",{"_index":592,"title":{},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{}}}],["state.game.player1.id",{"_index":603,"title":{},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{}}}],["state.game.player2",{"_index":604,"title":{},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{}}}],["state.game.rows",{"_index":586,"title":{},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{}}}],["state.game.turn?.id",{"_index":602,"title":{},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{}}}],["statecontext",{"_index":530,"title":{},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{},"injectables/ThemeState.html":{},"classes/ThemeStateModel.html":{}}}],["statements",{"_index":909,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":523,"title":{},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{},"injectables/ThemeState.html":{},"classes/ThemeStateModel.html":{}}}],["sticky",{"_index":657,"title":{},"body":{"components/HeaderComponent.html":{}}}],["store",{"_index":31,"title":{},"body":{"components/AppComponent.html":{},"components/EndGameComponent.html":{},"components/GameComponent.html":{},"components/HeaderComponent.html":{},"components/HomepageComponent.html":{}}}],["store.game.game.columns",{"_index":393,"title":{},"body":{"components/GameComponent.html":{}}}],["store.game.game.rows",{"_index":392,"title":{},"body":{"components/GameComponent.html":{}}}],["store/game/game.actions",{"_index":363,"title":{},"body":{"components/GameComponent.html":{},"components/HomepageComponent.html":{}}}],["store/game/game.state",{"_index":113,"title":{},"body":{"modules/AppModule.html":{},"components/GameComponent.html":{},"components/HomepageComponent.html":{}}}],["store/theme/theme.actions",{"_index":647,"title":{},"body":{"components/HeaderComponent.html":{}}}],["store/theme/theme.state",{"_index":40,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/HeaderComponent.html":{}}}],["stored",{"_index":962,"title":{},"body":{"index.html":{}}}],["string",{"_index":222,"title":{},"body":{"components/EndGameComponent.html":{},"interfaces/Player.html":{}}}],["styles",{"_index":6,"title":{},"body":{"components/AppComponent.html":{},"components/CaseComponent.html":{},"components/EndGameComponent.html":{},"components/GameComponent.html":{},"components/HeaderComponent.html":{},"components/HomepageComponent.html":{},"components/NotFoundComponent.html":{}}}],["styleurls",{"_index":16,"title":{},"body":{"components/AppComponent.html":{},"components/CaseComponent.html":{},"components/EndGameComponent.html":{},"components/GameComponent.html":{},"components/HeaderComponent.html":{},"components/HomepageComponent.html":{},"components/NotFoundComponent.html":{}}}],["subscribe",{"_index":380,"title":{},"body":{"components/GameComponent.html":{}}}],["support",{"_index":985,"title":{},"body":{"modules.html":{}}}],["sur",{"_index":389,"title":{},"body":{"components/GameComponent.html":{}}}],["svg",{"_index":986,"title":{},"body":{"modules.html":{}}}],["switch",{"_index":434,"title":{},"body":{"components/GameComponent.html":{}}}],["sync",{"_index":455,"title":{},"body":{"components/GameComponent.html":{}}}],["table",{"_index":920,"title":{},"body":{"coverage.html":{}}}],["tableau",{"_index":878,"title":{},"body":{"injectables/VictoryCheckService.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":919,"title":{},"body":{"coverage.html":{}}}],["tag",{"_index":641,"title":{},"body":{"components/HeaderComponent.html":{}}}],["take",{"_index":359,"title":{},"body":{"components/GameComponent.html":{},"components/HeaderComponent.html":{}}}],["takes",{"_index":217,"title":{},"body":{"components/EndGameComponent.html":{}}}],["template",{"_index":5,"title":{},"body":{"components/AppComponent.html":{},"components/CaseComponent.html":{},"components/EndGameComponent.html":{},"components/GameComponent.html":{},"components/HeaderComponent.html":{},"components/HomepageComponent.html":{},"components/NotFoundComponent.html":{}}}],["templateurl",{"_index":18,"title":{},"body":{"components/AppComponent.html":{},"components/CaseComponent.html":{},"components/EndGameComponent.html":{},"components/GameComponent.html":{},"components/HeaderComponent.html":{},"components/HomepageComponent.html":{},"components/NotFoundComponent.html":{}}}],["termine",{"_index":386,"title":{},"body":{"components/GameComponent.html":{}}}],["test",{"_index":968,"title":{},"body":{"index.html":{}}}],["testing",{"_index":977,"title":{},"body":{"index.html":{}}}],["tests",{"_index":967,"title":{},"body":{"index.html":{}}}],["text",{"_index":229,"title":{},"body":{"components/EndGameComponent.html":{},"components/GameComponent.html":{},"components/HeaderComponent.html":{},"components/HomepageComponent.html":{},"components/NotFoundComponent.html":{}}}],["theme",{"_index":30,"title":{},"body":{"components/AppComponent.html":{},"components/HeaderComponent.html":{},"injectables/ThemeState.html":{},"classes/ThemeStateModel.html":{}}}],["theme.actions",{"_index":844,"title":{},"body":{"injectables/ThemeState.html":{},"classes/ThemeStateModel.html":{}}}],["themestate",{"_index":39,"title":{"injectables/ThemeState.html":{}},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/HeaderComponent.html":{},"injectables/ThemeState.html":{},"classes/ThemeStateModel.html":{},"coverage.html":{}}}],["themestatemodel",{"_index":837,"title":{"classes/ThemeStateModel.html":{}},"body":{"injectables/ThemeState.html":{},"classes/ThemeStateModel.html":{},"coverage.html":{}}}],["theming",{"_index":643,"title":{},"body":{"components/HeaderComponent.html":{}}}],["there's",{"_index":542,"title":{},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{}}}],["this._snack.open(error.message",{"_index":396,"title":{},"body":{"components/GameComponent.html":{}}}],["this.animatefallingpawn(playedpawn.x",{"_index":381,"title":{},"body":{"components/GameComponent.html":{}}}],["this.applydarktheme",{"_index":649,"title":{},"body":{"components/HeaderComponent.html":{}}}],["this.checkvictory(playedpawn",{"_index":383,"title":{},"body":{"components/GameComponent.html":{}}}],["this.dark.pipe(take(1)).subscribe(isdark",{"_index":650,"title":{},"body":{"components/HeaderComponent.html":{}}}],["this.dialog.open(endgamecomponent",{"_index":429,"title":{},"body":{"components/GameComponent.html":{}}}],["this.game.pipe(take(1)).subscribe(g",{"_index":372,"title":{},"body":{"components/GameComponent.html":{}}}],["this.getypositionincolumn(column",{"_index":378,"title":{},"body":{"components/GameComponent.html":{}}}],["this.gridx",{"_index":373,"title":{},"body":{"components/GameComponent.html":{}}}],["this.gridy",{"_index":375,"title":{},"body":{"components/GameComponent.html":{}}}],["this.gridy.length",{"_index":449,"title":{},"body":{"components/GameComponent.html":{}}}],["this.initgame",{"_index":371,"title":{},"body":{"components/GameComponent.html":{}}}],["this.openendgamedialog(store.game.game.winner",{"_index":394,"title":{},"body":{"components/GameComponent.html":{}}}],["this.resetgame",{"_index":439,"title":{},"body":{"components/GameComponent.html":{}}}],["this.router.navigate(['game",{"_index":684,"title":{},"body":{"components/HomepageComponent.html":{}}}],["this.router.navigate(['home",{"_index":436,"title":{},"body":{"components/GameComponent.html":{}}}],["this.store.dispatch(new",{"_index":377,"title":{},"body":{"components/GameComponent.html":{},"components/HeaderComponent.html":{},"components/HomepageComponent.html":{}}}],["throw",{"_index":600,"title":{},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{}}}],["thumb",{"_index":705,"title":{},"body":{"components/HomepageComponent.html":{}}}],["title",{"_index":256,"title":{},"body":{"components/EndGameComponent.html":{},"components/HomepageComponent.html":{}}}],["toggle",{"_index":748,"title":{},"body":{"modules/MaterialModule.html":{}}}],["toogle",{"_index":645,"title":{},"body":{"components/HeaderComponent.html":{}}}],["toogletheme",{"_index":637,"title":{},"body":{"components/HeaderComponent.html":{},"injectables/ThemeState.html":{},"classes/ThemeStateModel.html":{}}}],["toogletheme(undefined",{"_index":841,"title":{},"body":{"injectables/ThemeState.html":{}}}],["toogletheme({getstate",{"_index":846,"title":{},"body":{"injectables/ThemeState.html":{},"classes/ThemeStateModel.html":{}}}],["top",{"_index":490,"title":{},"body":{"components/GameComponent.html":{},"components/HeaderComponent.html":{},"components/HomepageComponent.html":{},"components/NotFoundComponent.html":{}}}],["tous",{"_index":900,"title":{},"body":{"injectables/VictoryCheckService.html":{}}}],["train",{"_index":661,"title":{},"body":{"components/HeaderComponent.html":{},"components/HomepageComponent.html":{}}}],["transform",{"_index":493,"title":{},"body":{"components/GameComponent.html":{},"components/HomepageComponent.html":{}}}],["transition",{"_index":496,"title":{},"body":{"components/GameComponent.html":{}}}],["translatex",{"_index":494,"title":{},"body":{"components/GameComponent.html":{}}}],["tree",{"_index":8,"title":{},"body":{"components/AppComponent.html":{},"components/CaseComponent.html":{},"components/EndGameComponent.html":{},"components/GameComponent.html":{},"components/HeaderComponent.html":{},"components/HomepageComponent.html":{},"components/NotFoundComponent.html":{}}}],["true",{"_index":432,"title":{},"body":{"components/GameComponent.html":{},"interfaces/Pawn.html":{},"injectables/ThemeState.html":{},"classes/ThemeStateModel.html":{},"injectables/VictoryCheckService.html":{}}}],["truncatedpawns",{"_index":597,"title":{},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{}}}],["tslib",{"_index":933,"title":{},"body":{"dependencies.html":{}}}],["turn",{"_index":267,"title":{},"body":{"interfaces/Game.html":{},"components/GameComponent.html":{},"injectables/GameState.html":{},"classes/GameStateModel.html":{}}}],["two",{"_index":274,"title":{},"body":{"interfaces/Game.html":{},"components/GameComponent.html":{},"injectables/GameState.html":{},"classes/GameStateModel.html":{}}}],["type",{"_index":23,"title":{},"body":{"components/AppComponent.html":{},"components/CaseComponent.html":{},"components/EndGameComponent.html":{},"interfaces/Game.html":{},"components/GameComponent.html":{},"injectables/GameState.html":{},"classes/GameStateModel.html":{},"components/HeaderComponent.html":{},"components/HomepageComponent.html":{},"interfaces/Pawn.html":{},"interfaces/Player.html":{},"injectables/ThemeState.html":{},"classes/ThemeStateModel.html":{},"injectables/VictoryCheckService.html":{},"coverage.html":{}}}],["un",{"_index":390,"title":{},"body":{"components/GameComponent.html":{}}}],["undefined",{"_index":534,"title":{},"body":{"injectables/GameState.html":{}}}],["undo",{"_index":454,"title":{},"body":{"components/GameComponent.html":{}}}],["une",{"_index":617,"title":{},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{}}}],["unit",{"_index":966,"title":{},"body":{"index.html":{}}}],["up",{"_index":299,"title":{},"body":{"components/GameComponent.html":{},"injectables/VictoryCheckService.html":{}}}],["update",{"_index":541,"title":{},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{}}}],["url(\"/assets/img/empty",{"_index":180,"title":{},"body":{"components/CaseComponent.html":{}}}],["url(\"/assets/img/red",{"_index":198,"title":{},"body":{"components/CaseComponent.html":{}}}],["url(\"/assets/img/yellow",{"_index":200,"title":{},"body":{"components/CaseComponent.html":{}}}],["use",{"_index":958,"title":{},"body":{"index.html":{}}}],["used",{"_index":833,"title":{},"body":{"interfaces/Player.html":{}}}],["uses",{"_index":537,"title":{},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{}}}],["value",{"_index":224,"title":{},"body":{"components/EndGameComponent.html":{},"components/GameComponent.html":{},"injectables/GameState.html":{},"classes/GameStateModel.html":{},"classes/ThemeStateModel.html":{}}}],["var",{"_index":53,"title":{},"body":{"components/AppComponent.html":{},"components/CaseComponent.html":{},"components/EndGameComponent.html":{},"components/GameComponent.html":{},"components/HeaderComponent.html":{},"components/HomepageComponent.html":{},"components/NotFoundComponent.html":{}}}],["version",{"_index":944,"title":{},"body":{"index.html":{}}}],["vertical",{"_index":330,"title":{},"body":{"components/GameComponent.html":{}}}],["verticalcheck",{"_index":854,"title":{},"body":{"injectables/VictoryCheckService.html":{}}}],["verticalcheck(game",{"_index":864,"title":{},"body":{"injectables/VictoryCheckService.html":{}}}],["verticale",{"_index":619,"title":{},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{}}}],["verticalement",{"_index":891,"title":{},"body":{"injectables/VictoryCheckService.html":{}}}],["vertically",{"_index":866,"title":{},"body":{"injectables/VictoryCheckService.html":{}}}],["via",{"_index":970,"title":{},"body":{"index.html":{}}}],["victoire",{"_index":225,"title":{},"body":{"components/EndGameComponent.html":{}}}],["victory",{"_index":317,"title":{},"body":{"components/GameComponent.html":{},"injectables/GameState.html":{},"classes/GameStateModel.html":{}}}],["victorycheckservice",{"_index":568,"title":{"injectables/VictoryCheckService.html":{}},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{},"injectables/VictoryCheckService.html":{},"coverage.html":{}}}],["victoryservice",{"_index":522,"title":{},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{}}}],["void",{"_index":305,"title":{},"body":{"components/GameComponent.html":{},"injectables/GameState.html":{},"components/HeaderComponent.html":{},"components/HomepageComponent.html":{},"injectables/ThemeState.html":{}}}],["vérif",{"_index":384,"title":{},"body":{"components/GameComponent.html":{}}}],["weight",{"_index":818,"title":{},"body":{"components/NotFoundComponent.html":{}}}],["whichever",{"_index":128,"title":{},"body":{"modules/AppModule.html":{}}}],["wich",{"_index":326,"title":{},"body":{"components/GameComponent.html":{}}}],["width",{"_index":175,"title":{},"body":{"components/CaseComponent.html":{},"components/EndGameComponent.html":{},"components/GameComponent.html":{},"components/HomepageComponent.html":{},"components/NotFoundComponent.html":{}}}],["win",{"_index":221,"title":{},"body":{"components/EndGameComponent.html":{},"interfaces/Game.html":{}}}],["win__image",{"_index":249,"title":{},"body":{"components/EndGameComponent.html":{}}}],["winner",{"_index":211,"title":{},"body":{"components/EndGameComponent.html":{},"interfaces/Game.html":{},"components/GameComponent.html":{},"injectables/GameState.html":{},"classes/GameStateModel.html":{}}}],["winning",{"_index":827,"title":{},"body":{"interfaces/Pawn.html":{}}}],["wins",{"_index":231,"title":{},"body":{"components/EndGameComponent.html":{}}}],["won",{"_index":337,"title":{},"body":{"components/GameComponent.html":{},"injectables/VictoryCheckService.html":{}}}],["worker",{"_index":102,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["worker.js",{"_index":119,"title":{},"body":{"modules/AppModule.html":{}}}],["x",{"_index":325,"title":{},"body":{"components/GameComponent.html":{},"interfaces/Pawn.html":{}}}],["y",{"_index":320,"title":{},"body":{"components/GameComponent.html":{},"interfaces/Pawn.html":{}}}],["yellow",{"_index":199,"title":{},"body":{"components/CaseComponent.html":{},"components/EndGameComponent.html":{},"components/GameComponent.html":{}}}],["yellowwins",{"_index":212,"title":{},"body":{"components/EndGameComponent.html":{}}}],["yes",{"_index":336,"title":{},"body":{"components/GameComponent.html":{}}}],["z",{"_index":176,"title":{},"body":{"components/CaseComponent.html":{},"components/GameComponent.html":{}}}],["zone.js",{"_index":935,"title":{},"body":{"dependencies.html":{}}}],["zoom",{"_index":84,"title":{},"body":{"modules/AppModule.html":{},"modules/GameModule.html":{},"modules/HomepageModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"components/AppComponent.html":{"url":"components/AppComponent.html","title":"component - AppComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  AppComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/app.component.ts\n\n\n\n    \n        Description\n    \n    \n        App component\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-root\n            \n\n            \n                styleUrls\n                ./app.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./app.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                isDarkTheme\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        isDarkTheme\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Select(ThemeState.getTheme)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app/app.component.ts:18\n                        \n                    \n\n            \n                \n                    Get theme from the store, gets applied in the template\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import { Component } from '@angular/core';\nimport { Select } from '@ngxs/store';\nimport { Observable } from 'rxjs';\nimport { ThemeState } from './store/theme/theme.state';\n\n/**\n * App component\n */\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  /**\n   * Get theme from the store, gets applied in the template\n   */\n  @Select(ThemeState.getTheme) isDarkTheme!: Observable;\n}\n\n    \n\n    \n        \n  \n  \n\n  \n  \n    \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n\n\n    \n\n    \n                \n                    ./app.component.scss\n                \n                .app{\n    min-height: 100%;\n\n    &__container{\n        height: calc(100vh - 84px);\n    }\n}\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CaseComponent', 'selector': 'app-case'},{'name': 'EndGameComponent', 'selector': 'app-end-game'},{'name': 'GameComponent', 'selector': 'app-game'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'HomepageComponent', 'selector': 'app-homepage'},{'name': 'NotFoundComponent', 'selector': 'app-not-found'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'AppComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_bootstrap\n\n\n\ncluster_AppModule_declarations\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAppComponent\n\nAppComponent\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAppComponent->AppModule\n\n\n\n\n\nHeaderComponent\n\nHeaderComponent\n\nAppModule -->\n\nHeaderComponent->AppModule\n\n\n\n\n\nNotFoundComponent\n\nNotFoundComponent\n\nAppModule -->\n\nNotFoundComponent->AppModule\n\n\n\n\n\nAppComponent \n\nAppComponent \n\nAppComponent  -->\n\nAppModule->AppComponent \n\n\n\n\n\nAppRoutingModule\n\nAppRoutingModule\n\nAppModule -->\n\nAppRoutingModule->AppModule\n\n\n\n\n\nMaterialModule\n\nMaterialModule\n\nAppModule -->\n\nMaterialModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            AppComponent\n                        \n                        \n                            HeaderComponent\n                        \n                        \n                            NotFoundComponent\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AppRoutingModule\n                        \n                        \n                            MaterialModule\n                        \n                    \n                \n                \n                    Bootstrap\n                    \n                        \n                            AppComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { MaterialModule } from './material/material.module';\nimport { ServiceWorkerModule } from '@angular/service-worker';\nimport { environment } from '../environments/environment';\nimport { HeaderComponent } from './layout/header/header.component';\nimport { NgxsModule } from '@ngxs/store';\nimport { NgxsStoragePluginModule } from '@ngxs/storage-plugin';\nimport { ngxsConfig } from './ngxs.config';\nimport { ThemeState } from './store/theme/theme.state';\nimport { GameState } from './store/game/game.state';\nimport { NotFoundComponent } from './not-found/not-found.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    HeaderComponent,\n    NotFoundComponent\n  ],\n  imports: [\n    NgxsModule.forRoot([ThemeState, GameState], ngxsConfig),\n    NgxsStoragePluginModule.forRoot(),\n    BrowserModule,\n    AppRoutingModule,\n    BrowserAnimationsModule,\n    MaterialModule,\n    ServiceWorkerModule.register('ngsw-worker.js', {\n      enabled: environment.production,\n      // Register the ServiceWorker as soon as the app is stable\n      // or after 30 seconds (whichever comes first).\n      registrationStrategy: 'registerWhenStable:30000'\n    })\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppRoutingModule.html":{"url":"modules/AppRoutingModule.html","title":"module - AppRoutingModule","body":"\n                   \n\n\n\n\n    Modules\n    AppRoutingModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/app-routing.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { NotFoundComponent } from './not-found/not-found.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    redirectTo: '/home',\n    pathMatch: 'full'\n  },\n  {\n    path: 'home',\n    loadChildren: () => \"import('./homepage/homepage.module').then(m => m.HomepageModule)\"\n  },\n  {\n    path: 'game',\n    loadChildren: () => \"import('./game/game.module').then(m => m.GameModule)\"\n  },\n  {\n    path: '404', \n    component: NotFoundComponent\n  },\n  {\n    path: '**', \n    redirectTo: '/404'\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/CaseComponent.html":{"url":"components/CaseComponent.html","title":"component - CaseComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  CaseComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/game/case/case.component.ts\n\n\n\n    \n        Description\n    \n    \n        Case component, all the cells that composes the game grid\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n            \n                changeDetection\n                ChangeDetectionStrategy.OnPush\n            \n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-case\n            \n\n            \n                styleUrls\n                ./case.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./case.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                pawn\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        pawn\n                    \n                \n                \n                    \n                        Type :         Pawn\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/game/case/case.component.ts:18\n                            \n                        \n                \n                    \n                        Pawn to set in the cell\n\n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n        import { Component, Input, ChangeDetectionStrategy } from '@angular/core';\nimport { Pawn } from 'src/app/models/pawn';\n\n/**\n * Case component, all the cells that composes the game grid\n */\n@Component({\n  selector: 'app-case',\n  templateUrl: './case.component.html',\n  styleUrls: ['./case.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class CaseComponent {\n  /**\n   * Pawn to set in the cell\n   * @type {Pawn}\n   */\n  @Input('pawn') pawn!: Pawn;\n\n}\n\n    \n\n    \n        \n\n\n\n\n    \n\n    \n                \n                    ./case.component.scss\n                \n                :host{\n    position: relative;\n}\n\n.case{\n    width: 100%;\n    height: 100%;\n    position: relative;\n    z-index: 100;\n    opacity: 1;\n    background: url(\"/assets/img/empty-case.png\");\n    background-size: contain;\n    outline: 1px solid #2867b2;\n    box-shadow: 2px 2px 2px #2867b2, -2px -2px 2px #2867b2, 2px -2px 2px #2867b2, -2px 2px 2px #2867b2;\n\n    &:before{\n        content: \"\";\n        padding-bottom: 100%;\n        display: block;\n        outline: 1px solid #2867b2;\n    }\n\n    &--pawn-red{\n        background: url(\"/assets/img/red-case.png\");\n        background-size: contain;\n    }\n\n    &--pawn-yellow{\n        background: url(\"/assets/img/yellow-case.png\");\n        background-size: contain;\n    }\n}\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CaseComponent', 'selector': 'app-case'},{'name': 'EndGameComponent', 'selector': 'app-end-game'},{'name': 'GameComponent', 'selector': 'app-game'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'HomepageComponent', 'selector': 'app-homepage'},{'name': 'NotFoundComponent', 'selector': 'app-not-found'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'CaseComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/EndGameComponent.html":{"url":"components/EndGameComponent.html","title":"component - EndGameComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  EndGameComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/game/dialogs/end-game/end-game.component.ts\n\n\n\n    \n        Description\n    \n    \n        Dialog component, shown when the game ends\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n            \n                changeDetection\n                ChangeDetectionStrategy.OnPush\n            \n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-end-game\n            \n\n            \n                styleUrls\n                ./end-game.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./end-game.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                redWins\n                            \n                            \n                                    Public\n                                winner\n                            \n                            \n                                    Public\n                                yellowWins\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(winner: Player)\n                    \n                \n                        \n                            \n                                Defined in src/app/game/dialogs/end-game/end-game.component.ts:23\n                            \n                        \n\n                \n                    \n                            Constructor takes winner in parameter\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        winner\n                                                  \n                                                        \n                                                                        Player\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                the player that did win the game (from the store)\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        redWins\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"Victoire des rouges !\"\n                    \n                \n                    \n                        \n                                Defined in src/app/game/dialogs/end-game/end-game.component.ts:19\n                        \n                    \n\n            \n                \n                    Text to show when red wins\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        winner\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Player\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Inject(MAT_DIALOG_DATA)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app/game/dialogs/end-game/end-game.component.ts:29\n                        \n                    \n\n            \n                \n                    the player that did win the game (from the store)\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        yellowWins\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"Victoire des jaunes !\"\n                    \n                \n                    \n                        \n                                Defined in src/app/game/dialogs/end-game/end-game.component.ts:23\n                        \n                    \n\n            \n                \n                    Text to show when yellow wins\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import { ChangeDetectionStrategy, Component, Inject } from '@angular/core';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { Player } from 'src/app/models/player';\n\n/**\n * Dialog component, shown when the game ends\n */\n@Component({\n  selector: 'app-end-game',\n  templateUrl: './end-game.component.html',\n  styleUrls: ['./end-game.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class EndGameComponent{\n\n  /**\n   * Text to show when red wins\n   */\n  public redWins: string = \"Victoire des rouges !\";\n  /**\n   * Text to show when yellow wins\n   */\n  public yellowWins: string = \"Victoire des jaunes !\";\n\n  /**\n   * Constructor takes winner in parameter\n   * @param {Player} winner the player that did win the game (from the store) \n   */\n  constructor(@Inject(MAT_DIALOG_DATA) public winner: Player) {}\n\n}\n\n    \n\n    \n        \n     Victoire des Rouges !\n     Victoire des Jaunes !\n\nMatch nul !La grille est pleine...\n\n    \n        \n        \n    \n    \n\n\n  Quitter\n  Rejouer\n\n\n    \n\n    \n                \n                    ./end-game.component.scss\n                \n                .win__image{\n    width: 80%;\n}\n\n.mat-dialog-content{\n    overflow: hidden;\n    text-align: center;\n}\n\n.mat-dialog-title{\n    text-align: center;\n}\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '     Victoire des Rouges !     Victoire des Jaunes !Match nul !La grille est pleine...                              Quitter  Rejouer'\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CaseComponent', 'selector': 'app-case'},{'name': 'EndGameComponent', 'selector': 'app-end-game'},{'name': 'GameComponent', 'selector': 'app-game'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'HomepageComponent', 'selector': 'app-homepage'},{'name': 'NotFoundComponent', 'selector': 'app-not-found'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'EndGameComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Game.html":{"url":"interfaces/Game.html","title":"interface - Game","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Game\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/models/game.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents the game state\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            columns\n                                        \n                                \n                                \n                                        \n                                            pawns\n                                        \n                                \n                                \n                                        \n                                            player1\n                                        \n                                \n                                \n                                        \n                                            player2\n                                        \n                                \n                                \n                                        \n                                            rows\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            turn\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            winner\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        columns\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        columns:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    number of columns of the grid, to be selected on the homepage\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        pawns\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        pawns:         Pawn[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Pawn[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Pawns that have been played since the game began\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        player1\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        player1:         Player\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Player\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    player one\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        player2\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        player2:         Player\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Player\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    player two\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        rows\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        rows:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    number of rows of the grid, to be selected on the homepage\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        turn\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        turn:         Player\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Player\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    player that have to play now\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        winner\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        winner:         Player\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Player\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    player that did win the game\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Pawn } from \"./pawn\";\nimport { Player } from \"./player\";\n\n/**\n * Represents the game state\n */\nexport interface Game {\n    /**\n     * player one\n     */\n    player1: Player;\n\n    /**\n     * player two\n     */\n    player2: Player;\n\n    /**\n     * player that have to play now\n     */\n    turn?: Player;\n\n    /**\n     * player that did win the game\n     */\n    winner?: Player;\n\n    /**\n     * number of rows of the grid, to be selected on the homepage\n     */\n    rows: number;\n\n    /**\n     * number of columns of the grid, to be selected on the homepage\n     */\n    columns: number;\n\n    /**\n     * Pawns that have been played since the game began\n     */\n    pawns: Pawn[];\n}\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/GameComponent.html":{"url":"components/GameComponent.html","title":"component - GameComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  GameComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/game/game.component.ts\n\n\n\n    \n        Description\n    \n    \n        Game component\n\n    \n\n\n    \n        Implements\n    \n    \n                    OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-game\n            \n\n            \n                styleUrls\n                ./game.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./game.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                game\n                            \n                            \n                                    Public\n                                gridX\n                            \n                            \n                                    Public\n                                gridY\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                animateFallingPawn\n                            \n                            \n                                cancelLastMove\n                            \n                            \n                                    Private\n                                checkVictory\n                            \n                            \n                                    Public\n                                displayPawn\n                            \n                            \n                                    Private\n                                getYPositionInColumn\n                            \n                            \n                                    Private\n                                initGame\n                            \n                            \n                                    Public\n                                openEndGameDialog\n                            \n                            \n                                    Public\n                                playPawn\n                            \n                            \n                                resetGame\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        animateFallingPawn\n                        \n                    \n                \n            \n            \n                \nanimateFallingPawn(column: number, row: number, player: Player)\n                \n            \n\n\n            \n                \n                    Defined in src/app/game/game.component.ts:190\n                \n            \n\n\n            \n                \n                    Animate a falling pawn in the column played, falling up to the row where the pawn will fall\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    column\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        column played\n\n                                    \n                                \n                                \n                                    row\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        row where the animation ends\n\n                                    \n                                \n                                \n                                    player\n                                    \n                                                Player\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        player that played to determine the color of the pawn to animate\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        cancelLastMove\n                        \n                    \n                \n            \n            \n                \ncancelLastMove()\n                \n            \n\n\n            \n                \n                    Defined in src/app/game/game.component.ts:80\n                \n            \n\n\n            \n                \n                    Dispatch CancelLastMove Action from the store, remove last pawn played and sets turn to the last player\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        checkVictory\n                        \n                    \n                \n            \n            \n                \n                    \n                    checkVictory(playedPawn: Pawn)\n                \n            \n\n\n            \n                \n                    Defined in src/app/game/game.component.ts:151\n                \n            \n\n\n            \n                \n                    Dispatch CheckWinner Action from the store, checks if played pawn causes a victory\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    playedPawn\n                                    \n                                                Pawn\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        pawn that was just played\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        displayPawn\n                        \n                    \n                \n            \n            \n                \n                    \n                    displayPawn(x: number, y: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/game/game.component.ts:133\n                \n            \n\n\n            \n                \n                    Get a Pawn if present on given coordinates\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    x\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        column in wich the pawns will be put\n\n                                    \n                                \n                                \n                                    y\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        row in wich the pawns will be put\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Pawn\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        getYPositionInColumn\n                        \n                    \n                \n            \n            \n                \n                    \n                    getYPositionInColumn(column: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/game/game.component.ts:117\n                \n            \n\n\n            \n                \n                    Get the number of pawns in a column to set the vertical position of the next pawn that will be played in that column\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    column\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        column in wich the pawns will be put\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        initGame\n                        \n                    \n                \n            \n            \n                \n                    \n                    initGame()\n                \n            \n\n\n            \n                \n                    Defined in src/app/game/game.component.ts:63\n                \n            \n\n\n            \n                \n                    Get rows and columns to set from the store\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        openEndGameDialog\n                        \n                    \n                \n            \n            \n                \n                    \n                    openEndGameDialog(winner?: Player)\n                \n            \n\n\n            \n                \n                    Defined in src/app/game/game.component.ts:163\n                \n            \n\n\n            \n                \n                    Shows the end game dialog\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    winner\n                                    \n                                                Player\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        player that played that last pawn and won\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        playPawn\n                        \n                    \n                \n            \n            \n                \n                    \n                    playPawn(column: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/game/game.component.ts:88\n                \n            \n\n\n            \n                \n                    Play a pawn if the column played isn't full (shows a snackbar if so), end games if the grid is full or if the player won\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    column\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        column in wich the pawns will be put\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        resetGame\n                        \n                    \n                \n            \n            \n                \nresetGame()\n                \n            \n\n\n            \n                \n                    Defined in src/app/game/game.component.ts:73\n                \n            \n\n\n            \n                \n                    Dispatch GameReset Action from the store, fresh start (removes all the pawns and set turn to player one)\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        game\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Observable\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Select(GameState.getGame)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app/game/game.component.ts:29\n                        \n                    \n\n            \n                \n                    Game State from the store\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        gridX\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Array\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/game/game.component.ts:35\n                        \n                    \n\n            \n                \n                    Number of columns, doesn't get any actual pawn in it\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        gridY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Array\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/game/game.component.ts:41\n                        \n                    \n\n            \n                \n                    Number of rows, doesn't get any actual pawn in it\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import { Component, OnInit } from '@angular/core';\nimport { Select, Store } from '@ngxs/store';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { MatDialog } from '@angular/material/dialog';\nimport { Observable } from 'rxjs';\nimport { take } from 'rxjs/operators';\nimport { Game } from '../models/game';\nimport { Pawn } from '../models/pawn';\nimport { CheckWinner, GameReset, PlayPawn, CancelLastMove } from '../store/game/game.actions';\nimport { GameState } from '../store/game/game.state';\nimport { EndGameComponent } from './dialogs/end-game/end-game.component';\nimport { Router } from '@angular/router';\nimport { Player } from '../models/player';\n\n/**\n * Game component\n */\n@Component({\n  selector: 'app-game',\n  templateUrl: './game.component.html',\n  styleUrls: ['./game.component.scss']\n})\nexport class GameComponent implements OnInit {\n\n  /**\n   * Game State from the store\n   * @type {Observable}\n   */\n  @Select(GameState.getGame) game!: Observable;\n\n  /**\n   * Number of columns, doesn't get any actual pawn in it\n   * @type {Array}\n   */\n  public gridX: Array = [];\n\n  /**\n   * Number of rows, doesn't get any actual pawn in it\n   * @type {Array}\n   */\n  public gridY: Array = [];\n\n  /**\n   * @ignore\n   */\n  constructor(\n    private store: Store,\n    private _snack: MatSnackBar,\n    private dialog: MatDialog,\n    private router: Router\n    ) { }\n\n    /**\n   * @ignore\n   */\n  ngOnInit(): void {\n    this.initGame();\n  }\n\n  /**\n   * Get rows and columns to set from the store\n   */\n  private initGame(){\n    this.game.pipe(take(1)).subscribe(g => {\n      this.gridX = Array(g!.columns);\n      this.gridY = Array(g!.rows);\n    });\n  }\n\n  /**\n   * Dispatch GameReset Action from the store, fresh start (removes all the pawns and set turn to player one)\n   */\n  resetGame(){\n    this.store.dispatch(new GameReset());\n  }\n\n  /**\n   * Dispatch CancelLastMove Action from the store, remove last pawn played and sets turn to the last player\n   */\n  cancelLastMove(){\n    this.store.dispatch(new CancelLastMove());\n  }\n\n  /**\n   * Play a pawn if the column played isn't full (shows a snackbar if so), end games if the grid is full or if the player won\n   * @param {number} column column in wich the pawns will be put\n   */\n  public playPawn(column: number){\n    this.game.pipe(take(1)).subscribe(g => {\n      const playedPawn: Pawn = {\n        x: column,\n        y: this.getYPositionInColumn(column),\n        player: g.turn!\n      }\n      this.store.dispatch(new PlayPawn( playedPawn )).subscribe(\n        (store) => {\n          this.animateFallingPawn(playedPawn.x, playedPawn.y, g.turn!);\n          this.checkVictory(playedPawn);\n\n          // Vérif : Si la grille est pleine, on termine le jeu sur un match nul\n          if(store.game.game.pawns?.length === store.game.game.rows * store.game.game.columns){\n            this.openEndGameDialog(store.game.game.winner);\n          }\n        },\n        error => {\n          this._snack.open(error.message, \"OK\");\n        }\n      );\n    })\n  }\n\n  /**\n   * Get the number of pawns in a column to set the vertical position of the next pawn that will be played in that column\n   * @param {number} column column in wich the pawns will be put\n   * @return {number}\n   */\n  private getYPositionInColumn(column: number): number{\n    let pawnsInColumn: number = 0;\n    this.game.pipe(take(1)).subscribe(g => {\n      // On récupère le nombre de pions dans la colonne passée en param\n      pawnsInColumn = g.pawns.filter(p => p.x === column).length;\n    });\n    // on retourne la position en Y à occuper par le pion\n    return pawnsInColumn;\n  }\n\n  /**\n   * Get a Pawn if present on given coordinates\n   * @param {number} x column in wich the pawns will be put\n   * @param {number} y row in wich the pawns will be put\n   * @return {Pawn}\n   */\n  public displayPawn(x: number, y: number): Pawn{\n    let pawnToDisplay!: Pawn;\n    \n    this.game.pipe(take(1)).subscribe(g => {\n      // On check dans la liste de pions du store si on en a un aux coordonnées de la case passée en paramètres\n      g.pawns.map(p => {\n        if (p.x === x && p.y === y) {\n          pawnToDisplay = p;\n        }\n      });\n    });\n    return pawnToDisplay;\n  }\n\n  /**\n   * Dispatch CheckWinner Action from the store, checks if played pawn causes a victory\n   * @param {Pawn} playedPawn pawn that was just played\n   */\n  private checkVictory(playedPawn: Pawn){\n    this.store.dispatch(new CheckWinner(playedPawn)).subscribe(store => {\n      if(store.game.game.winner){\n        this.openEndGameDialog(store.game.game.winner);\n      }\n    });\n  }\n\n  /**\n   * Shows the end game dialog\n   * @param {Player} winner player that played that last pawn and won\n   */\n  public openEndGameDialog(winner?: Player) {\n    const dialogRef = this.dialog.open(EndGameComponent, {\n      data: winner,\n      disableClose: true\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      switch (result) {\n        case 'quit':\n          this.router.navigate(['home']);\n          break;\n        case 'replay':\n          this.resetGame()\n          break;\n      \n        default:\n          break;\n      }\n    });\n  }\n\n  /**\n   * Animate a falling pawn in the column played, falling up to the row where the pawn will fall\n   * @param {number} column column played\n   * @param {number} row row where the animation ends\n   * @param {Player} player player that played to determine the color of the pawn to animate\n   */\n  animateFallingPawn(column: number, row: number, player: Player){\n    const pawnColor = player.id === 0 ? \"red\" : \"yellow\";\n    let pawnToAnimate: HTMLElement = document.getElementsByClassName(`falling-${pawnColor}-${column}`)[0] as HTMLElement;\n    pawnToAnimate.classList.add(\"show\");\n    setTimeout(() => {\n      pawnToAnimate.style.top = `${((this.gridY.length - 1 - row) * 100)}%`;\n    }, 10);\n    setTimeout(() => {\n      pawnToAnimate.classList.remove(\"show\");\n      pawnToAnimate.style.top = \"0%\";\n    }, 140);\n    \n  }\n\n}\n\n    \n\n    \n        \n    {{ (game | async)!.turn!.name }} -->\n    \n        \n            \n                \n                    \n                    \n                \n            \n        \n    \n    \n        \n        \n            \n                undo\n            \n        \n        \n            \n                sync\n            \n        \n        \n    \n\n\n    \n\n    \n                \n                    ./game.component.scss\n                \n                .game{\n    max-width: 88vh;\n    margin: auto;\n\n    &__grid-container{\n        margin: 20px;\n        display: grid;\n        grid-template-columns: repeat(7, 1fr);\n        border: 12px solid #2867b2;\n        border-radius: 23px;\n\n        &--5{\n            grid-template-columns: repeat(5, 1fr);\n        }\n        &--7{\n            grid-template-columns: repeat(7, 1fr);\n        }\n        &--9{\n            grid-template-columns: repeat(9, 1fr);\n        }\n        &--11{\n            grid-template-columns: repeat(11, 1fr);\n        }\n        &--13{\n            grid-template-columns: repeat(13, 1fr);\n        }\n        &--15{\n            grid-template-columns: repeat(15, 1fr);\n        }\n    }\n}\n\n.game--fullscreen{\n    max-width: 100%;\n    margin: auto;\n}\n\n.game--almost-fullscreen{\n    max-width: 88vh;\n    margin: auto;\n}\n\n.game__players--player-two{\n    text-align: right;\n}\n\n.game__action{\n    text-align: center;\n}\n\n.game__actions{\n    margin: 20px 0px;\n    padding-bottom: 30px;\n}\n\n.case__animated{\n    width: 90%;\n    height: 90%;\n    position: absolute;\n    top: 0;\n    border-radius: 50px;\n    z-index: 50;\n    transform: translateX(-50%);\n    left: 50%;\n    opacity: 1;\n    transition: top .15s;\n    display: none;\n\n    &.show{\n        display: block;\n    }\n\n    &--red{\n        background: #f4433b;\n        box-shadow: inset 10px 10px 10px #72211d, inset -10px -10px 10px #72211d;\n    }\n\n    &--yellow{\n        background: #f4e43b;\n        box-shadow: inset 10px 10px 10px #6b641a, inset -10px -10px 10px #6b641a;\n    }\n}\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '    {{ (game | async)!.turn!.name }} -->                                                                                                                                                                        undo                                                        sync                                '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CaseComponent', 'selector': 'app-case'},{'name': 'EndGameComponent', 'selector': 'app-end-game'},{'name': 'GameComponent', 'selector': 'app-game'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'HomepageComponent', 'selector': 'app-homepage'},{'name': 'NotFoundComponent', 'selector': 'app-not-found'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'GameComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/GameModule.html":{"url":"modules/GameModule.html","title":"module - GameModule","body":"\n                   \n\n\n\n\n    Modules\n    GameModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_GameModule\n\n\n\ncluster_GameModule_declarations\n\n\n\ncluster_GameModule_imports\n\n\n\n\nCaseComponent\n\nCaseComponent\n\n\n\nGameModule\n\nGameModule\n\nGameModule -->\n\nCaseComponent->GameModule\n\n\n\n\n\nEndGameComponent\n\nEndGameComponent\n\nGameModule -->\n\nEndGameComponent->GameModule\n\n\n\n\n\nGameComponent\n\nGameComponent\n\nGameModule -->\n\nGameComponent->GameModule\n\n\n\n\n\nGameRoutingModule\n\nGameRoutingModule\n\nGameModule -->\n\nGameRoutingModule->GameModule\n\n\n\n\n\nMaterialModule\n\nMaterialModule\n\nGameModule -->\n\nMaterialModule->GameModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/game/game.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            CaseComponent\n                        \n                        \n                            EndGameComponent\n                        \n                        \n                            GameComponent\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            GameRoutingModule\n                        \n                        \n                            MaterialModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { GameRoutingModule } from './game-routing.module';\nimport { GameComponent } from './game.component';\nimport { MaterialModule } from '../material/material.module';\nimport { CaseComponent } from './case/case.component';\nimport { EndGameComponent } from './dialogs/end-game/end-game.component';\nimport { FlexLayoutModule } from '@angular/flex-layout';\n\n\n@NgModule({\n  declarations: [\n    GameComponent,\n    CaseComponent,\n    EndGameComponent\n  ],\n  imports: [\n    CommonModule,\n    GameRoutingModule,\n    MaterialModule,\n    FlexLayoutModule\n  ]\n})\nexport class GameModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/GameRoutingModule.html":{"url":"modules/GameRoutingModule.html","title":"module - GameRoutingModule","body":"\n                   \n\n\n\n\n    Modules\n    GameRoutingModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/game/game-routing.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { GameComponent } from './game.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: GameComponent\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class GameRoutingModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GameState.html":{"url":"injectables/GameState.html","title":"injectable - GameState","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  GameState\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/store/game/game.state.ts\n        \n\n\n            \n                Description\n            \n            \n                Game State\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                victoryService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                cancelLastMove\n                            \n                            \n                                checkWinner\n                            \n                            \n                                    Static\n                                getColumns\n                            \n                            \n                                    Static\n                                getGame\n                            \n                            \n                                    Static\n                                getRows\n                            \n                            \n                                initGame\n                            \n                            \n                                playPawn\n                            \n                            \n                                resetGame\n                            \n                            \n                                setColumns\n                            \n                            \n                                setRows\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        cancelLastMove\n                        \n                    \n                \n            \n            \n                \ncancelLastMove(undefined: StateContext)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Action(CancelLastMove)\n                \n            \n\n            \n                \n                    Defined in src/app/store/game/game.state.ts:137\n                \n            \n\n\n            \n                \n                    Removes last played pawn if there is at least one pawn in the game\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                StateContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        checkWinner\n                        \n                    \n                \n            \n            \n                \ncheckWinner(undefined: StateContext, undefined: CheckWinner)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Action(CheckWinner)\n                \n            \n\n            \n                \n                    Defined in src/app/store/game/game.state.ts:177\n                \n            \n\n\n            \n                \n                    Uses Victory service to check if 4 pawns are aligned, update state if there's a winner\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                StateContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                            CheckWinner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        getColumns\n                        \n                    \n                \n            \n            \n                \n                    \n                    getColumns(state: GameStateModel)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Selector()\n                \n            \n\n            \n                \n                    Defined in src/app/store/game/game.state.ts:68\n                \n            \n\n\n            \n                \n                    Returns columns\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    state\n                                    \n                                                GameStateModel\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        getGame\n                        \n                    \n                \n            \n            \n                \n                    \n                    getGame(state: GameStateModel)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Selector()\n                \n            \n\n            \n                \n                    Defined in src/app/store/game/game.state.ts:52\n                \n            \n\n\n            \n                \n                    Returns game state\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    state\n                                    \n                                                GameStateModel\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        getRows\n                        \n                    \n                \n            \n            \n                \n                    \n                    getRows(state: GameStateModel)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Selector()\n                \n            \n\n            \n                \n                    Defined in src/app/store/game/game.state.ts:60\n                \n            \n\n\n            \n                \n                    Returns rows\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    state\n                                    \n                                                GameStateModel\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        initGame\n                        \n                    \n                \n            \n            \n                \ninitGame(undefined: StateContext, undefined: GameInit)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Action(GameInit)\n                \n            \n\n            \n                \n                    Defined in src/app/store/game/game.state.ts:76\n                \n            \n\n\n            \n                \n                    Initialize the game, set player turn to player one\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                StateContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                                GameInit\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        playPawn\n                        \n                    \n                \n            \n            \n                \nplayPawn(undefined: StateContext, undefined: PlayPawn)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Action(PlayPawn)\n                \n            \n\n            \n                \n                    Defined in src/app/store/game/game.state.ts:157\n                \n            \n\n\n            \n                \n                    Add a pawn to the state pawn array if column played isn't full\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                StateContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                                PlayPawn\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        resetGame\n                        \n                    \n                \n            \n            \n                \nresetGame(undefined: StateContext)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Action(GameReset)\n                \n            \n\n            \n                \n                    Defined in src/app/store/game/game.state.ts:122\n                \n            \n\n\n            \n                \n                    Reset the game, set player turn to red and reset the pawn array\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                StateContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setColumns\n                        \n                    \n                \n            \n            \n                \nsetColumns(undefined: StateContext, undefined: SetColumns)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Action(SetColumns)\n                \n            \n\n            \n                \n                    Defined in src/app/store/game/game.state.ts:106\n                \n            \n\n\n            \n                \n                    Sets selected columns in the game state\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                StateContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                            SetColumns\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setRows\n                        \n                    \n                \n            \n            \n                \nsetRows(undefined: StateContext, undefined: SetRows)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Action(SetRows)\n                \n            \n\n            \n                \n                    Defined in src/app/store/game/game.state.ts:90\n                \n            \n\n\n            \n                \n                    Sets selected rows in the game state\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                StateContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                            SetRows\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        victoryService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         VictoryCheckService\n\n                    \n                \n                \n                    \n                        Default value : new VictoryCheckService()\n                    \n                \n                    \n                        \n                                Defined in src/app/store/game/game.state.ts:46\n                        \n                    \n\n            \n                \n                    Victory Service, has all the methods to check if 4 pawns are aligned\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { State, Action, StateContext, Selector } from '@ngxs/store';\nimport { removeItem } from '@ngxs/store/operators';\nimport { Game } from 'src/app/models/game';\nimport { CheckWinner, GameInit, PlayPawn, GameReset, CancelLastMove, SetRows, SetColumns } from './game.actions';\nimport { VictoryCheckService } from '../services/victory-check.service';\nimport { Player } from 'src/app/models/player';\n\n/**\n * Game State Model\n */\nexport class GameStateModel {\n    /**\n     * Game state, contains the two players, the columns and rows number and an array of the pawns played\n     */\n    game: Game = {\n        player1: {id: 0, name: \"Joueur 1\"},\n        player2: {id: 1, name: \"Joueur 2\"},\n        rows: 6,\n        columns: 7,\n        pawns: []\n    };\n}\n\n/**\n * Game State\n */\n@State({\n    name: 'game',\n    defaults: {\n        game: {\n            player1: {id: 0, name: \"Joueur 1\"},\n            player2: {id: 1, name: \"Joueur 2\"},\n            rows: 6,\n            columns: 7,\n            pawns: []\n        }\n    }\n})\n@Injectable()\nexport class GameState {\n\n    /**\n     * Victory Service, has all the methods to check if 4 pawns are aligned\n     */\n    private victoryService: VictoryCheckService = new VictoryCheckService();\n\n    /**\n     * Returns game state\n     */\n    @Selector()\n    static getGame(state: GameStateModel) {\n        return state.game;\n    }\n\n    /**\n     * Returns rows\n     */\n    @Selector()\n    static getRows(state: GameStateModel) {\n        return state.game.rows;\n    }\n\n    /**\n     * Returns columns\n     */\n    @Selector()\n    static getColumns(state: GameStateModel) {\n        return state.game.columns;\n    }\n\n    /**\n     * Initialize the game, set player turn to player one\n     */\n    @Action(GameInit)\n    initGame({getState, patchState }: StateContext, {payload}: GameInit) {\n        const state = getState();\n        patchState({\n            ...state, game: {\n                ...payload,\n                turn: state.game.player1,\n            }\n        });\n    }\n\n    /**\n     * Sets selected rows in the game state\n     */\n    @Action(SetRows)\n    setRows({getState, patchState }: StateContext, {rows}: SetRows) {\n        const state = getState();\n        patchState({\n            ...state, game: {\n                ...state.game,\n                rows: rows,\n                pawns: [],\n                turn: state.game.player1,\n            }\n        });\n    }\n\n    /**\n     * Sets selected columns in the game state\n     */\n    @Action(SetColumns)\n    setColumns({getState, patchState }: StateContext, {columns}: SetColumns) {\n        const state = getState();\n        patchState({\n            ...state, game: {\n                ...state.game,\n                columns: columns,\n                pawns: [],\n                turn: state.game.player1,\n            }\n        });\n    }\n\n    /**\n     * Reset the game, set player turn to red and reset the pawn array\n     */\n    @Action(GameReset)\n    resetGame({getState, patchState }: StateContext) {\n        const state = getState();\n        patchState({\n            ...state, game: {\n                ...state.game,\n                pawns: [],\n                turn: state.game.player1,\n            }\n        });\n    }\n    \n    /**\n     * Removes last played pawn if there is at least one pawn in the game\n     */\n    @Action(CancelLastMove)\n    cancelLastMove({getState, patchState }: StateContext) {\n        const state = getState();\n        const truncatedPawns = state.game.pawns.slice(0,-1);\n        // check : there is at least one pawn \n        if(state.game.pawns.length === 0){\n            throw new Error('🧐 Aucun pion en jeu !');\n        }\n        patchState({\n            ...state, game: {\n                ...state.game,\n                pawns: truncatedPawns,\n                turn: state.game.turn?.id == state.game.player1.id ? state.game.player2 : state.game.player1,\n            }\n        });\n    }\n\n    /**\n     * Add a pawn to the state pawn array if column played isn't full\n     */\n    @Action(PlayPawn)\n    playPawn({getState, patchState }: StateContext, {pawn}: PlayPawn) {\n        const state = getState();\n        const pawnsList = [...state.game.pawns, pawn]\n        // check : column is full already\n        if(pawn.y >= state.game.rows){\n            throw new Error('🧐 La colonne est pleine !');\n        }\n        patchState({\n            ...state, game: {\n                ...state.game,\n                turn: state.game.turn?.id == state.game.player1.id ? state.game.player2 : state.game.player1,\n                pawns: pawnsList\n            }\n        });\n    }\n\n    /**\n     * Uses Victory service to check if 4 pawns are aligned, update state if there's a winner\n     */\n    @Action(CheckWinner)\n    checkWinner({getState, patchState }: StateContext, {pawnPlayed}: CheckWinner) {\n        const state = getState();\n        let winner!: Player;\n        const linePlayed = pawnPlayed.y;\n        const columnPlayed = pawnPlayed.x;\n\n        // check pour une ligne verticale\n        if(this.victoryService.verticalCheck(state.game, columnPlayed, pawnPlayed)){\n            winner = pawnPlayed.player;\n        }\n\n        // check pour une ligne horizontale\n        if(this.victoryService.horizontalCheck(state.game, linePlayed, pawnPlayed)){\n            winner = pawnPlayed.player;\n        }\n\n        // check pour une ligne diagonale à droite\n        if(this.victoryService.diagonalRightCheck(state.game, pawnPlayed)){\n            winner = pawnPlayed.player;\n        }\n\n        // check pour une ligne diagonale à gauche\n        if(this.victoryService.diagonalLeftCheck(state.game, pawnPlayed)){\n            winner = pawnPlayed.player;\n        }\n\n        patchState({\n            ...state, game: {\n                ...state.game,\n                winner: winner\n            }\n        });\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GameStateModel.html":{"url":"classes/GameStateModel.html","title":"class - GameStateModel","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GameStateModel\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/store/game/game.state.ts\n        \n\n\n            \n                Description\n            \n            \n                Game State Model\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                game\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        game\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Game\n\n                    \n                \n                \n                    \n                        Default value : {\n        player1: {id: 0, name: \"Joueur 1\"},\n        player2: {id: 1, name: \"Joueur 2\"},\n        rows: 6,\n        columns: 7,\n        pawns: []\n    }\n                    \n                \n                    \n                        \n                                Defined in src/app/store/game/game.state.ts:16\n                        \n                    \n\n            \n                \n                    Game state, contains the two players, the columns and rows number and an array of the pawns played\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { State, Action, StateContext, Selector } from '@ngxs/store';\nimport { removeItem } from '@ngxs/store/operators';\nimport { Game } from 'src/app/models/game';\nimport { CheckWinner, GameInit, PlayPawn, GameReset, CancelLastMove, SetRows, SetColumns } from './game.actions';\nimport { VictoryCheckService } from '../services/victory-check.service';\nimport { Player } from 'src/app/models/player';\n\n/**\n * Game State Model\n */\nexport class GameStateModel {\n    /**\n     * Game state, contains the two players, the columns and rows number and an array of the pawns played\n     */\n    game: Game = {\n        player1: {id: 0, name: \"Joueur 1\"},\n        player2: {id: 1, name: \"Joueur 2\"},\n        rows: 6,\n        columns: 7,\n        pawns: []\n    };\n}\n\n/**\n * Game State\n */\n@State({\n    name: 'game',\n    defaults: {\n        game: {\n            player1: {id: 0, name: \"Joueur 1\"},\n            player2: {id: 1, name: \"Joueur 2\"},\n            rows: 6,\n            columns: 7,\n            pawns: []\n        }\n    }\n})\n@Injectable()\nexport class GameState {\n\n    /**\n     * Victory Service, has all the methods to check if 4 pawns are aligned\n     */\n    private victoryService: VictoryCheckService = new VictoryCheckService();\n\n    /**\n     * Returns game state\n     */\n    @Selector()\n    static getGame(state: GameStateModel) {\n        return state.game;\n    }\n\n    /**\n     * Returns rows\n     */\n    @Selector()\n    static getRows(state: GameStateModel) {\n        return state.game.rows;\n    }\n\n    /**\n     * Returns columns\n     */\n    @Selector()\n    static getColumns(state: GameStateModel) {\n        return state.game.columns;\n    }\n\n    /**\n     * Initialize the game, set player turn to player one\n     */\n    @Action(GameInit)\n    initGame({getState, patchState }: StateContext, {payload}: GameInit) {\n        const state = getState();\n        patchState({\n            ...state, game: {\n                ...payload,\n                turn: state.game.player1,\n            }\n        });\n    }\n\n    /**\n     * Sets selected rows in the game state\n     */\n    @Action(SetRows)\n    setRows({getState, patchState }: StateContext, {rows}: SetRows) {\n        const state = getState();\n        patchState({\n            ...state, game: {\n                ...state.game,\n                rows: rows,\n                pawns: [],\n                turn: state.game.player1,\n            }\n        });\n    }\n\n    /**\n     * Sets selected columns in the game state\n     */\n    @Action(SetColumns)\n    setColumns({getState, patchState }: StateContext, {columns}: SetColumns) {\n        const state = getState();\n        patchState({\n            ...state, game: {\n                ...state.game,\n                columns: columns,\n                pawns: [],\n                turn: state.game.player1,\n            }\n        });\n    }\n\n    /**\n     * Reset the game, set player turn to red and reset the pawn array\n     */\n    @Action(GameReset)\n    resetGame({getState, patchState }: StateContext) {\n        const state = getState();\n        patchState({\n            ...state, game: {\n                ...state.game,\n                pawns: [],\n                turn: state.game.player1,\n            }\n        });\n    }\n    \n    /**\n     * Removes last played pawn if there is at least one pawn in the game\n     */\n    @Action(CancelLastMove)\n    cancelLastMove({getState, patchState }: StateContext) {\n        const state = getState();\n        const truncatedPawns = state.game.pawns.slice(0,-1);\n        // check : there is at least one pawn \n        if(state.game.pawns.length === 0){\n            throw new Error('🧐 Aucun pion en jeu !');\n        }\n        patchState({\n            ...state, game: {\n                ...state.game,\n                pawns: truncatedPawns,\n                turn: state.game.turn?.id == state.game.player1.id ? state.game.player2 : state.game.player1,\n            }\n        });\n    }\n\n    /**\n     * Add a pawn to the state pawn array if column played isn't full\n     */\n    @Action(PlayPawn)\n    playPawn({getState, patchState }: StateContext, {pawn}: PlayPawn) {\n        const state = getState();\n        const pawnsList = [...state.game.pawns, pawn]\n        // check : column is full already\n        if(pawn.y >= state.game.rows){\n            throw new Error('🧐 La colonne est pleine !');\n        }\n        patchState({\n            ...state, game: {\n                ...state.game,\n                turn: state.game.turn?.id == state.game.player1.id ? state.game.player2 : state.game.player1,\n                pawns: pawnsList\n            }\n        });\n    }\n\n    /**\n     * Uses Victory service to check if 4 pawns are aligned, update state if there's a winner\n     */\n    @Action(CheckWinner)\n    checkWinner({getState, patchState }: StateContext, {pawnPlayed}: CheckWinner) {\n        const state = getState();\n        let winner!: Player;\n        const linePlayed = pawnPlayed.y;\n        const columnPlayed = pawnPlayed.x;\n\n        // check pour une ligne verticale\n        if(this.victoryService.verticalCheck(state.game, columnPlayed, pawnPlayed)){\n            winner = pawnPlayed.player;\n        }\n\n        // check pour une ligne horizontale\n        if(this.victoryService.horizontalCheck(state.game, linePlayed, pawnPlayed)){\n            winner = pawnPlayed.player;\n        }\n\n        // check pour une ligne diagonale à droite\n        if(this.victoryService.diagonalRightCheck(state.game, pawnPlayed)){\n            winner = pawnPlayed.player;\n        }\n\n        // check pour une ligne diagonale à gauche\n        if(this.victoryService.diagonalLeftCheck(state.game, pawnPlayed)){\n            winner = pawnPlayed.player;\n        }\n\n        patchState({\n            ...state, game: {\n                ...state.game,\n                winner: winner\n            }\n        });\n    }\n}\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/HeaderComponent.html":{"url":"components/HeaderComponent.html","title":"component - HeaderComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  HeaderComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/layout/header/header.component.ts\n\n\n\n    \n        Description\n    \n    \n        App header component\n\n    \n\n\n    \n        Implements\n    \n    \n                    OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-header\n            \n\n            \n                styleUrls\n                ./header.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./header.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                dark\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                applyDarkTheme\n                            \n                            \n                                toogleTheme\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        applyDarkTheme\n                        \n                    \n                \n            \n            \n                \napplyDarkTheme()\n                \n            \n\n\n            \n                \n                    Defined in src/app/layout/header/header.component.ts:49\n                \n            \n\n\n            \n                \n                    Applies selected theme in body tag , for global theming\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toogleTheme\n                        \n                    \n                \n            \n            \n                \ntoogleTheme()\n                \n            \n\n\n            \n                \n                    Defined in src/app/layout/header/header.component.ts:41\n                \n            \n\n\n            \n                \n                    Toogle theme\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        dark\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Select(ThemeState.getTheme)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app/layout/header/header.component.ts:22\n                        \n                    \n\n            \n                \n                    Gets the theme set from the store\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import { Component, OnInit } from '@angular/core';\nimport { Select, Store } from '@ngxs/store';\nimport { Observable } from 'rxjs';\nimport { take } from 'rxjs/operators';\nimport { ToogleTheme } from '../../store/theme/theme.actions';\nimport { ThemeState } from '../../store/theme/theme.state';\n\n/**\n * App header component\n */\n@Component({\n  selector: 'app-header',\n  templateUrl: './header.component.html',\n  styleUrls: ['./header.component.scss']\n})\nexport class HeaderComponent implements OnInit {\n\n  /**\n   * Gets the theme set from the store\n   * @type {Observable}\n   */\n  @Select(ThemeState.getTheme) dark!: Observable;\n\n  /**\n   * @ignore\n   */\n  constructor(private store: Store) { \n\n  }\n\n  /**\n   * @ignore\n   */\n  ngOnInit(): void {\n    this.applyDarkTheme();\n  }\n\n  /**\n   * Toogle theme\n   */\n  toogleTheme() {\n    this.store.dispatch(new ToogleTheme());\n    this.applyDarkTheme();\n  }\n\n  /**\n   * Applies selected theme in body tag , for global theming\n   */\n  applyDarkTheme(){\n    this.dark.pipe(take(1)).subscribe(isDark => {\n      if(isDark){\n        document.body.classList.add(\"dark-theme\");\n      }\n      else{\n        \n        document.body.classList.remove(\"dark-theme\");\n      }\n    });\n  }\n\n}\n\n    \n\n    \n        \n    Puissance 4\n\n    \n\n    brightness_5\n    \n    \n    dark_mode\n\n    \n\n    \n                \n                    ./header.component.scss\n                \n                :host{\n    position: sticky;\n    top: 0;\n\n    .header__title{\n        font-family: \"Train One\";\n        text-shadow: 2px 2px 6px #999;\n    }\n}\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '    Puissance 4        brightness_5            dark_mode'\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CaseComponent', 'selector': 'app-case'},{'name': 'EndGameComponent', 'selector': 'app-end-game'},{'name': 'GameComponent', 'selector': 'app-game'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'HomepageComponent', 'selector': 'app-homepage'},{'name': 'NotFoundComponent', 'selector': 'app-not-found'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'HeaderComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/HomepageComponent.html":{"url":"components/HomepageComponent.html","title":"component - HomepageComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  HomepageComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/homepage/homepage.component.ts\n\n\n\n    \n        Description\n    \n    \n        Homepage component\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-homepage\n            \n\n            \n                styleUrls\n                ./homepage.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./homepage.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                columns\n                            \n                            \n                                rows\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                setColumns\n                            \n                            \n                                setRows\n                            \n                            \n                                startGame\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        setColumns\n                        \n                    \n                \n            \n            \n                \nsetColumns(event: any)\n                \n            \n\n\n            \n                \n                    Defined in src/app/homepage/homepage.component.ts:49\n                \n            \n\n\n            \n                \n                    Sets the columns in the store from the column slider\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    event\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setRows\n                        \n                    \n                \n            \n            \n                \nsetRows(event: any)\n                \n            \n\n\n            \n                \n                    Defined in src/app/homepage/homepage.component.ts:56\n                \n            \n\n\n            \n                \n                    Sets the rows in the store from the row slider\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    event\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        startGame\n                        \n                    \n                \n            \n            \n                \nstartGame()\n                \n            \n\n\n            \n                \n                    Defined in src/app/homepage/homepage.component.ts:41\n                \n            \n\n\n            \n                \n                    Resets the game and navigate to the game page\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        columns\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Select(GameState.getColumns)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app/homepage/homepage.component.ts:29\n                        \n                    \n\n            \n                \n                    Columns from the store to set in the slider when loading the component\n\n                \n            \n\n                \n                    \n                        \n                                Parameters :\n                                \n                                    \n                                        \n                                            Name\n                                        \n                                    \n                                    \n                                            \n                                                    [object Object]\n                                            \n                                    \n                                \n                        \n                    \n                \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        rows\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Select(GameState.getRows)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app/homepage/homepage.component.ts:23\n                        \n                    \n\n            \n                \n                    Rows from the store to set in the slider when loading the component\n\n                \n            \n\n                \n                    \n                        \n                                Parameters :\n                                \n                                    \n                                        \n                                            Name\n                                        \n                                    \n                                    \n                                            \n                                                    [object Object]\n                                            \n                                    \n                                \n                        \n                    \n                \n        \n    \n\n\n\n\n\n    \n        import { Component } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Select, Store } from '@ngxs/store';\nimport { Observable } from 'rxjs';\nimport { GameReset, SetColumns, SetRows } from '../store/game/game.actions';\nimport { GameState } from '../store/game/game.state';\n\n\n/**\n * Homepage component\n */\n@Component({\n  selector: 'app-homepage',\n  templateUrl: './homepage.component.html',\n  styleUrls: ['./homepage.component.scss']\n})\nexport class HomepageComponent {\n\n  /**\n   * Rows from the store to set in the slider when loading the component\n   * @param {Observable} \n   */\n  @Select(GameState.getRows) rows!: Observable;\n\n  /**\n   * Columns from the store to set in the slider when loading the component\n   * @param {Observable} \n   */\n  @Select(GameState.getColumns) columns!: Observable;\n\n  /**\n   * @ignore\n   */\n  constructor(\n    private store: Store,\n    private router: Router) { }\n\n    /**\n   * Resets the game and navigate to the game page\n   */\n  startGame(){\n    this.store.dispatch(new GameReset());\n    this.router.navigate(['game']);\n  }\n\n  /**\n   * Sets the columns in the store from the column slider\n   */\n  setColumns(event: any){\n    this.store.dispatch(new SetColumns(event.value));\n  }\n\n  /**\n   * Sets the rows in the store from the row slider\n   */\n  setRows(event: any){\n    this.store.dispatch(new SetRows(event.value));\n  }\n\n}\n\n    \n\n    \n        \n\n    \n        \n            \n        \n    \n    \n        \n            \n                Colonnes :\n                \n            \n\n            \n                Lignes :\n                \n            \n            \n            Jouer\n        \n    \n\n\n    \n\n    \n                \n                    ./homepage.component.scss\n                \n                .homepage {\n    height: 100%;\n\n    &__title{\n        font-family: \"Train One\";\n        font-size: 3rem;\n        text-shadow: 2px 2px 6px #999;\n        margin-bottom: 10%;\n\n        &--small{\n            font-size: 2rem;\n            text-shadow: 2px 2px 6px #999;\n        }\n    }\n\n    &__image{\n        max-width: 80%;\n        max-height: 90%;\n    }\n\n    &__play-button{\n        font-size: 1.2rem;\n        padding: 5px 30px;\n        margin-top: 20px;\n    }\n\n    &__settings-title{\n        margin-bottom: 20px;\n    }\n\n    &__settings-item{\n        margin: 2% 20%;\n\n        .mat-slider-horizontal{\n            width: 100%;\n        }\n\n        ::ng-deep {\n            .mat-slider-thumb-label {\n                transform: rotate(45deg) !important;\n                border-radius: 50% 50% 0 !important;\n            }\n            \n            .mat-slider-thumb {\n                transform: scale(0) !important;\n            }\n            \n            .mat-slider-thumb-label-text {\n                opacity: 1 !important;\n            }\n        }\n    }\n}\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                                                            Colonnes :                                                        Lignes :                                                    Jouer            '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CaseComponent', 'selector': 'app-case'},{'name': 'EndGameComponent', 'selector': 'app-end-game'},{'name': 'GameComponent', 'selector': 'app-game'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'HomepageComponent', 'selector': 'app-homepage'},{'name': 'NotFoundComponent', 'selector': 'app-not-found'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'HomepageComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/HomepageModule.html":{"url":"modules/HomepageModule.html","title":"module - HomepageModule","body":"\n                   \n\n\n\n\n    Modules\n    HomepageModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_HomepageModule\n\n\n\ncluster_HomepageModule_declarations\n\n\n\ncluster_HomepageModule_imports\n\n\n\n\nHomepageComponent\n\nHomepageComponent\n\n\n\nHomepageModule\n\nHomepageModule\n\nHomepageModule -->\n\nHomepageComponent->HomepageModule\n\n\n\n\n\nHomepageRoutingModule\n\nHomepageRoutingModule\n\nHomepageModule -->\n\nHomepageRoutingModule->HomepageModule\n\n\n\n\n\nMaterialModule\n\nMaterialModule\n\nHomepageModule -->\n\nMaterialModule->HomepageModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/homepage/homepage.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            HomepageComponent\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            HomepageRoutingModule\n                        \n                        \n                            MaterialModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { HomepageRoutingModule } from './homepage-routing.module';\nimport { HomepageComponent } from './homepage.component';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { MaterialModule } from '../material/material.module';\nimport { FormsModule } from '@angular/forms';\n\n\n@NgModule({\n  declarations: [\n    HomepageComponent\n  ],\n  imports: [\n    CommonModule,\n    HomepageRoutingModule,\n    FlexLayoutModule,\n    MaterialModule,\n    FormsModule\n  ]\n})\nexport class HomepageModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/HomepageRoutingModule.html":{"url":"modules/HomepageRoutingModule.html","title":"module - HomepageRoutingModule","body":"\n                   \n\n\n\n\n    Modules\n    HomepageRoutingModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/homepage/homepage-routing.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { HomepageComponent } from './homepage.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: HomepageComponent\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class HomepageRoutingModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MaterialModule.html":{"url":"modules/MaterialModule.html","title":"module - MaterialModule","body":"\n                   \n\n\n\n\n    Modules\n    MaterialModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/material/material.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {ClipboardModule} from '@angular/cdk/clipboard';\nimport {DragDropModule} from '@angular/cdk/drag-drop';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {ScrollingModule} from '@angular/cdk/scrolling';\nimport {CdkStepperModule} from '@angular/cdk/stepper';\nimport {CdkTableModule} from '@angular/cdk/table';\nimport {CdkTreeModule} from '@angular/cdk/tree';\nimport {MatAutocompleteModule} from '@angular/material/autocomplete';\nimport {MatBadgeModule} from '@angular/material/badge';\nimport {MatBottomSheetModule} from '@angular/material/bottom-sheet';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatButtonToggleModule} from '@angular/material/button-toggle';\nimport {MatCardModule} from '@angular/material/card';\nimport {MatCheckboxModule} from '@angular/material/checkbox';\nimport {MatChipsModule} from '@angular/material/chips';\nimport {MatStepperModule} from '@angular/material/stepper';\nimport {MatDatepickerModule} from '@angular/material/datepicker';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatDividerModule} from '@angular/material/divider';\nimport {MatExpansionModule} from '@angular/material/expansion';\nimport {MatGridListModule} from '@angular/material/grid-list';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatInputModule} from '@angular/material/input';\nimport {MatListModule} from '@angular/material/list';\nimport {MatMenuModule} from '@angular/material/menu';\nimport {MatNativeDateModule, MatRippleModule} from '@angular/material/core';\nimport {MatPaginatorModule} from '@angular/material/paginator';\nimport {MatProgressBarModule} from '@angular/material/progress-bar';\nimport {MatProgressSpinnerModule} from '@angular/material/progress-spinner';\nimport {MatRadioModule} from '@angular/material/radio';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatSidenavModule} from '@angular/material/sidenav';\nimport {MatSliderModule} from '@angular/material/slider';\nimport {MatSlideToggleModule} from '@angular/material/slide-toggle';\nimport {MatSnackBarModule} from '@angular/material/snack-bar';\nimport {MatSortModule} from '@angular/material/sort';\nimport {MatTableModule} from '@angular/material/table';\nimport {MatTabsModule} from '@angular/material/tabs';\nimport {MatToolbarModule} from '@angular/material/toolbar';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatTreeModule} from '@angular/material/tree';\nimport {OverlayModule} from '@angular/cdk/overlay';\n\n\n\n@NgModule({\n  declarations: [],\n  imports: [\n    CommonModule\n  ],\n  exports: [\n    A11yModule,\n    ClipboardModule,\n    CdkStepperModule,\n    CdkTableModule,\n    CdkTreeModule,\n    DragDropModule,\n    MatAutocompleteModule,\n    MatBadgeModule,\n    MatBottomSheetModule,\n    MatButtonModule,\n    MatButtonToggleModule,\n    MatCardModule,\n    MatCheckboxModule,\n    MatChipsModule,\n    MatStepperModule,\n    MatDatepickerModule,\n    MatDialogModule,\n    MatDividerModule,\n    MatExpansionModule,\n    MatGridListModule,\n    MatIconModule,\n    MatInputModule,\n    MatListModule,\n    MatMenuModule,\n    MatNativeDateModule,\n    MatPaginatorModule,\n    MatProgressBarModule,\n    MatProgressSpinnerModule,\n    MatRadioModule,\n    MatRippleModule,\n    MatSelectModule,\n    MatSidenavModule,\n    MatSliderModule,\n    MatSlideToggleModule,\n    MatSnackBarModule,\n    MatSortModule,\n    MatTableModule,\n    MatTabsModule,\n    MatToolbarModule,\n    MatTooltipModule,\n    MatTreeModule,\n    OverlayModule,\n    PortalModule,\n    ScrollingModule,\n  ]\n})\nexport class MaterialModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/NotFoundComponent.html":{"url":"components/NotFoundComponent.html","title":"component - NotFoundComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  NotFoundComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/not-found/not-found.component.ts\n\n\n\n    \n        Description\n    \n    \n        404 component\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-not-found\n            \n\n            \n                styleUrls\n                ./not-found.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./not-found.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        import { Component } from '@angular/core';\n\n/**\n * 404 component\n */\n@Component({\n  selector: 'app-not-found',\n  templateUrl: './not-found.component.html',\n  styleUrls: ['./not-found.component.scss']\n})\nexport class NotFoundComponent  {\n\n}\n\n    \n\n    \n        \n     Oups !\n    La page n'existe pas !\n    \n    \n    Revenir à l'accueil\n\n\n    \n\n    \n                \n                    ./not-found.component.scss\n                \n                .not-found{\n\n    text-align: center;\n    margin-top: 50px;\n\n    &__title{\n        font-size: 2rem;\n        font-weight: bold;\n    }\n\n    &__image{\n        max-width: 80%;\n        max-height: 40vh;\n    }\n\n    &__action{\n        margin-top: 100px;\n        padding: 5px 30px;\n    }\n}\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '     Oups !    La page n\\'existe pas !            Revenir à l\\'accueil'\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CaseComponent', 'selector': 'app-case'},{'name': 'EndGameComponent', 'selector': 'app-end-game'},{'name': 'GameComponent', 'selector': 'app-game'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'HomepageComponent', 'selector': 'app-homepage'},{'name': 'NotFoundComponent', 'selector': 'app-not-found'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'NotFoundComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Pawn.html":{"url":"interfaces/Pawn.html","title":"interface - Pawn","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Pawn\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/models/pawn.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents a pawn\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            isInWinningLine\n                                        \n                                \n                                \n                                        \n                                            player\n                                        \n                                \n                                \n                                        \n                                            x\n                                        \n                                \n                                \n                                        \n                                            y\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        isInWinningLine\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        isInWinningLine:     \n\n                                    \n                                \n\n\n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    true if the pawn is in a winning line, for display purpose\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        player\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        player:         Player\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Player\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    player that played the pawn\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        x\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        x:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    x coordinate of the pawn\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        y\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        y:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    y coordinate of the pawn\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Player } from \"./player\";\n\n/**\n * Represents a pawn\n */\nexport interface Pawn{\n    /**\n     * x coordinate of the pawn\n     */\n    x: number;\n\n    /**\n     * y coordinate of the pawn\n     */\n    y: number;\n\n    /**\n     * player that played the pawn\n     */\n    player: Player;\n\n    /**\n     * true if the pawn is in a winning line, for display purpose\n     */\n    isInWinningLine?: false;\n}\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Player.html":{"url":"interfaces/Player.html","title":"interface - Player","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Player\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/models/player.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents a player\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    player id ( 0 for player one, 1 for player 2)\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    player name (not used for now)\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface Player{\n    /**\n     * player id ( 0 for player one, 1 for player 2)\n     */\n    id: number;\n\n    /**\n     * player name (not used for now)\n     */\n    name: string;\n}\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ThemeState.html":{"url":"injectables/ThemeState.html","title":"injectable - ThemeState","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ThemeState\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/store/theme/theme.state.ts\n        \n\n\n            \n                Description\n            \n            \n                Theme state\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                getTheme\n                            \n                            \n                                toogleTheme\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        getTheme\n                        \n                    \n                \n            \n            \n                \n                    \n                    getTheme(state: ThemeStateModel)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Selector()\n                \n            \n\n            \n                \n                    Defined in src/app/store/theme/theme.state.ts:31\n                \n            \n\n\n            \n                \n                    Retrieves the theme\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    state\n                                    \n                                                ThemeStateModel\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toogleTheme\n                        \n                    \n                \n            \n            \n                \ntoogleTheme(undefined: StateContext)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Action(ToogleTheme)\n                \n            \n\n            \n                \n                    Defined in src/app/store/theme/theme.state.ts:39\n                \n            \n\n\n            \n                \n                    Sets the theme in the state\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                StateContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { State, Action, StateContext, Selector } from '@ngxs/store';\nimport { ToogleTheme } from './theme.actions';\n\n/**\n * Theme state model\n */\nexport class ThemeStateModel {\n    /**\n     * true if dark theme is selected\n     */\n    dark: boolean = false;\n}\n\n/**\n * Theme state\n */\n@State({\n    name: 'theme',\n    defaults: {\n        dark: false\n    }\n})\n@Injectable()\nexport class ThemeState {\n\n    /**\n     * Retrieves the theme\n     */\n    @Selector()\n    static getTheme(state: ThemeStateModel) {\n        return state.dark;\n    }\n\n    /**\n     * Sets the theme in the state\n     */\n    @Action(ToogleTheme)\n    toogleTheme({getState, patchState }: StateContext) {\n        const state = getState();\n        patchState({\n            ...state, dark: !state.dark\n        });\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ThemeStateModel.html":{"url":"classes/ThemeStateModel.html","title":"class - ThemeStateModel","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ThemeStateModel\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/store/theme/theme.state.ts\n        \n\n\n            \n                Description\n            \n            \n                Theme state model\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                dark\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        dark\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/store/theme/theme.state.ts:12\n                        \n                    \n\n            \n                \n                    true if dark theme is selected\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { State, Action, StateContext, Selector } from '@ngxs/store';\nimport { ToogleTheme } from './theme.actions';\n\n/**\n * Theme state model\n */\nexport class ThemeStateModel {\n    /**\n     * true if dark theme is selected\n     */\n    dark: boolean = false;\n}\n\n/**\n * Theme state\n */\n@State({\n    name: 'theme',\n    defaults: {\n        dark: false\n    }\n})\n@Injectable()\nexport class ThemeState {\n\n    /**\n     * Retrieves the theme\n     */\n    @Selector()\n    static getTheme(state: ThemeStateModel) {\n        return state.dark;\n    }\n\n    /**\n     * Sets the theme in the state\n     */\n    @Action(ToogleTheme)\n    toogleTheme({getState, patchState }: StateContext) {\n        const state = getState();\n        patchState({\n            ...state, dark: !state.dark\n        });\n    }\n}\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/VictoryCheckService.html":{"url":"injectables/VictoryCheckService.html","title":"injectable - VictoryCheckService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  VictoryCheckService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/store/services/victory-check.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Provide methods to check if 4 pawns are aligned\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                diagonalLeftCheck\n                            \n                            \n                                    Public\n                                diagonalRightCheck\n                            \n                            \n                                    Public\n                                horizontalCheck\n                            \n                            \n                                    Public\n                                verticalCheck\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        diagonalLeftCheck\n                        \n                    \n                \n            \n            \n                \n                    \n                    diagonalLeftCheck(game: Game, pawnPlayed: Pawn)\n                \n            \n\n\n            \n                \n                    Defined in src/app/store/services/victory-check.service.ts:101\n                \n            \n\n\n            \n                \n                    Check if 4 pawns are aligned diagonally in the last cell played, from bottom left to up right\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    game\n                                    \n                                                Game\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pawnPlayed\n                                    \n                                                Pawn\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        diagonalRightCheck\n                        \n                    \n                \n            \n            \n                \n                    \n                    diagonalRightCheck(game: Game, pawnPlayed: Pawn)\n                \n            \n\n\n            \n                \n                    Defined in src/app/store/services/victory-check.service.ts:72\n                \n            \n\n\n            \n                \n                    Check if 4 pawns are aligned diagonally in the last cell played, from bottom right to up left\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    game\n                                    \n                                                Game\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pawnPlayed\n                                    \n                                                Pawn\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        horizontalCheck\n                        \n                    \n                \n            \n            \n                \n                    \n                    horizontalCheck(game: Game, rowPlayed: number, pawnPlayed: Pawn)\n                \n            \n\n\n            \n                \n                    Defined in src/app/store/services/victory-check.service.ts:44\n                \n            \n\n\n            \n                \n                    Check if 4 pawns are aligned horizontally in the last row played\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    game\n                                    \n                                                Game\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    rowPlayed\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pawnPlayed\n                                    \n                                                Pawn\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        verticalCheck\n                        \n                    \n                \n            \n            \n                \n                    \n                    verticalCheck(game: Game, columnPlayed: number, pawnPlayed: Pawn)\n                \n            \n\n\n            \n                \n                    Defined in src/app/store/services/victory-check.service.ts:16\n                \n            \n\n\n            \n                \n                    Check if 4 pawns are aligned vertically in the last column played\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    game\n                                    \n                                                Game\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    columnPlayed\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pawnPlayed\n                                    \n                                                Pawn\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { Game } from 'src/app/models/game';\nimport { Pawn } from 'src/app/models/pawn';\n\n/**\n * Provide methods to check if 4 pawns are aligned\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class VictoryCheckService {\n\n  /**\n   * Check if 4 pawns are aligned vertically in the last column played\n   */\n  public verticalCheck(game: Game, columnPlayed: number, pawnPlayed: Pawn): boolean{\n\n    let won: boolean = false;\n\n    // On récupère les pions de la colonne jouée qui appartiennent au joueur\n    let playerColumn = game.pawns.filter(p => (p.x === columnPlayed && p.player.id === pawnPlayed.player.id));\n    // On ordonne le tableau\n    playerColumn = playerColumn.sort((a,b) => (a.y - b.y));\n    // On check si on a 4 pions alignés\n    let alignedPawns: number = 1;\n    playerColumn.map((pawn, index, pawnList) => {\n        if(pawn.y === pawnList[index - 1]?.y + 1 ) {\n            alignedPawns++;\n        }\n        else alignedPawns = 1;\n\n        if(alignedPawns > 3) {\n          console.info(pawnPlayed.player.name + \" a aligné 4 pions verticalement! 🎉\")\n          won = true;\n        }\n    });\n\n    return won;\n  }\n\n  /**\n   * Check if 4 pawns are aligned horizontally in the last row played\n   */\n  public horizontalCheck(game: Game, rowPlayed: number, pawnPlayed: Pawn): boolean{\n\n    let won: boolean = false;\n\n    // On récupère les pions de la ligne jouée qui appartiennent au joueur\n    let playerRow = game.pawns.filter(p => (p.y === rowPlayed && p.player.id === pawnPlayed.player.id));\n    // On ordonne le tableau\n    playerRow = playerRow.sort((a,b) => (a.x - b.x));\n    // On check si on a 4 pions alignés\n    let alignedPawns: number = 1;\n    playerRow.map((pawn, index, pawnList) => {\n        if(pawn.x === pawnList[index - 1]?.x + 1 ) {\n            alignedPawns++;\n        }\n        else alignedPawns = 1;\n\n        if(alignedPawns > 3) {\n          console.info(pawnPlayed.player.name + \" a aligné 4 pions horizontalement! 🎉\")\n          won = true;\n        }\n    });\n\n    return won;\n  }\n\n  /**\n   * Check if 4 pawns are aligned diagonally in the last cell played, from bottom right to up left\n   */\n  public diagonalRightCheck(game: Game, pawnPlayed: Pawn): boolean{\n\n    let won: boolean = false;\n\n    // On récupère tous les pions du joueur dans la diagonale droite \n    let playerPawns = game.pawns.filter(p => (p.x + p.y === pawnPlayed.x + pawnPlayed.y ) && (p.player.id === pawnPlayed.player.id));\n    \n    // On ordonne le tableau\n    playerPawns = playerPawns.sort((a,b) => (a.x - b.x));\n    // On check si on a 4 pions alignés\n    let alignedPawns: number = 1;\n    playerPawns.map((pawn, index, pawnList) => {\n        if((pawn.x === pawnList[index - 1]?.x + 1) && (pawn.y === pawnList[index - 1]?.y - 1)) {\n            alignedPawns++;\n        }\n        else alignedPawns = 1;\n\n        if(alignedPawns > 3) {\n          console.info(pawnPlayed.player.name + \" a aligné 4 pions en diagonale! 🎉\")\n          won = true;\n        }\n    });\n\n    return won;\n  }\n\n  /**\n   * Check if 4 pawns are aligned diagonally in the last cell played, from bottom left to up right\n   */\n  public diagonalLeftCheck(game: Game, pawnPlayed: Pawn): boolean{\n\n    let won: boolean = false;\n\n    // On récupère tous les pions du joueur dans la diagonale droite \n    let playerPawns = game.pawns.filter(p => (p.x - p.y === pawnPlayed.x - pawnPlayed.y ) && (p.player.id === pawnPlayed.player.id));\n    \n    // On ordonne le tableau\n    playerPawns = playerPawns.sort((a,b) => (a.x - b.x));\n    // On check si on a 4 pions alignés\n    let alignedPawns: number = 1;\n    playerPawns.map((pawn, index, pawnList) => {\n        if((pawn.x === pawnList[index - 1]?.x + 1) && (pawn.y === pawnList[index - 1]?.y + 1)) {\n            alignedPawns++;\n        }\n        else alignedPawns = 1;\n\n        if(alignedPawns > 3) {\n          console.info(pawnPlayed.player.name + \" a aligné 4 pions en diagonale! 🎉\")\n          won = true;\n        }\n    });\n\n    return won;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app/app.component.ts\n            \n            component\n            AppComponent\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/app/game/case/case.component.ts\n            \n            component\n            CaseComponent\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/app/game/dialogs/end-game/end-game.component.ts\n            \n            component\n            EndGameComponent\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/app/game/game.component.ts\n            \n            component\n            GameComponent\n            \n                100 %\n                (13/13)\n            \n        \n        \n            \n                \n                src/app/homepage/homepage.component.ts\n            \n            component\n            HomepageComponent\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/app/layout/header/header.component.ts\n            \n            component\n            HeaderComponent\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/app/models/game.ts\n            \n            interface\n            Game\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/app/models/pawn.ts\n            \n            interface\n            Pawn\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/app/models/player.ts\n            \n            interface\n            Player\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/app/not-found/not-found.component.ts\n            \n            component\n            NotFoundComponent\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/store/game/game.state.ts\n            \n            class\n            GameStateModel\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/app/store/game/game.state.ts\n            \n            injectable\n            GameState\n            \n                100 %\n                (12/12)\n            \n        \n        \n            \n                \n                src/app/store/services/victory-check.service.ts\n            \n            injectable\n            VictoryCheckService\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/app/store/theme/theme.state.ts\n            \n            class\n            ThemeStateModel\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/app/store/theme/theme.state.ts\n            \n            injectable\n            ThemeState\n            \n                100 %\n                (3/3)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular/animations : ~12.1.0-\n        \n            @angular/cdk : ^12.1.3\n        \n            @angular/common : ~12.1.0-\n        \n            @angular/compiler : ~12.1.0-\n        \n            @angular/core : ~12.1.0-\n        \n            @angular/flex-layout : ^12.0.0-beta.34\n        \n            @angular/forms : ~12.1.0-\n        \n            @angular/material : ^12.1.3\n        \n            @angular/platform-browser : ~12.1.0-\n        \n            @angular/platform-browser-dynamic : ~12.1.0-\n        \n            @angular/router : ~12.1.0-\n        \n            @angular/service-worker : ~12.1.0-\n        \n            @ngxs/storage-plugin : ^3.7.2\n        \n            @ngxs/store : ^3.7.2\n        \n            rxjs : ~6.6.0\n        \n            tslib : ^2.2.0\n        \n            zone.js : ~0.11.4\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nPuissance4\nThis project was generated with Angular CLI version 12.1.3.\nDevelopment server\nRun ng serve for a dev server. Navigate to http://localhost:4200/. The app will automatically reload if you change any of the source files.\nCode scaffolding\nRun ng generate component component-name to generate a new component. You can also use ng generate directive|pipe|service|class|guard|interface|enum|module.\nBuild\nRun ng build to build the project. The build artifacts will be stored in the dist/ directory.\nRunning unit tests\nRun ng test to execute the unit tests via Karma.\nRunning end-to-end tests\nRun ng e2e to execute the end-to-end tests via a platform of your choice. To use this command, you need to first add a package that implements end-to-end testing capabilities.\nFurther help\nTo get more help on the Angular CLI use ng help or go check out the Angular CLI Overview and Command Reference page.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppRoutingModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        GameModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        GameRoutingModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        HomepageModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        HomepageRoutingModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MaterialModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_declarations\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_bootstrap\n\n\n\ncluster_GameModule\n\n\n\ncluster_GameModule_declarations\n\n\n\ncluster_GameModule_imports\n\n\n\ncluster_HomepageModule\n\n\n\ncluster_HomepageModule_declarations\n\n\n\ncluster_HomepageModule_imports\n\n\n\n\nAppComponent\n\nAppComponent\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAppComponent->AppModule\n\n\n\n\n\nHeaderComponent\n\nHeaderComponent\n\nAppModule -->\n\nHeaderComponent->AppModule\n\n\n\n\n\nNotFoundComponent\n\nNotFoundComponent\n\nAppModule -->\n\nNotFoundComponent->AppModule\n\n\n\n\n\nAppComponent \n\nAppComponent \n\nAppComponent  -->\n\nAppModule->AppComponent \n\n\n\n\n\nAppRoutingModule\n\nAppRoutingModule\n\nAppModule -->\n\nAppRoutingModule->AppModule\n\n\n\n\n\nMaterialModule\n\nMaterialModule\n\nAppModule -->\n\nMaterialModule->AppModule\n\n\n\n\n\nGameModule\n\nGameModule\n\nGameModule -->\n\nMaterialModule->GameModule\n\n\n\n\n\nHomepageModule\n\nHomepageModule\n\nHomepageModule -->\n\nMaterialModule->HomepageModule\n\n\n\n\n\nCaseComponent\n\nCaseComponent\n\nGameModule -->\n\nCaseComponent->GameModule\n\n\n\n\n\nEndGameComponent\n\nEndGameComponent\n\nGameModule -->\n\nEndGameComponent->GameModule\n\n\n\n\n\nGameComponent\n\nGameComponent\n\nGameModule -->\n\nGameComponent->GameModule\n\n\n\n\n\nGameRoutingModule\n\nGameRoutingModule\n\nGameModule -->\n\nGameRoutingModule->GameModule\n\n\n\n\n\nHomepageComponent\n\nHomepageComponent\n\nHomepageModule -->\n\nHomepageComponent->HomepageModule\n\n\n\n\n\nHomepageRoutingModule\n\nHomepageRoutingModule\n\nHomepageModule -->\n\nHomepageRoutingModule->HomepageModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        7 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    7 Components\n                \n            \n        \n        \n            \n                \n                    \n                    3 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    2 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    3 Interfaces\n                \n            \n        \n        \n            \n                \n                    \n                    \n                        9 Routes\n                    \n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"routes.html":{"url":"routes.html","title":"routes - routes","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Routes\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
