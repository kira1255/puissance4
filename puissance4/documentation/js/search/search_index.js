var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/components/AppComponent.html",[0,0.456,1,0.938]],["body/components/AppComponent.html",[0,0.838,1,1.662,2,1.863,3,0.294,4,0.294,5,2.29,6,1.568,7,1.568,8,1.568,9,0.244,10,2.841,11,0.726,12,2.512,13,1.568,14,1.85,15,3.722,16,2.054,17,5.015,18,2.054,19,4.497,20,0.726,21,1.404,22,5.015,23,0.726,24,0.037,25,3.155,26,1.568,27,3.722,28,1.072,29,3.434,30,2.829,31,2.524,32,3.722,33,4.497,34,0.538,35,0.402,36,2.16,37,1.178,38,1.927,39,1.568,40,2.451,41,0.294,42,0.294,43,3.434,44,2.524,45,1.927,46,3.434,47,3.434,48,3.434,49,1.568,50,2.054,51,2.054,52,1.568,53,2.43,54,1.568,55,1.161,56,1.568,57,1.072,58,1.568,59,1.072,60,1.568,61,2.054,62,0.976,63,1.072,64,1.568,65,0.976,66,1.568,67,0.976,68,1.568,69,1.568,70,1.568,71,0.02,72,0.026,73,0.02]],["title/modules/AppModule.html",[74,1.372,75,1.89]],["body/modules/AppModule.html",[1,1.873,3,0.274,4,0.274,9,0.227,12,1.776,24,0.037,34,0.616,35,0.374,37,1.096,39,1.459,40,2.281,41,0.274,42,0.274,63,1.734,67,1.578,71,0.019,72,0.025,73,0.019,75,3.833,76,1.096,77,2.165,78,2.644,79,2.644,80,2.644,81,2.644,82,3.117,83,2.536,84,2.697,85,1.613,86,2.01,87,3.195,88,2.697,89,1.958,90,4.287,91,1.958,92,4.287,93,3.548,94,2.281,95,2.281,96,3.195,97,4.287,98,3.195,99,2.281,100,3.195,101,2.644,102,2.644,103,3.195,104,3.195,105,3.195,106,3.195,107,3.195,108,2.644,109,2.644,110,4.287,111,3.195,112,1.958,113,2.281,114,2.01,115,2.644,116,3.195,117,3.195,118,3.195,119,3.195,120,3.195,121,3.195,122,3.195,123,3.195,124,3.195,125,3.195,126,3.195,127,3.195,128,3.195,129,3.195,130,3.195,131,3.195,132,3.195,133,3.195]],["title/modules/AppRoutingModule.html",[74,1.372,82,1.686]],["body/modules/AppRoutingModule.html",[0,0.609,3,0.344,4,0.344,9,0.285,24,0.038,34,0.545,35,0.47,41,0.344,42,0.344,67,1.411,71,0.024,72,0.029,73,0.024,76,1.375,82,2.787,89,1.831,91,2.267,114,2.523,115,3.318,134,4.01,135,2.863,136,3.544,137,2.723,138,2.025,139,1.661,140,4.135,141,4.965,142,4.965,143,4.01,144,2.523,145,4.965,146,4.01,147,4.01,148,1.139,149,4.01,150,4.01,151,4.108,152,4.01,153,2.523]],["title/components/CaseComponent.html",[0,0.456,57,0.938]],["body/components/CaseComponent.html",[0,0.804,1,0.947,2,1.715,3,0.26,4,0.26,5,1.385,6,1.385,7,1.385,8,1.385,9,0.215,11,0.642,12,2.394,13,1.385,14,1.805,16,1.89,18,1.89,20,0.876,23,0.876,24,0.037,28,0.947,34,0.418,35,0.355,41,0.26,42,0.26,44,1.703,45,2.842,49,1.385,50,1.89,51,1.89,52,1.385,53,2.312,54,1.385,55,1.069,56,1.385,57,1.581,58,1.385,59,0.947,60,1.385,61,1.89,62,0.862,63,0.947,64,1.385,65,0.862,66,1.385,67,0.862,68,1.385,69,1.385,70,1.385,71,0.018,72,0.024,73,0.018,148,1.176,154,2.51,155,4.385,156,4.14,157,4.14,158,2.956,159,3.426,160,3.426,161,4.713,162,4.14,163,4.14,164,2.223,165,3.034,166,2.09,167,3.426,168,3.034,169,2.51,170,2.51,171,3.034,172,2.51,173,2.956,174,4.14,175,1.703,176,2.51,177,2.166,178,1.385,179,4.526,180,3.034,181,4.713,182,3.365,183,4.713,184,4.14,185,4.14,186,3.426,187,4.526,188,2.51,189,1.908,190,4.246,191,3.034,192,2.51,193,1.908,194,1.908,195,2.166,196,2.51,197,1.703,198,3.034,199,2.166,200,3.034]],["title/components/EndGameComponent.html",[0,0.456,59,0.938]],["body/components/EndGameComponent.html",[0,0.76,1,0.811,2,1.538,3,0.222,4,0.222,5,1.185,6,1.185,7,1.185,8,1.185,9,0.184,11,0.785,12,2.312,13,1.185,14,1.742,16,1.695,18,1.695,20,0.549,21,1.159,23,1,24,0.037,26,1.185,28,1.477,31,2.433,34,0.438,35,0.304,41,0.222,42,0.222,49,1.185,50,1.695,51,1.695,52,1.185,53,2.16,54,1.185,55,1.119,56,1.185,57,0.811,58,1.185,59,1.477,60,2.503,61,1.695,62,0.738,63,0.811,64,1.185,65,0.738,66,1.185,67,0.738,68,1.185,69,1.185,70,1.185,71,0.015,72,0.022,73,0.015,148,1.523,159,3.072,160,3.072,169,2.148,175,1.457,192,2.148,197,2.084,199,2.65,201,4.141,202,3.148,203,2.148,204,3.914,205,3.713,206,3.072,207,3.587,208,3.072,209,3.983,210,4.334,211,3.008,212,4.334,213,3.094,214,2.596,215,2.102,216,3.713,217,3.713,218,3.713,219,1.311,220,1.076,221,3.587,222,3.914,223,2.084,224,2.084,225,5.481,226,5.481,227,4.73,228,2.596,229,2.922,230,3.914,231,4.73,232,2.596,233,2.596,234,4.73,235,2.596,236,2.596,237,1.853,238,1.853,239,1.853,240,2.596,241,3.072,242,3.072,243,1.695,244,3.072,245,2.084,246,2.335,247,3.713,248,3.713,249,2.596,250,1.853,251,3.072,252,2.596,253,2.596,254,2.335,255,2.65,256,2.148]],["title/interfaces/Game.html",[148,0.854,257,1.372]],["body/interfaces/Game.html",[3,0.285,4,0.285,9,0.236,11,0.704,20,0.704,21,1.376,23,1.212,24,0.037,34,0.445,41,0.285,71,0.02,72,0.026,73,0.02,148,1.654,158,3.754,164,2.061,211,2.951,215,2.353,220,2.178,221,3.647,257,1.52,258,2.094,259,2.755,260,3.146,261,2.225,262,3.154,263,3.154,264,3.754,265,3.754,266,3.154,267,3.307,268,2.715,269,2.655,270,3.754,271,2.225,272,4.407,273,2.012,274,2.772,275,3.647,276,3.647]],["title/components/GameComponent.html",[0,0.456,62,0.854]],["body/components/GameComponent.html",[0,0.503,1,0.349,2,0.791,3,0.096,4,0.096,5,1.856,6,0.511,7,0.511,8,0.511,9,0.079,11,0.816,12,1.757,13,0.511,14,1.324,16,0.872,18,0.872,20,0.404,21,0.596,23,0.983,24,0.038,25,1.857,26,0.511,28,1.451,31,2.767,34,0.48,35,0.131,36,0.703,37,0.384,38,0.628,41,0.096,42,0.096,44,0.628,45,1.071,49,0.511,50,0.872,51,0.872,52,0.511,53,1.348,54,0.511,55,1.049,56,0.511,57,0.349,58,0.511,59,0.596,60,1.514,61,0.872,62,0.839,63,0.349,64,0.511,65,0.318,66,0.511,67,0.318,68,0.511,69,0.511,70,0.511,71,0.011,72,0.011,73,0.007,112,0.511,113,0.798,138,0.565,139,1.035,144,1.857,148,1.442,155,2.067,158,3.137,164,2.15,166,1.823,173,2.108,175,1.657,176,0.925,177,0.798,178,0.872,179,1.58,186,0.925,187,0.925,188,1.58,189,1.201,193,0.703,194,0.703,195,1.783,196,0.925,197,1.071,199,1.363,202,0.703,204,2.067,206,1.58,207,2.067,208,1.58,209,3.519,211,1.402,213,0.798,215,2.058,219,1.823,220,1.496,223,1.402,224,1.071,229,1.071,230,0.925,237,0.798,239,3.137,241,0.925,242,0.925,243,1.514,244,0.925,245,0.628,246,0.703,254,1.201,255,0.798,261,0.964,262,2.542,263,2.608,266,1.657,267,1.857,268,2.605,271,2.594,273,0.872,274,0.703,275,1.58,277,0.925,278,1.58,279,2.067,280,2.497,281,2.497,282,0.872,283,1.909,284,2.901,285,2.989,286,1.909,287,1.909,288,1.909,289,2.443,290,1.909,291,2.108,292,2.443,293,1.909,294,3.233,295,1.118,296,2.953,297,2.953,298,3.023,299,1.58,300,1.909,301,1.909,302,1.909,303,1.909,304,1.937,305,2.281,306,1.118,307,3.611,308,2.027,309,1.909,310,2.271,311,0.964,312,1.909,313,1.118,314,1.783,315,1.909,316,1.909,317,1.363,318,2.953,319,1.909,320,3.191,321,1.118,322,1.909,323,1.909,324,1.909,325,2.443,326,4.064,327,4.064,328,1.909,329,1.118,330,1.909,331,1.909,332,1.118,333,1.909,334,1.118,335,2.953,336,1.118,337,2.443,338,1.909,339,1.118,340,1.363,341,1.909,342,1.909,343,1.118,344,1.857,345,1.909,346,1.909,347,1.363,348,1.909,349,1.118,350,2.578,351,1.118,352,2.953,353,2.953,354,1.118,355,1.909,356,0.925,357,0.925,358,1.909,359,0.925,360,0.925,361,1.118,362,1.118,363,0.925,364,0.925,365,0.798,366,2.067,367,1.118,368,1.363,369,1.118,370,0.925,371,1.118,372,2.953,373,1.118,374,1.118,375,1.118,376,1.118,377,2.108,378,1.118,379,1.909,380,1.118,381,1.118,382,1.118,383,1.118,384,1.118,385,1.58,386,1.118,387,2.067,388,0.798,389,0.925,390,1.909,391,1.118,392,1.118,393,1.118,394,1.909,395,0.798,396,1.118,397,1.118,398,1.491,399,2.497,400,1.491,401,0.925,402,1.118,403,2.067,404,1.58,405,1.58,406,0.703,407,1.909,408,1.657,409,1.118,410,1.58,411,1.118,412,1.118,413,1.118,414,1.118,415,0.798,416,2.497,417,0.703,418,1.118,419,0.925,420,1.118,421,1.118,422,1.118,423,1.118,424,0.925,425,1.118,426,1.118,427,1.118,428,1.118,429,1.118,430,1.118,431,1.118,432,0.628,433,1.118,434,1.118,435,1.118,436,1.118,437,2.497,438,1.118,439,1.118,440,1.909,441,1.118,442,1.118,443,1.909,444,1.118,445,1.118,446,1.118,447,1.909,448,1.909,449,1.118,450,0.925,451,1.118,452,1.118,453,1.909,454,1.909,455,1.909,456,1.783,457,1.909,458,2.367,459,2.497,460,1.118,461,1.118,462,1.58,463,1.909,464,3.856,465,2.067,466,1.118,467,1.58,468,1.118,469,1.118,470,1.118,471,0.703,472,0.925,473,1.118,474,1.118,475,1.118,476,1.118,477,1.118,478,1.118,479,1.118,480,1.909,481,1.118,482,0.925,483,1.118,484,1.118,485,1.118,486,0.798,487,1.118,488,1.58,489,1.118,490,1.201,491,0.925,492,2.067,493,0.925,494,1.118,495,0.925,496,1.118,497,1.118,498,1.118,499,1.118,500,2.953,501,4.647,502,1.909,503,1.118,504,1.909]],["title/modules/GameModule.html",[74,1.372,505,1.89]],["body/modules/GameModule.html",[3,0.317,4,0.317,9,0.262,24,0.037,34,0.601,35,0.433,41,0.317,42,0.317,57,1.805,59,1.805,62,1.643,71,0.022,72,0.028,73,0.022,76,1.268,77,2.381,83,2.64,84,2.967,85,1.866,86,2.325,88,2.967,89,2.153,91,2.153,95,2.638,99,2.638,148,1.05,202,2.325,364,3.058,365,3.367,505,3.887,506,3.058,507,3.058,508,3.058,509,3.245,510,3.696,511,3.367,512,2.325,513,3.696,514,3.903,515,2.638,516,2.638]],["title/modules/GameRoutingModule.html",[74,1.372,509,1.686]],["body/modules/GameRoutingModule.html",[0,0.662,3,0.374,4,0.374,9,0.31,24,0.037,34,0.565,35,0.511,41,0.374,42,0.374,62,1.485,71,0.026,72,0.031,73,0.026,76,1.496,89,1.991,91,2.386,135,3.113,136,3.73,137,2.825,138,2.202,139,1.807,140,3.113,153,2.743,365,3.113,509,2.933,517,4.361,518,3.609]],["title/injectables/GameState.html",[112,1.372,519,1.132]],["body/injectables/GameState.html",[3,0.125,4,0.125,9,0.103,11,0.308,14,1.36,20,0.308,21,0.744,23,1.048,24,0.038,26,2.209,28,1.547,34,0.44,35,0.171,37,0.5,41,0.204,42,0.204,55,1.366,71,0.009,72,0.014,73,0.009,85,1.761,112,1.088,139,2.052,144,1.9,148,1.647,164,1.938,166,1.761,178,1.756,197,1.337,211,2.639,215,1.712,219,2.442,220,2.004,223,0.818,224,0.818,238,1.04,243,0.665,245,0.818,246,0.917,261,2.977,262,2.715,263,2.837,264,1.7,265,1.7,266,2.715,267,3.043,268,0.665,269,1.761,271,1.942,273,1.756,274,0.917,282,1.593,284,2.157,285,1.9,289,1.971,291,2.947,292,1.971,298,1.696,304,2.445,305,2.445,308,0.818,310,1.498,311,1.761,314,2.947,317,2.491,340,1.7,344,0.917,347,1.7,350,2.746,388,1.04,395,1.7,398,1.525,400,1.525,406,0.917,408,0.818,415,1.04,417,3.043,471,1.498,519,0.897,520,0.917,521,1.04,522,2.5,523,2.958,524,2.382,525,2.382,526,2.382,527,2.947,528,2.947,529,1.457,530,3.54,531,1.971,532,1.457,533,1.457,534,3.846,535,1.971,536,1.457,537,1.971,538,2.887,539,1.958,540,2.491,541,1.971,542,1.971,543,1.971,544,3.043,545,1.457,546,1.971,547,1.457,548,1.971,549,1.457,550,1.457,551,2.887,552,1.971,553,1.457,554,1.971,555,1.457,556,1.971,557,1.457,558,1.971,559,1.457,560,1.971,561,1.457,562,1.457,563,1.971,564,1.457,565,1.457,566,1.971,567,1.457,568,2.159,569,2.491,570,1.457,571,1.206,572,1.206,573,1.04,574,1.206,575,1.206,576,1.206,577,0.917,578,1.206,579,1.206,580,2.491,581,2.491,582,1.337,583,1.971,584,0.917,585,3.605,586,1.971,587,1.206,588,1.206,589,3.285,590,1.971,591,2.74,592,3.416,593,1.206,594,1.206,595,1.206,596,1.206,597,1.971,598,1.206,599,1.206,600,1.971,601,1.206,602,1.971,603,1.971,604,1.971,605,1.206,606,1.971,607,1.206,608,1.206,609,1.04,610,1.206,611,2.746,612,1.971,613,1.04,614,1.7,615,1.04,616,2.887,617,2.887,618,2.195,619,1.206,620,1.206,621,2.887,622,1.206,623,1.206,624,1.7,625,1.04,626,1.206,627,1.206,628,1.206]],["title/classes/GameStateModel.html",[42,0.257,544,1.89]],["body/classes/GameStateModel.html",[3,0.157,4,0.157,9,0.13,11,0.386,14,1.239,20,0.386,21,0.891,23,0.386,24,0.038,28,0.57,34,0.482,35,0.214,37,0.627,41,0.244,42,0.244,55,1.231,71,0.011,72,0.017,73,0.011,85,1.441,112,0.834,139,2.189,144,1.795,148,1.685,164,1.859,166,1.441,178,2.177,197,1.025,211,2.769,215,1.622,223,1.025,224,1.025,238,1.304,243,0.834,245,1.025,246,1.149,261,2.994,262,2.91,263,3.013,264,2.507,265,2.507,266,2.91,267,3.103,268,1.303,269,1.441,271,2.004,273,1.603,274,1.795,282,0.834,284,1.304,285,1.149,291,2.037,298,1.602,304,1.603,308,1.025,310,1.149,311,1.441,314,2.037,317,2.037,340,1.304,344,1.149,347,1.304,350,2.833,388,1.304,395,2.037,398,1.773,400,2.004,406,1.149,408,1.025,415,1.304,417,3.103,471,2.209,519,1.075,521,1.304,522,1.511,523,2.209,527,2.037,528,2.037,530,3.103,531,1.511,535,1.511,537,1.511,538,2.361,539,1.602,540,2.037,541,1.511,542,1.511,543,1.511,544,2.708,546,1.511,548,1.511,551,2.361,552,1.511,554,1.511,556,1.511,558,1.511,560,1.511,563,1.511,566,1.511,568,1.971,569,2.507,571,1.511,572,1.511,573,1.304,574,1.511,575,1.511,576,1.511,577,1.795,578,2.361,579,2.361,580,3.258,581,3.258,582,1.971,583,2.906,584,1.149,585,3.945,586,2.361,587,1.511,588,1.511,589,3.464,590,2.361,591,2.999,592,3.776,593,1.511,594,1.511,595,1.511,596,1.511,597,2.361,598,1.511,599,1.511,600,2.361,601,1.511,602,2.361,603,2.361,604,2.361,605,1.511,606,2.361,607,1.511,608,1.511,609,1.304,610,1.511,611,3.074,612,2.361,613,1.304,614,2.037,615,1.304,616,3.284,617,3.284,618,2.497,619,1.511,620,1.511,621,3.284,622,1.511,623,1.511,624,2.037,625,1.304,626,1.511,627,1.511,628,1.511,629,1.304,630,1.827]],["title/components/HeaderComponent.html",[0,0.456,63,0.938]],["body/components/HeaderComponent.html",[0,0.782,1,0.874,2,1.623,3,0.24,4,0.24,5,1.278,6,1.278,7,1.278,8,1.278,9,0.199,11,0.592,12,2.409,13,1.278,14,1.773,16,1.788,18,1.788,20,0.592,21,1.223,23,0.828,24,0.037,25,3.078,26,1.278,27,3.241,28,1.411,30,3.516,31,2.89,32,3.241,34,0.539,35,0.328,36,1.761,37,0.96,38,1.572,39,1.278,40,1.999,41,0.24,42,0.24,49,1.278,50,1.788,51,1.788,52,1.278,53,2.234,54,1.278,55,1.011,56,1.278,57,0.874,58,1.278,59,0.874,60,1.278,61,1.788,62,0.796,63,1.528,64,1.278,65,0.796,66,1.278,67,0.796,68,1.278,69,1.278,70,1.278,71,0.016,72,0.023,73,0.016,166,1.978,172,2.317,173,1.999,189,1.761,190,2.796,229,1.572,269,1.978,273,1.278,278,3.241,279,3.738,282,1.788,304,1.788,305,2.536,359,2.317,360,2.317,368,2.796,370,2.317,377,1.999,400,1.414,490,1.761,539,2.199,631,2.317,632,4.893,633,4.517,634,3.917,635,3.225,636,4.893,637,3.809,638,2.8,639,3.917,640,3.917,641,3.917,642,3.917,643,3.917,644,2.8,645,3.917,646,2.8,647,2.8,648,2.8,649,3.917,650,2.8,651,2.8,652,2.8,653,2.8,654,3.917,655,3.917,656,3.917,657,2.8,658,2.8,659,1.999,660,2.317,661,2.317,662,2.317,663,2.317]],["title/components/HomepageComponent.html",[0,0.456,65,0.854]],["body/components/HomepageComponent.html",[0,0.816,1,0.698,2,1.38,3,0.192,4,0.192,5,1.021,6,1.021,7,1.021,8,1.021,9,0.159,11,0.473,12,2.226,13,1.021,14,1.678,16,1.52,18,1.52,20,0.473,21,1.04,23,0.932,24,0.037,25,3.219,26,1.52,28,1.472,31,3.116,34,0.499,35,0.262,36,1.407,37,0.767,38,1.255,41,0.192,42,0.192,44,1.869,45,1.869,49,1.021,50,1.52,51,1.52,52,1.021,53,2.012,54,1.021,55,1.275,56,1.021,57,0.698,58,1.021,59,0.698,60,1.021,61,1.52,62,0.635,63,0.698,64,1.021,65,1.252,66,1.021,67,0.635,68,1.021,69,1.021,70,1.021,71,0.013,72,0.02,73,0.013,112,1.021,113,1.597,138,1.129,148,1.252,166,2.225,175,1.869,177,1.597,178,1.021,182,2.84,189,2.095,190,3.147,193,1.407,194,2.095,213,1.597,219,2.225,220,1.38,229,2.233,239,2.377,250,1.597,251,3.647,256,1.851,262,2.872,266,2.872,270,3.364,273,1.021,282,1.52,285,2.095,294,2.377,298,1.869,304,1.816,305,2.233,311,2.225,344,2.095,363,1.851,366,3.292,368,1.597,377,2.84,400,1.129,450,1.851,456,2.377,458,3.147,462,2.756,465,1.851,467,1.851,486,1.597,488,1.851,490,1.407,492,2.756,493,2.756,527,2.84,528,2.84,582,1.255,659,3.147,660,1.851,661,1.851,662,2.756,663,2.756,664,1.851,665,3.978,666,3.33,667,4.407,668,3.33,669,2.236,670,5.62,671,3.33,672,3.33,673,2.236,674,2.236,675,3.33,676,3.33,677,2.756,678,3.33,679,2.236,680,4.407,681,4.407,682,3.33,683,2.236,684,2.236,685,2.236,686,2.236,687,3.33,688,3.33,689,3.33,690,1.851,691,2.236,692,2.236,693,1.851,694,1.851,695,2.236,696,2.236,697,2.236,698,1.851,699,3.33,700,2.236,701,2.236,702,2.236,703,2.236,704,2.236,705,3.978,706,3.33,707,2.236,708,4.407,709,2.236]],["title/modules/HomepageModule.html",[74,1.372,710,1.89]],["body/modules/HomepageModule.html",[3,0.332,4,0.332,9,0.275,24,0.037,34,0.6,35,0.454,41,0.332,42,0.332,65,1.663,71,0.023,72,0.029,73,0.023,76,1.33,77,2.454,83,2.672,84,3.058,85,1.957,86,2.438,88,3.058,89,2.219,91,2.219,95,2.767,99,2.767,270,2.767,511,3.47,512,2.438,514,4.022,515,2.767,516,2.767,710,3.838,711,3.208,712,3.208,713,3.208,714,3.285,715,3.876,716,3.208,717,4.861,718,3.208]],["title/modules/HomepageRoutingModule.html",[74,1.372,714,1.686]],["body/modules/HomepageRoutingModule.html",[0,0.662,3,0.374,4,0.374,9,0.31,24,0.037,34,0.565,35,0.511,41,0.374,42,0.374,65,1.485,71,0.026,72,0.031,73,0.026,76,1.496,89,1.991,91,2.386,135,3.113,136,3.73,137,2.825,138,2.202,139,1.807,140,3.113,153,2.743,518,3.609,714,2.933,716,3.609,719,4.361]],["title/modules/MaterialModule.html",[74,1.372,83,1.372]],["body/modules/MaterialModule.html",[3,0.263,4,0.263,9,0.218,24,0.035,34,0.642,35,0.36,41,0.263,42,0.263,71,0.018,72,0.025,73,0.018,76,1.053,83,1.906,88,1.932,89,1.402,91,1.906,153,1.932,237,2.192,356,2.541,357,3.455,511,2.98,512,1.932,720,3.071,721,4.175,722,3.071,723,4.175,724,3.071,725,4.175,726,3.071,727,3.071,728,4.175,729,3.071,730,4.175,731,3.071,732,4.175,733,3.071,734,4.175,735,3.071,736,4.175,737,3.071,738,4.175,739,3.071,740,4.175,741,3.071,742,4.175,743,3.071,744,3.071,745,4.175,746,4.175,747,4.175,748,4.175,749,4.175,750,3.071,751,4.175,752,3.071,753,4.175,754,3.071,755,4.175,756,3.071,757,4.175,758,3.071,759,4.175,760,4.175,761,3.071,762,4.175,763,3.071,764,4.175,765,3.071,766,3.071,767,4.175,768,3.071,769,4.175,770,3.071,771,4.175,772,3.071,773,4.175,774,3.071,775,4.175,776,4.175,777,3.071,778,4.175,779,3.071,780,4.175,781,4.175,782,4.175,783,3.071,784,4.175,785,3.071,786,4.175,787,3.071,788,4.175,789,3.071,790,4.175,791,3.071,792,4.175,793,3.071,794,4.175,795,4.175,796,3.071,797,4.175,798,3.071,799,4.175,800,3.071,801,4.175,802,3.071,803,4.175,804,3.071,805,4.175,806,3.071,807,4.175,808,3.071]],["title/components/NotFoundComponent.html",[0,0.456,67,0.854]],["body/components/NotFoundComponent.html",[0,0.839,1,1.074,2,1.866,3,0.295,4,0.295,5,1.571,6,1.571,7,1.571,8,1.571,9,0.244,11,0.728,12,2.456,13,1.571,14,1.851,16,2.056,18,2.056,24,0.037,34,0.348,35,0.403,41,0.295,42,0.295,44,1.931,49,1.571,50,2.056,51,2.056,52,1.571,53,2.432,54,1.571,55,1.163,56,1.571,57,1.074,58,1.571,59,1.074,60,1.571,61,2.056,62,0.978,63,1.074,64,1.571,65,0.978,66,1.571,67,1.513,68,2.432,69,1.571,70,1.571,71,0.02,72,0.026,73,0.02,114,2.164,151,3.727,175,1.931,182,2.456,193,2.164,229,1.931,243,2.056,250,2.456,254,2.164,255,2.456,456,3.215,458,3.215,486,2.456,490,2.833,491,2.847,659,3.215,677,3.727,690,2.847,693,2.847,694,2.847,698,2.847,809,2.847,810,2.847,811,5.02,812,4.503,813,4.503,814,3.44,815,4.503,816,4.503,817,3.44,818,3.44,819,3.44,820,3.44,821,3.44,822,3.44,823,3.44,824,3.44]],["title/interfaces/Pawn.html",[164,1.132,257,1.372]],["body/interfaces/Pawn.html",[3,0.328,4,0.328,9,0.272,11,0.809,20,0.809,21,1.505,23,1.116,24,0.037,34,0.386,41,0.328,71,0.022,72,0.028,73,0.022,164,2.319,195,3.442,215,2.308,220,1.997,257,1.747,258,2.406,260,3.442,268,2.663,271,2.434,320,4.826,325,4.826,432,2.706,825,3.165,826,5.542,827,4.821,828,4.821,829,4.821,830,5.542,831,2.406]],["title/interfaces/Player.html",[215,1.132,257,1.372]],["body/interfaces/Player.html",[3,0.356,4,0.356,9,0.295,11,0.878,20,0.878,21,1.584,23,1.073,24,0.037,41,0.356,55,1.536,71,0.024,72,0.03,73,0.024,178,2.316,215,2.334,222,4.533,257,1.896,258,2.613,260,2.965,268,2.501,273,2.316,276,4.198,400,2.561,580,4.249,582,2.848,832,3.437,833,5.073]],["title/injectables/ThemeState.html",[39,1.372,519,1.132]],["body/injectables/ThemeState.html",[3,0.296,4,0.296,9,0.245,11,0.731,14,1.571,20,0.731,23,0.955,24,0.038,26,2.062,28,1.41,30,3.732,34,0.508,35,0.405,37,1.185,39,2.062,41,0.387,42,0.387,55,1.298,71,0.02,72,0.027,73,0.02,139,1.431,219,2.28,220,1.871,261,3.022,269,1.744,282,2.062,304,2.062,305,1.939,308,1.939,311,2.28,398,1.744,432,1.939,519,1.701,520,2.173,523,3.164,530,3.355,577,2.173,584,2.173,589,2.84,591,2.173,635,3.808,637,3.591,831,2.84,834,2.466,835,4.515,836,3.736,837,3.355,838,3.454,839,3.736,840,3.223,841,3.454,842,3.736,843,3.454,844,2.858,845,3.736,846,2.858]],["title/classes/ThemeStateModel.html",[42,0.257,837,1.89]],["body/classes/ThemeStateModel.html",[3,0.313,4,0.313,9,0.26,11,0.773,14,1.463,20,0.773,21,1.463,23,0.773,24,0.038,28,1.142,30,3.734,34,0.522,35,0.428,37,1.254,39,1.67,41,0.401,42,0.401,55,0.944,71,0.021,72,0.028,73,0.021,139,1.515,223,2.053,224,2.053,261,2.997,269,2.365,308,2.053,311,1.846,398,1.846,432,2.63,519,1.765,523,2.3,530,2.947,577,2.947,584,2.3,589,2.947,591,2.3,629,2.611,635,4.185,637,2.611,831,3.252,834,2.611,836,3.026,837,3.252,839,3.026,840,3.344,842,3.026,844,3.026,845,3.877,846,3.026,847,3.657]],["title/injectables/VictoryCheckService.html",[519,1.132,568,1.686]],["body/injectables/VictoryCheckService.html",[3,0.152,4,0.152,9,0.126,11,0.375,15,1.468,20,0.898,23,0.826,24,0.038,28,1.22,34,0.348,35,0.208,41,0.152,42,0.152,55,1.008,71,0.01,72,0.016,73,0.01,148,1.6,164,2.037,167,3.233,170,1.468,178,2.498,194,2.457,209,3.805,219,1.972,220,1.619,243,1.784,254,2.457,263,2.886,268,2.348,271,2.466,282,1.784,294,1.991,298,1.566,299,3.233,304,1.784,310,3.073,337,4.41,385,3.233,387,3.233,398,1.972,401,3.233,403,2.308,404,4.41,405,2.308,406,1.116,408,1.566,410,2.852,417,3.442,419,2.308,424,2.852,432,2.193,482,3.233,495,3.233,519,1.051,520,1.116,539,3.185,540,3.671,568,1.566,573,1.267,581,2.789,609,1.267,611,3.805,613,1.991,614,2.789,615,1.991,618,1.116,624,2.789,625,1.991,831,2.457,840,3.805,848,3.514,849,1.468,850,2.789,851,2.789,852,2.789,853,2.789,854,2.789,855,2.789,856,1.774,857,3.906,858,2.789,859,1.774,860,2.789,861,3.906,862,1.774,863,2.789,864,2.789,865,1.774,866,2.789,867,1.774,868,3.906,869,2.789,870,2.789,871,2.789,872,2.789,873,2.789,874,3.906,875,3.906,876,3.906,877,3.906,878,3.906,879,1.774,880,1.774,881,1.774,882,3.906,883,5.329,884,1.774,885,3.906,886,4.508,887,3.446,888,3.906,889,3.233,890,3.906,891,1.774,892,2.789,893,1.774,894,3.446,895,3.446,896,1.774,897,1.774,898,3.446,899,1.774,900,2.789,901,3.906,902,2.789,903,2.789,904,2.789,905,2.789]],["title/coverage.html",[906,3.403]],["body/coverage.html",[0,0.898,1,1.189,9,0.27,10,3.152,23,0.806,24,0.037,39,1.739,42,0.412,45,3.492,57,1.189,59,1.189,62,1.082,63,1.189,65,1.082,67,1.082,71,0.022,72,0.028,73,0.022,112,1.739,114,2.396,148,1.082,154,3.152,164,1.435,201,3.152,202,2.396,203,3.152,215,1.435,257,2.405,259,3.152,277,3.152,519,1.985,521,3.432,544,2.396,568,2.138,569,2.719,631,3.152,664,3.152,809,3.152,810,3.152,825,3.152,832,3.152,834,3.432,837,2.396,848,3.152,849,3.152,906,3.152,907,3.152,908,3.809,909,3.809,910,5.533,911,5.268,912,3.809,913,3.809,914,3.809,915,3.809,916,4.807,917,3.809,918,3.809,919,3.809,920,3.809]],["title/dependencies.html",[77,1.826,921,2.503]],["body/dependencies.html",[24,0.037,35,0.495,37,1.449,38,2.371,71,0.025,72,0.03,73,0.025,77,2.133,93,4.241,94,3.659,101,3.495,102,3.495,108,3.495,109,3.495,138,2.133,512,2.657,515,3.015,516,3.015,718,3.495,922,4.223,923,6.145,924,4.223,925,5.125,926,4.223,927,4.223,928,4.223,929,4.223,930,4.223,931,5.125,932,4.223,933,4.223,934,4.223,935,4.223,936,4.223]],["title/index.html",[20,0.529,937,2.503,938,2.503]],["body/index.html",[24,0.033,71,0.026,72,0.031,73,0.026,243,2.011,245,3.338,389,4.35,408,2.951,539,2.951,618,3.307,907,3.645,939,4.405,940,4.405,941,4.405,942,4.405,943,5.256,944,5.256,945,5.618,946,5.256,947,5.256,948,5.256,949,4.405,950,4.405,951,4.405,952,4.405,953,4.405,954,4.405,955,4.405,956,4.405,957,4.405]],["title/modules.html",[76,1.411]],["body/modules.html",[24,0.031,71,0.027,72,0.031,73,0.027,75,2.843,76,1.55,82,2.537,83,2.063,94,4.055,505,2.843,509,2.537,710,2.843,714,2.537,958,5.679,959,5.679,960,6.129,961,5.868,962,5.868]],["title/overview.html",[963,3.403]],["body/overview.html",[1,1.837,2,1.541,24,0.037,57,1.627,59,1.627,62,1.48,63,1.627,65,1.48,67,1.48,71,0.022,72,0.028,73,0.022,75,3.875,76,1.276,77,2.391,78,3.078,79,3.078,80,3.078,81,3.078,82,2.925,83,2.586,84,2.979,85,1.878,86,2.34,137,1.878,258,2.34,471,2.979,472,3.078,505,3.857,506,3.078,507,3.078,508,3.078,509,2.925,520,2.34,582,2.088,629,2.655,710,3.747,711,3.078,712,3.078,713,3.078,714,2.925,889,3.919,963,3.078]],["title/routes.html",[137,2.076]],["body/routes.html",[24,0.033,71,0.029,72,0.033,73,0.029,137,2.481]]],"invertedIndex":[["",{"_index":24,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/CaseComponent.html":{},"components/EndGameComponent.html":{},"interfaces/Game.html":{},"components/GameComponent.html":{},"modules/GameModule.html":{},"modules/GameRoutingModule.html":{},"injectables/GameState.html":{},"classes/GameStateModel.html":{},"components/HeaderComponent.html":{},"components/HomepageComponent.html":{},"modules/HomepageModule.html":{},"modules/HomepageRoutingModule.html":{},"modules/MaterialModule.html":{},"components/NotFoundComponent.html":{},"interfaces/Pawn.html":{},"interfaces/Player.html":{},"injectables/ThemeState.html":{},"classes/ThemeStateModel.html":{},"injectables/VictoryCheckService.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"routes.html":{}}}],["0",{"_index":400,"title":{},"body":{"components/GameComponent.html":{},"injectables/GameState.html":{},"classes/GameStateModel.html":{},"components/HeaderComponent.html":{},"components/HomepageComponent.html":{},"interfaces/Player.html":{}}}],["0.11.4",{"_index":936,"title":{},"body":{"dependencies.html":{}}}],["0px",{"_index":485,"title":{},"body":{"components/GameComponent.html":{}}}],["1",{"_index":178,"title":{},"body":{"components/CaseComponent.html":{},"components/GameComponent.html":{},"injectables/GameState.html":{},"classes/GameStateModel.html":{},"components/HomepageComponent.html":{},"interfaces/Player.html":{},"injectables/VictoryCheckService.html":{}}}],["1.2rem",{"_index":697,"title":{},"body":{"components/HomepageComponent.html":{}}}],["1/1",{"_index":917,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":450,"title":{},"body":{"components/GameComponent.html":{},"components/HomepageComponent.html":{}}}],["100",{"_index":45,"title":{},"body":{"components/AppComponent.html":{},"components/CaseComponent.html":{},"components/GameComponent.html":{},"components/HomepageComponent.html":{},"coverage.html":{}}}],["100px",{"_index":822,"title":{},"body":{"components/NotFoundComponent.html":{}}}],["10px",{"_index":501,"title":{},"body":{"components/GameComponent.html":{}}}],["11",{"_index":474,"title":{},"body":{"components/GameComponent.html":{}}}],["12.0.0",{"_index":927,"title":{},"body":{"dependencies.html":{}}}],["12.1.0",{"_index":923,"title":{},"body":{"dependencies.html":{}}}],["12.1.3",{"_index":925,"title":{},"body":{"dependencies.html":{}}}],["12/12",{"_index":918,"title":{},"body":{"coverage.html":{}}}],["12px",{"_index":466,"title":{},"body":{"components/GameComponent.html":{}}}],["13",{"_index":476,"title":{},"body":{"components/GameComponent.html":{}}}],["13/13",{"_index":912,"title":{},"body":{"coverage.html":{}}}],["140",{"_index":452,"title":{},"body":{"components/GameComponent.html":{}}}],["15",{"_index":478,"title":{},"body":{"components/GameComponent.html":{}}}],["15s",{"_index":497,"title":{},"body":{"components/GameComponent.html":{}}}],["1]?.x",{"_index":898,"title":{},"body":{"injectables/VictoryCheckService.html":{}}}],["1]?.y",{"_index":887,"title":{},"body":{"injectables/VictoryCheckService.html":{}}}],["1fr",{"_index":464,"title":{},"body":{"components/GameComponent.html":{}}}],["1px",{"_index":185,"title":{},"body":{"components/CaseComponent.html":{}}}],["2",{"_index":582,"title":{},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{},"components/HomepageComponent.html":{},"interfaces/Player.html":{},"overview.html":{}}}],["2.2.0",{"_index":934,"title":{},"body":{"dependencies.html":{}}}],["2/2",{"_index":910,"title":{},"body":{"coverage.html":{}}}],["20",{"_index":701,"title":{},"body":{"components/HomepageComponent.html":{}}}],["20px",{"_index":462,"title":{},"body":{"components/GameComponent.html":{},"components/HomepageComponent.html":{}}}],["23px",{"_index":468,"title":{},"body":{"components/GameComponent.html":{}}}],["2867b2",{"_index":187,"title":{},"body":{"components/CaseComponent.html":{},"components/GameComponent.html":{}}}],["2px",{"_index":190,"title":{},"body":{"components/CaseComponent.html":{},"components/HeaderComponent.html":{},"components/HomepageComponent.html":{}}}],["2rem",{"_index":693,"title":{},"body":{"components/HomepageComponent.html":{},"components/NotFoundComponent.html":{}}}],["3",{"_index":889,"title":{},"body":{"injectables/VictoryCheckService.html":{},"overview.html":{}}}],["3.7.2",{"_index":931,"title":{},"body":{"dependencies.html":{}}}],["3/3",{"_index":916,"title":{},"body":{"coverage.html":{}}}],["30",{"_index":126,"title":{},"body":{"modules/AppModule.html":{}}}],["30px",{"_index":486,"title":{},"body":{"components/GameComponent.html":{},"components/HomepageComponent.html":{},"components/NotFoundComponent.html":{}}}],["3rem",{"_index":691,"title":{},"body":{"components/HomepageComponent.html":{}}}],["4",{"_index":539,"title":{},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{},"components/HeaderComponent.html":{},"injectables/VictoryCheckService.html":{},"index.html":{}}}],["4/4",{"_index":914,"title":{},"body":{"coverage.html":{}}}],["404",{"_index":151,"title":{},"body":{"modules/AppRoutingModule.html":{},"components/NotFoundComponent.html":{}}}],["40vh",{"_index":820,"title":{},"body":{"components/NotFoundComponent.html":{}}}],["5",{"_index":469,"title":{},"body":{"components/GameComponent.html":{}}}],["5/5",{"_index":911,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":492,"title":{},"body":{"components/GameComponent.html":{},"components/HomepageComponent.html":{}}}],["50px",{"_index":491,"title":{},"body":{"components/GameComponent.html":{},"components/NotFoundComponent.html":{}}}],["5px",{"_index":698,"title":{},"body":{"components/HomepageComponent.html":{},"components/NotFoundComponent.html":{}}}],["6",{"_index":583,"title":{},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{}}}],["6.6.0",{"_index":932,"title":{},"body":{"dependencies.html":{}}}],["6/6",{"_index":913,"title":{},"body":{"coverage.html":{}}}],["6585f.web.app",{"_index":949,"title":{},"body":{"index.html":{}}}],["6b641a",{"_index":504,"title":{},"body":{"components/GameComponent.html":{}}}],["6px",{"_index":662,"title":{},"body":{"components/HeaderComponent.html":{},"components/HomepageComponent.html":{}}}],["7",{"_index":471,"title":{},"body":{"components/GameComponent.html":{},"injectables/GameState.html":{},"classes/GameStateModel.html":{},"overview.html":{}}}],["72211d",{"_index":502,"title":{},"body":{"components/GameComponent.html":{}}}],["8/8",{"_index":915,"title":{},"body":{"coverage.html":{}}}],["80",{"_index":250,"title":{},"body":{"components/EndGameComponent.html":{},"components/HomepageComponent.html":{},"components/NotFoundComponent.html":{}}}],["84px",{"_index":48,"title":{},"body":{"components/AppComponent.html":{}}}],["88vh",{"_index":457,"title":{},"body":{"components/GameComponent.html":{}}}],["9",{"_index":472,"title":{},"body":{"components/GameComponent.html":{},"overview.html":{}}}],["90",{"_index":488,"title":{},"body":{"components/GameComponent.html":{},"components/HomepageComponent.html":{}}}],["999",{"_index":663,"title":{},"body":{"components/HeaderComponent.html":{},"components/HomepageComponent.html":{}}}],["__action",{"_index":821,"title":{},"body":{"components/NotFoundComponent.html":{}}}],["__container",{"_index":46,"title":{},"body":{"components/AppComponent.html":{}}}],["__grid",{"_index":460,"title":{},"body":{"components/GameComponent.html":{}}}],["__image",{"_index":694,"title":{},"body":{"components/HomepageComponent.html":{},"components/NotFoundComponent.html":{}}}],["__play",{"_index":695,"title":{},"body":{"components/HomepageComponent.html":{}}}],["__settings",{"_index":699,"title":{},"body":{"components/HomepageComponent.html":{}}}],["__title",{"_index":690,"title":{},"body":{"components/HomepageComponent.html":{},"components/NotFoundComponent.html":{}}}],["_snack",{"_index":369,"title":{},"body":{"components/GameComponent.html":{}}}],["a.x",{"_index":894,"title":{},"body":{"injectables/VictoryCheckService.html":{}}}],["a.y",{"_index":880,"title":{},"body":{"injectables/VictoryCheckService.html":{}}}],["a11ymodule",{"_index":721,"title":{},"body":{"modules/MaterialModule.html":{}}}],["absolute",{"_index":489,"title":{},"body":{"components/GameComponent.html":{}}}],["action",{"_index":308,"title":{},"body":{"components/GameComponent.html":{},"injectables/GameState.html":{},"classes/GameStateModel.html":{},"injectables/ThemeState.html":{},"classes/ThemeStateModel.html":{}}}],["action(cancellastmove",{"_index":531,"title":{},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{}}}],["action(checkwinner",{"_index":535,"title":{},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{}}}],["action(gameinit",{"_index":552,"title":{},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{}}}],["action(gamereset",{"_index":560,"title":{},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{}}}],["action(playpawn",{"_index":556,"title":{},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{}}}],["action(setcolumns",{"_index":563,"title":{},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{}}}],["action(setrows",{"_index":566,"title":{},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{}}}],["action(toogletheme",{"_index":842,"title":{},"body":{"injectables/ThemeState.html":{},"classes/ThemeStateModel.html":{}}}],["actual",{"_index":353,"title":{},"body":{"components/GameComponent.html":{}}}],["actual_component",{"_index":70,"title":{},"body":{"components/AppComponent.html":{},"components/CaseComponent.html":{},"components/EndGameComponent.html":{},"components/GameComponent.html":{},"components/HeaderComponent.html":{},"components/HomepageComponent.html":{},"components/NotFoundComponent.html":{}}}],["add",{"_index":558,"title":{},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{}}}],["align",{"_index":254,"title":{},"body":{"components/EndGameComponent.html":{},"components/GameComponent.html":{},"components/NotFoundComponent.html":{},"injectables/VictoryCheckService.html":{}}}],["aligned",{"_index":540,"title":{},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{},"injectables/VictoryCheckService.html":{}}}],["alignedpawns",{"_index":883,"title":{},"body":{"injectables/VictoryCheckService.html":{}}}],["alignés",{"_index":882,"title":{},"body":{"injectables/VictoryCheckService.html":{}}}],["already",{"_index":608,"title":{},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{}}}],["angular/animations",{"_index":922,"title":{},"body":{"dependencies.html":{}}}],["angular/cdk",{"_index":924,"title":{},"body":{"dependencies.html":{}}}],["angular/cdk/a11y",{"_index":722,"title":{},"body":{"modules/MaterialModule.html":{}}}],["angular/cdk/clipboard",{"_index":724,"title":{},"body":{"modules/MaterialModule.html":{}}}],["angular/cdk/drag",{"_index":726,"title":{},"body":{"modules/MaterialModule.html":{}}}],["angular/cdk/overlay",{"_index":808,"title":{},"body":{"modules/MaterialModule.html":{}}}],["angular/cdk/portal",{"_index":729,"title":{},"body":{"modules/MaterialModule.html":{}}}],["angular/cdk/scrolling",{"_index":731,"title":{},"body":{"modules/MaterialModule.html":{}}}],["angular/cdk/stepper",{"_index":733,"title":{},"body":{"modules/MaterialModule.html":{}}}],["angular/cdk/table",{"_index":735,"title":{},"body":{"modules/MaterialModule.html":{}}}],["angular/cdk/tree",{"_index":737,"title":{},"body":{"modules/MaterialModule.html":{}}}],["angular/common",{"_index":512,"title":{},"body":{"modules/GameModule.html":{},"modules/HomepageModule.html":{},"modules/MaterialModule.html":{},"dependencies.html":{}}}],["angular/compiler",{"_index":926,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":35,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/CaseComponent.html":{},"components/EndGameComponent.html":{},"components/GameComponent.html":{},"modules/GameModule.html":{},"modules/GameRoutingModule.html":{},"injectables/GameState.html":{},"classes/GameStateModel.html":{},"components/HeaderComponent.html":{},"components/HomepageComponent.html":{},"modules/HomepageModule.html":{},"modules/HomepageRoutingModule.html":{},"modules/MaterialModule.html":{},"components/NotFoundComponent.html":{},"injectables/ThemeState.html":{},"classes/ThemeStateModel.html":{},"injectables/VictoryCheckService.html":{},"dependencies.html":{}}}],["angular/flex",{"_index":515,"title":{},"body":{"modules/GameModule.html":{},"modules/HomepageModule.html":{},"dependencies.html":{}}}],["angular/forms",{"_index":718,"title":{},"body":{"modules/HomepageModule.html":{},"dependencies.html":{}}}],["angular/material",{"_index":929,"title":{},"body":{"dependencies.html":{}}}],["angular/material/autocomplete",{"_index":739,"title":{},"body":{"modules/MaterialModule.html":{}}}],["angular/material/badge",{"_index":741,"title":{},"body":{"modules/MaterialModule.html":{}}}],["angular/material/bottom",{"_index":743,"title":{},"body":{"modules/MaterialModule.html":{}}}],["angular/material/button",{"_index":746,"title":{},"body":{"modules/MaterialModule.html":{}}}],["angular/material/card",{"_index":750,"title":{},"body":{"modules/MaterialModule.html":{}}}],["angular/material/checkbox",{"_index":752,"title":{},"body":{"modules/MaterialModule.html":{}}}],["angular/material/chips",{"_index":754,"title":{},"body":{"modules/MaterialModule.html":{}}}],["angular/material/core",{"_index":777,"title":{},"body":{"modules/MaterialModule.html":{}}}],["angular/material/datepicker",{"_index":758,"title":{},"body":{"modules/MaterialModule.html":{}}}],["angular/material/dialog",{"_index":237,"title":{},"body":{"components/EndGameComponent.html":{},"components/GameComponent.html":{},"modules/MaterialModule.html":{}}}],["angular/material/divider",{"_index":761,"title":{},"body":{"modules/MaterialModule.html":{}}}],["angular/material/expansion",{"_index":763,"title":{},"body":{"modules/MaterialModule.html":{}}}],["angular/material/grid",{"_index":765,"title":{},"body":{"modules/MaterialModule.html":{}}}],["angular/material/icon",{"_index":768,"title":{},"body":{"modules/MaterialModule.html":{}}}],["angular/material/input",{"_index":770,"title":{},"body":{"modules/MaterialModule.html":{}}}],["angular/material/list",{"_index":772,"title":{},"body":{"modules/MaterialModule.html":{}}}],["angular/material/menu",{"_index":774,"title":{},"body":{"modules/MaterialModule.html":{}}}],["angular/material/paginator",{"_index":779,"title":{},"body":{"modules/MaterialModule.html":{}}}],["angular/material/progress",{"_index":781,"title":{},"body":{"modules/MaterialModule.html":{}}}],["angular/material/radio",{"_index":785,"title":{},"body":{"modules/MaterialModule.html":{}}}],["angular/material/select",{"_index":787,"title":{},"body":{"modules/MaterialModule.html":{}}}],["angular/material/sidenav",{"_index":789,"title":{},"body":{"modules/MaterialModule.html":{}}}],["angular/material/slide",{"_index":793,"title":{},"body":{"modules/MaterialModule.html":{}}}],["angular/material/slider",{"_index":791,"title":{},"body":{"modules/MaterialModule.html":{}}}],["angular/material/snack",{"_index":356,"title":{},"body":{"components/GameComponent.html":{},"modules/MaterialModule.html":{}}}],["angular/material/sort",{"_index":796,"title":{},"body":{"modules/MaterialModule.html":{}}}],["angular/material/stepper",{"_index":756,"title":{},"body":{"modules/MaterialModule.html":{}}}],["angular/material/table",{"_index":798,"title":{},"body":{"modules/MaterialModule.html":{}}}],["angular/material/tabs",{"_index":800,"title":{},"body":{"modules/MaterialModule.html":{}}}],["angular/material/toolbar",{"_index":802,"title":{},"body":{"modules/MaterialModule.html":{}}}],["angular/material/tooltip",{"_index":804,"title":{},"body":{"modules/MaterialModule.html":{}}}],["angular/material/tree",{"_index":806,"title":{},"body":{"modules/MaterialModule.html":{}}}],["angular/platform",{"_index":93,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["angular/router",{"_index":138,"title":{},"body":{"modules/AppRoutingModule.html":{},"components/GameComponent.html":{},"modules/GameRoutingModule.html":{},"components/HomepageComponent.html":{},"modules/HomepageRoutingModule.html":{},"dependencies.html":{}}}],["angular/service",{"_index":101,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["animate",{"_index":296,"title":{},"body":{"components/GameComponent.html":{}}}],["animatefallingpawn",{"_index":283,"title":{},"body":{"components/GameComponent.html":{}}}],["animatefallingpawn(column",{"_index":293,"title":{},"body":{"components/GameComponent.html":{}}}],["animation",{"_index":301,"title":{},"body":{"components/GameComponent.html":{}}}],["app",{"_index":12,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/CaseComponent.html":{},"components/EndGameComponent.html":{},"components/GameComponent.html":{},"components/HeaderComponent.html":{},"components/HomepageComponent.html":{},"components/NotFoundComponent.html":{}}}],["app.component",{"_index":96,"title":{},"body":{"modules/AppModule.html":{}}}],["app.component.html",{"_index":19,"title":{},"body":{"components/AppComponent.html":{}}}],["app.component.scss",{"_index":17,"title":{},"body":{"components/AppComponent.html":{}}}],["appartiennent",{"_index":871,"title":{},"body":{"injectables/VictoryCheckService.html":{}}}],["appcomponent",{"_index":1,"title":{"components/AppComponent.html":{}},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/CaseComponent.html":{},"components/EndGameComponent.html":{},"components/GameComponent.html":{},"components/HeaderComponent.html":{},"components/HomepageComponent.html":{},"components/NotFoundComponent.html":{},"coverage.html":{},"overview.html":{}}}],["applied",{"_index":33,"title":{},"body":{"components/AppComponent.html":{}}}],["applies",{"_index":639,"title":{},"body":{"components/HeaderComponent.html":{}}}],["applydarktheme",{"_index":636,"title":{},"body":{"components/HeaderComponent.html":{}}}],["appmodule",{"_index":75,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["approutingmodule",{"_index":82,"title":{"modules/AppRoutingModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules.html":{},"overview.html":{}}}],["array",{"_index":350,"title":{},"body":{"components/GameComponent.html":{},"injectables/GameState.html":{},"classes/GameStateModel.html":{}}}],["array(g!.columns",{"_index":374,"title":{},"body":{"components/GameComponent.html":{}}}],["array(g!.rows",{"_index":376,"title":{},"body":{"components/GameComponent.html":{}}}],["async)!.turn!.name",{"_index":453,"title":{},"body":{"components/GameComponent.html":{}}}],["au",{"_index":872,"title":{},"body":{"injectables/VictoryCheckService.html":{}}}],["aucun",{"_index":601,"title":{},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{}}}],["aussi",{"_index":956,"title":{},"body":{"index.html":{}}}],["auto",{"_index":459,"title":{},"body":{"components/GameComponent.html":{}}}],["aux",{"_index":420,"title":{},"body":{"components/GameComponent.html":{}}}],["available",{"_index":962,"title":{},"body":{"modules.html":{}}}],["avec",{"_index":952,"title":{},"body":{"index.html":{}}}],["b.x",{"_index":895,"title":{},"body":{"injectables/VictoryCheckService.html":{}}}],["b.y",{"_index":881,"title":{},"body":{"injectables/VictoryCheckService.html":{}}}],["background",{"_index":179,"title":{},"body":{"components/CaseComponent.html":{},"components/GameComponent.html":{}}}],["bar",{"_index":357,"title":{},"body":{"components/GameComponent.html":{},"modules/MaterialModule.html":{}}}],["before",{"_index":191,"title":{},"body":{"components/CaseComponent.html":{}}}],["began",{"_index":272,"title":{},"body":{"interfaces/Game.html":{}}}],["beta.34",{"_index":928,"title":{},"body":{"dependencies.html":{}}}],["block",{"_index":196,"title":{},"body":{"components/CaseComponent.html":{},"components/GameComponent.html":{}}}],["body",{"_index":640,"title":{},"body":{"components/HeaderComponent.html":{}}}],["bold",{"_index":819,"title":{},"body":{"components/NotFoundComponent.html":{}}}],["boolean",{"_index":840,"title":{},"body":{"injectables/ThemeState.html":{},"classes/ThemeStateModel.html":{},"injectables/VictoryCheckService.html":{}}}],["bootstrap",{"_index":90,"title":{},"body":{"modules/AppModule.html":{}}}],["border",{"_index":465,"title":{},"body":{"components/GameComponent.html":{},"components/HomepageComponent.html":{}}}],["bottom",{"_index":194,"title":{},"body":{"components/CaseComponent.html":{},"components/GameComponent.html":{},"components/HomepageComponent.html":{},"injectables/VictoryCheckService.html":{}}}],["box",{"_index":188,"title":{},"body":{"components/CaseComponent.html":{},"components/GameComponent.html":{}}}],["break",{"_index":437,"title":{},"body":{"components/GameComponent.html":{}}}],["brightness_5",{"_index":655,"title":{},"body":{"components/HeaderComponent.html":{}}}],["browse",{"_index":960,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":94,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{},"modules.html":{}}}],["browser/animations",{"_index":98,"title":{},"body":{"modules/AppModule.html":{}}}],["browseranimationsmodule",{"_index":97,"title":{},"body":{"modules/AppModule.html":{}}}],["browsermodule",{"_index":92,"title":{},"body":{"modules/AppModule.html":{}}}],["button",{"_index":696,"title":{},"body":{"components/HomepageComponent.html":{}}}],["calc(100vh",{"_index":47,"title":{},"body":{"components/AppComponent.html":{}}}],["cancellastmove",{"_index":284,"title":{},"body":{"components/GameComponent.html":{},"injectables/GameState.html":{},"classes/GameStateModel.html":{}}}],["cancellastmove(undefined",{"_index":529,"title":{},"body":{"injectables/GameState.html":{}}}],["cancellastmove({getstate",{"_index":596,"title":{},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{}}}],["case",{"_index":155,"title":{},"body":{"components/CaseComponent.html":{},"components/GameComponent.html":{}}}],["case'},{'name",{"_index":58,"title":{},"body":{"components/AppComponent.html":{},"components/CaseComponent.html":{},"components/EndGameComponent.html":{},"components/GameComponent.html":{},"components/HeaderComponent.html":{},"components/HomepageComponent.html":{},"components/NotFoundComponent.html":{}}}],["case.component.html",{"_index":162,"title":{},"body":{"components/CaseComponent.html":{}}}],["case.component.scss",{"_index":161,"title":{},"body":{"components/CaseComponent.html":{}}}],["case.png",{"_index":181,"title":{},"body":{"components/CaseComponent.html":{}}}],["case/case.component",{"_index":513,"title":{},"body":{"modules/GameModule.html":{}}}],["case__animated",{"_index":487,"title":{},"body":{"components/GameComponent.html":{}}}],["casecomponent",{"_index":57,"title":{"components/CaseComponent.html":{}},"body":{"components/AppComponent.html":{},"components/CaseComponent.html":{},"components/EndGameComponent.html":{},"components/GameComponent.html":{},"modules/GameModule.html":{},"components/HeaderComponent.html":{},"components/HomepageComponent.html":{},"components/NotFoundComponent.html":{},"coverage.html":{},"overview.html":{}}}],["causes",{"_index":316,"title":{},"body":{"components/GameComponent.html":{}}}],["cdksteppermodule",{"_index":732,"title":{},"body":{"modules/MaterialModule.html":{}}}],["cdktablemodule",{"_index":734,"title":{},"body":{"modules/MaterialModule.html":{}}}],["cdktreemodule",{"_index":736,"title":{},"body":{"modules/MaterialModule.html":{}}}],["cell",{"_index":167,"title":{},"body":{"components/CaseComponent.html":{},"injectables/VictoryCheckService.html":{}}}],["cells",{"_index":156,"title":{},"body":{"components/CaseComponent.html":{}}}],["center",{"_index":255,"title":{},"body":{"components/EndGameComponent.html":{},"components/GameComponent.html":{},"components/NotFoundComponent.html":{}}}],["changedetection",{"_index":159,"title":{},"body":{"components/CaseComponent.html":{},"components/EndGameComponent.html":{}}}],["changedetectionstrategy",{"_index":169,"title":{},"body":{"components/CaseComponent.html":{},"components/EndGameComponent.html":{}}}],["changedetectionstrategy.onpush",{"_index":160,"title":{},"body":{"components/CaseComponent.html":{},"components/EndGameComponent.html":{}}}],["check",{"_index":417,"title":{},"body":{"components/GameComponent.html":{},"injectables/GameState.html":{},"classes/GameStateModel.html":{},"injectables/VictoryCheckService.html":{}}}],["check.service",{"_index":576,"title":{},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{}}}],["check.service.ts",{"_index":849,"title":{},"body":{"injectables/VictoryCheckService.html":{},"coverage.html":{}}}],["check.service.ts:101",{"_index":856,"title":{},"body":{"injectables/VictoryCheckService.html":{}}}],["check.service.ts:16",{"_index":865,"title":{},"body":{"injectables/VictoryCheckService.html":{}}}],["check.service.ts:44",{"_index":862,"title":{},"body":{"injectables/VictoryCheckService.html":{}}}],["check.service.ts:72",{"_index":859,"title":{},"body":{"injectables/VictoryCheckService.html":{}}}],["checks",{"_index":315,"title":{},"body":{"components/GameComponent.html":{}}}],["checkvictory",{"_index":286,"title":{},"body":{"components/GameComponent.html":{}}}],["checkvictory(playedpawn",{"_index":312,"title":{},"body":{"components/GameComponent.html":{}}}],["checkwinner",{"_index":314,"title":{},"body":{"components/GameComponent.html":{},"injectables/GameState.html":{},"classes/GameStateModel.html":{}}}],["checkwinner(playedpawn)).subscribe(store",{"_index":426,"title":{},"body":{"components/GameComponent.html":{}}}],["checkwinner(undefined",{"_index":533,"title":{},"body":{"injectables/GameState.html":{}}}],["checkwinner({getstate",{"_index":610,"title":{},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{}}}],["class",{"_index":42,"title":{"classes/GameStateModel.html":{},"classes/ThemeStateModel.html":{}},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/CaseComponent.html":{},"components/EndGameComponent.html":{},"components/GameComponent.html":{},"modules/GameModule.html":{},"modules/GameRoutingModule.html":{},"injectables/GameState.html":{},"classes/GameStateModel.html":{},"components/HeaderComponent.html":{},"components/HomepageComponent.html":{},"modules/HomepageModule.html":{},"modules/HomepageRoutingModule.html":{},"modules/MaterialModule.html":{},"components/NotFoundComponent.html":{},"injectables/ThemeState.html":{},"classes/ThemeStateModel.html":{},"injectables/VictoryCheckService.html":{},"coverage.html":{}}}],["classes",{"_index":629,"title":{},"body":{"classes/GameStateModel.html":{},"classes/ThemeStateModel.html":{},"overview.html":{}}}],["clipboardmodule",{"_index":723,"title":{},"body":{"modules/MaterialModule.html":{}}}],["cluster_appmodule",{"_index":78,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_bootstrap",{"_index":79,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_declarations",{"_index":80,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":81,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_gamemodule",{"_index":506,"title":{},"body":{"modules/GameModule.html":{},"overview.html":{}}}],["cluster_gamemodule_declarations",{"_index":507,"title":{},"body":{"modules/GameModule.html":{},"overview.html":{}}}],["cluster_gamemodule_imports",{"_index":508,"title":{},"body":{"modules/GameModule.html":{},"overview.html":{}}}],["cluster_homepagemodule",{"_index":711,"title":{},"body":{"modules/HomepageModule.html":{},"overview.html":{}}}],["cluster_homepagemodule_declarations",{"_index":712,"title":{},"body":{"modules/HomepageModule.html":{},"overview.html":{}}}],["cluster_homepagemodule_imports",{"_index":713,"title":{},"body":{"modules/HomepageModule.html":{},"overview.html":{}}}],["colonne",{"_index":406,"title":{},"body":{"components/GameComponent.html":{},"injectables/GameState.html":{},"classes/GameStateModel.html":{},"injectables/VictoryCheckService.html":{}}}],["colonnes",{"_index":687,"title":{},"body":{"components/HomepageComponent.html":{}}}],["color",{"_index":303,"title":{},"body":{"components/GameComponent.html":{}}}],["column",{"_index":298,"title":{},"body":{"components/GameComponent.html":{},"injectables/GameState.html":{},"classes/GameStateModel.html":{},"components/HomepageComponent.html":{},"injectables/VictoryCheckService.html":{}}}],["column).length",{"_index":411,"title":{},"body":{"components/GameComponent.html":{}}}],["columnplayed",{"_index":614,"title":{},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{},"injectables/VictoryCheckService.html":{}}}],["columns",{"_index":262,"title":{},"body":{"interfaces/Game.html":{},"components/GameComponent.html":{},"injectables/GameState.html":{},"classes/GameStateModel.html":{},"components/HomepageComponent.html":{}}}],["column}`)[0",{"_index":445,"title":{},"body":{"components/GameComponent.html":{}}}],["comes",{"_index":129,"title":{},"body":{"modules/AppModule.html":{}}}],["commonmodule",{"_index":511,"title":{},"body":{"modules/GameModule.html":{},"modules/HomepageModule.html":{},"modules/MaterialModule.html":{}}}],["compodoc",{"_index":953,"title":{},"body":{"index.html":{}}}],["component",{"_index":0,"title":{"components/AppComponent.html":{},"components/CaseComponent.html":{},"components/EndGameComponent.html":{},"components/GameComponent.html":{},"components/HeaderComponent.html":{},"components/HomepageComponent.html":{},"components/NotFoundComponent.html":{}},"body":{"components/AppComponent.html":{},"modules/AppRoutingModule.html":{},"components/CaseComponent.html":{},"components/EndGameComponent.html":{},"components/GameComponent.html":{},"modules/GameRoutingModule.html":{},"components/HeaderComponent.html":{},"components/HomepageComponent.html":{},"modules/HomepageRoutingModule.html":{},"components/NotFoundComponent.html":{},"coverage.html":{}}}],["component_template",{"_index":54,"title":{},"body":{"components/AppComponent.html":{},"components/CaseComponent.html":{},"components/EndGameComponent.html":{},"components/GameComponent.html":{},"components/HeaderComponent.html":{},"components/HomepageComponent.html":{},"components/NotFoundComponent.html":{}}}],["components",{"_index":2,"title":{},"body":{"components/AppComponent.html":{},"components/CaseComponent.html":{},"components/EndGameComponent.html":{},"components/GameComponent.html":{},"components/HeaderComponent.html":{},"components/HomepageComponent.html":{},"components/NotFoundComponent.html":{},"overview.html":{}}}],["composes",{"_index":157,"title":{},"body":{"components/CaseComponent.html":{}}}],["console.info(pawnplayed.player.name",{"_index":890,"title":{},"body":{"injectables/VictoryCheckService.html":{}}}],["const",{"_index":139,"title":{},"body":{"modules/AppRoutingModule.html":{},"components/GameComponent.html":{},"modules/GameRoutingModule.html":{},"injectables/GameState.html":{},"classes/GameStateModel.html":{},"modules/HomepageRoutingModule.html":{},"injectables/ThemeState.html":{},"classes/ThemeStateModel.html":{}}}],["constructor",{"_index":213,"title":{},"body":{"components/EndGameComponent.html":{},"components/GameComponent.html":{},"components/HomepageComponent.html":{}}}],["constructor(@inject(mat_dialog_data",{"_index":240,"title":{},"body":{"components/EndGameComponent.html":{}}}],["constructor(private",{"_index":648,"title":{},"body":{"components/HeaderComponent.html":{}}}],["constructor(winner",{"_index":214,"title":{},"body":{"components/EndGameComponent.html":{}}}],["contain",{"_index":183,"title":{},"body":{"components/CaseComponent.html":{}}}],["container",{"_index":461,"title":{},"body":{"components/GameComponent.html":{}}}],["contains",{"_index":578,"title":{},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{}}}],["content",{"_index":192,"title":{},"body":{"components/CaseComponent.html":{},"components/EndGameComponent.html":{}}}],["coordinate",{"_index":830,"title":{},"body":{"interfaces/Pawn.html":{}}}],["coordinates",{"_index":324,"title":{},"body":{"components/GameComponent.html":{}}}],["coordonnées",{"_index":421,"title":{},"body":{"components/GameComponent.html":{}}}],["coverage",{"_index":906,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["dans",{"_index":405,"title":{},"body":{"components/GameComponent.html":{},"injectables/VictoryCheckService.html":{}}}],["dark",{"_index":635,"title":{},"body":{"components/HeaderComponent.html":{},"injectables/ThemeState.html":{},"classes/ThemeStateModel.html":{}}}],["dark_mode",{"_index":656,"title":{},"body":{"components/HeaderComponent.html":{}}}],["data",{"_index":430,"title":{},"body":{"components/GameComponent.html":{}}}],["de",{"_index":403,"title":{},"body":{"components/GameComponent.html":{},"injectables/VictoryCheckService.html":{}}}],["declarations",{"_index":88,"title":{},"body":{"modules/AppModule.html":{},"modules/GameModule.html":{},"modules/HomepageModule.html":{},"modules/MaterialModule.html":{}}}],["decorators",{"_index":26,"title":{},"body":{"components/AppComponent.html":{},"components/EndGameComponent.html":{},"components/GameComponent.html":{},"injectables/GameState.html":{},"components/HeaderComponent.html":{},"components/HomepageComponent.html":{},"injectables/ThemeState.html":{}}}],["deep",{"_index":704,"title":{},"body":{"components/HomepageComponent.html":{}}}],["default",{"_index":223,"title":{},"body":{"components/EndGameComponent.html":{},"components/GameComponent.html":{},"injectables/GameState.html":{},"classes/GameStateModel.html":{},"classes/ThemeStateModel.html":{}}}],["defaults",{"_index":584,"title":{},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{},"injectables/ThemeState.html":{},"classes/ThemeStateModel.html":{}}}],["defined",{"_index":28,"title":{},"body":{"components/AppComponent.html":{},"components/CaseComponent.html":{},"components/EndGameComponent.html":{},"components/GameComponent.html":{},"injectables/GameState.html":{},"classes/GameStateModel.html":{},"components/HeaderComponent.html":{},"components/HomepageComponent.html":{},"injectables/ThemeState.html":{},"classes/ThemeStateModel.html":{},"injectables/VictoryCheckService.html":{}}}],["dependencies",{"_index":77,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/GameModule.html":{},"modules/HomepageModule.html":{},"dependencies.html":{},"overview.html":{}}}],["des",{"_index":226,"title":{},"body":{"components/EndGameComponent.html":{}}}],["description",{"_index":11,"title":{},"body":{"components/AppComponent.html":{},"components/CaseComponent.html":{},"components/EndGameComponent.html":{},"interfaces/Game.html":{},"components/GameComponent.html":{},"injectables/GameState.html":{},"classes/GameStateModel.html":{},"components/HeaderComponent.html":{},"components/HomepageComponent.html":{},"components/NotFoundComponent.html":{},"interfaces/Pawn.html":{},"interfaces/Player.html":{},"injectables/ThemeState.html":{},"classes/ThemeStateModel.html":{},"injectables/VictoryCheckService.html":{}}}],["determine",{"_index":302,"title":{},"body":{"components/GameComponent.html":{}}}],["diagonale",{"_index":624,"title":{},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{},"injectables/VictoryCheckService.html":{}}}],["diagonalleftcheck",{"_index":851,"title":{},"body":{"injectables/VictoryCheckService.html":{}}}],["diagonalleftcheck(game",{"_index":855,"title":{},"body":{"injectables/VictoryCheckService.html":{}}}],["diagonally",{"_index":857,"title":{},"body":{"injectables/VictoryCheckService.html":{}}}],["diagonalrightcheck",{"_index":852,"title":{},"body":{"injectables/VictoryCheckService.html":{}}}],["diagonalrightcheck(game",{"_index":858,"title":{},"body":{"injectables/VictoryCheckService.html":{}}}],["dialog",{"_index":204,"title":{},"body":{"components/EndGameComponent.html":{},"components/GameComponent.html":{}}}],["dialogref",{"_index":428,"title":{},"body":{"components/GameComponent.html":{}}}],["dialogref.afterclosed().subscribe(result",{"_index":433,"title":{},"body":{"components/GameComponent.html":{}}}],["dialogs/end",{"_index":364,"title":{},"body":{"components/GameComponent.html":{},"modules/GameModule.html":{}}}],["directive",{"_index":52,"title":{},"body":{"components/AppComponent.html":{},"components/CaseComponent.html":{},"components/EndGameComponent.html":{},"components/GameComponent.html":{},"components/HeaderComponent.html":{},"components/HomepageComponent.html":{},"components/NotFoundComponent.html":{}}}],["directives",{"_index":69,"title":{},"body":{"components/AppComponent.html":{},"components/CaseComponent.html":{},"components/EndGameComponent.html":{},"components/GameComponent.html":{},"components/HeaderComponent.html":{},"components/HomepageComponent.html":{},"components/NotFoundComponent.html":{}}}],["disableclose",{"_index":431,"title":{},"body":{"components/GameComponent.html":{}}}],["dispatch",{"_index":307,"title":{},"body":{"components/GameComponent.html":{}}}],["display",{"_index":195,"title":{},"body":{"components/CaseComponent.html":{},"components/GameComponent.html":{},"interfaces/Pawn.html":{}}}],["displaypawn",{"_index":287,"title":{},"body":{"components/GameComponent.html":{}}}],["displaypawn(x",{"_index":319,"title":{},"body":{"components/GameComponent.html":{}}}],["dispo",{"_index":946,"title":{},"body":{"index.html":{}}}],["doc",{"_index":950,"title":{},"body":{"index.html":{}}}],["document.body.classlist.add(\"dark",{"_index":652,"title":{},"body":{"components/HeaderComponent.html":{}}}],["document.body.classlist.remove(\"dark",{"_index":653,"title":{},"body":{"components/HeaderComponent.html":{}}}],["document.getelementsbyclassname(`falling",{"_index":444,"title":{},"body":{"components/GameComponent.html":{}}}],["documentation",{"_index":907,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["documentation.web.appweb.app",{"_index":957,"title":{},"body":{"index.html":{}}}],["doesn't",{"_index":352,"title":{},"body":{"components/GameComponent.html":{}}}],["dom",{"_index":7,"title":{},"body":{"components/AppComponent.html":{},"components/CaseComponent.html":{},"components/EndGameComponent.html":{},"components/GameComponent.html":{},"components/HeaderComponent.html":{},"components/HomepageComponent.html":{},"components/NotFoundComponent.html":{}}}],["dragdropmodule",{"_index":725,"title":{},"body":{"modules/MaterialModule.html":{}}}],["droite",{"_index":625,"title":{},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{},"injectables/VictoryCheckService.html":{}}}],["drop",{"_index":727,"title":{},"body":{"modules/MaterialModule.html":{}}}],["du",{"_index":419,"title":{},"body":{"components/GameComponent.html":{},"injectables/VictoryCheckService.html":{}}}],["dynamic",{"_index":930,"title":{},"body":{"dependencies.html":{}}}],["element",{"_index":51,"title":{},"body":{"components/AppComponent.html":{},"components/CaseComponent.html":{},"components/EndGameComponent.html":{},"components/GameComponent.html":{},"components/HeaderComponent.html":{},"components/HomepageComponent.html":{},"components/NotFoundComponent.html":{}}}],["elle",{"_index":945,"title":{},"body":{"index.html":{}}}],["en",{"_index":408,"title":{},"body":{"components/GameComponent.html":{},"injectables/GameState.html":{},"classes/GameStateModel.html":{},"injectables/VictoryCheckService.html":{},"index.html":{}}}],["enabled",{"_index":120,"title":{},"body":{"modules/AppModule.html":{}}}],["end",{"_index":60,"title":{},"body":{"components/AppComponent.html":{},"components/CaseComponent.html":{},"components/EndGameComponent.html":{},"components/GameComponent.html":{},"components/HeaderComponent.html":{},"components/HomepageComponent.html":{},"components/NotFoundComponent.html":{}}}],["endgamecomponent",{"_index":59,"title":{"components/EndGameComponent.html":{}},"body":{"components/AppComponent.html":{},"components/CaseComponent.html":{},"components/EndGameComponent.html":{},"components/GameComponent.html":{},"modules/GameModule.html":{},"components/HeaderComponent.html":{},"components/HomepageComponent.html":{},"components/NotFoundComponent.html":{},"coverage.html":{},"overview.html":{}}}],["ends",{"_index":206,"title":{},"body":{"components/EndGameComponent.html":{},"components/GameComponent.html":{}}}],["environment",{"_index":103,"title":{},"body":{"modules/AppModule.html":{}}}],["environment.production",{"_index":121,"title":{},"body":{"modules/AppModule.html":{}}}],["environments/environment",{"_index":104,"title":{},"body":{"modules/AppModule.html":{}}}],["error",{"_index":395,"title":{},"body":{"components/GameComponent.html":{},"injectables/GameState.html":{},"classes/GameStateModel.html":{}}}],["est",{"_index":245,"title":{},"body":{"components/EndGameComponent.html":{},"components/GameComponent.html":{},"injectables/GameState.html":{},"classes/GameStateModel.html":{},"index.html":{}}}],["et",{"_index":955,"title":{},"body":{"index.html":{}}}],["event",{"_index":671,"title":{},"body":{"components/HomepageComponent.html":{}}}],["export",{"_index":41,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/CaseComponent.html":{},"components/EndGameComponent.html":{},"interfaces/Game.html":{},"components/GameComponent.html":{},"modules/GameModule.html":{},"modules/GameRoutingModule.html":{},"injectables/GameState.html":{},"classes/GameStateModel.html":{},"components/HeaderComponent.html":{},"components/HomepageComponent.html":{},"modules/HomepageModule.html":{},"modules/HomepageRoutingModule.html":{},"modules/MaterialModule.html":{},"components/NotFoundComponent.html":{},"interfaces/Pawn.html":{},"interfaces/Player.html":{},"injectables/ThemeState.html":{},"classes/ThemeStateModel.html":{},"injectables/VictoryCheckService.html":{}}}],["exports",{"_index":153,"title":{},"body":{"modules/AppRoutingModule.html":{},"modules/GameRoutingModule.html":{},"modules/HomepageRoutingModule.html":{},"modules/MaterialModule.html":{}}}],["f4433b",{"_index":499,"title":{},"body":{"components/GameComponent.html":{}}}],["f4e43b",{"_index":503,"title":{},"body":{"components/GameComponent.html":{}}}],["faite",{"_index":951,"title":{},"body":{"index.html":{}}}],["fall",{"_index":300,"title":{},"body":{"components/GameComponent.html":{}}}],["falling",{"_index":297,"title":{},"body":{"components/GameComponent.html":{}}}],["false",{"_index":831,"title":{},"body":{"interfaces/Pawn.html":{},"injectables/ThemeState.html":{},"classes/ThemeStateModel.html":{},"injectables/VictoryCheckService.html":{}}}],["family",{"_index":660,"title":{},"body":{"components/HeaderComponent.html":{},"components/HomepageComponent.html":{}}}],["file",{"_index":9,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/CaseComponent.html":{},"components/EndGameComponent.html":{},"interfaces/Game.html":{},"components/GameComponent.html":{},"modules/GameModule.html":{},"modules/GameRoutingModule.html":{},"injectables/GameState.html":{},"classes/GameStateModel.html":{},"components/HeaderComponent.html":{},"components/HomepageComponent.html":{},"modules/HomepageModule.html":{},"modules/HomepageRoutingModule.html":{},"modules/MaterialModule.html":{},"components/NotFoundComponent.html":{},"interfaces/Pawn.html":{},"interfaces/Player.html":{},"injectables/ThemeState.html":{},"classes/ThemeStateModel.html":{},"injectables/VictoryCheckService.html":{},"coverage.html":{}}}],["firebase",{"_index":944,"title":{},"body":{"index.html":{}}}],["first",{"_index":130,"title":{},"body":{"modules/AppModule.html":{}}}],["flexlayoutmodule",{"_index":514,"title":{},"body":{"modules/GameModule.html":{},"modules/HomepageModule.html":{}}}],["font",{"_index":659,"title":{},"body":{"components/HeaderComponent.html":{},"components/HomepageComponent.html":{},"components/NotFoundComponent.html":{}}}],["formsmodule",{"_index":717,"title":{},"body":{"modules/HomepageModule.html":{}}}],["found",{"_index":68,"title":{},"body":{"components/AppComponent.html":{},"components/CaseComponent.html":{},"components/EndGameComponent.html":{},"components/GameComponent.html":{},"components/HeaderComponent.html":{},"components/HomepageComponent.html":{},"components/NotFoundComponent.html":{}}}],["found.component",{"_index":115,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{}}}],["found.component.html",{"_index":812,"title":{},"body":{"components/NotFoundComponent.html":{}}}],["found.component.scss",{"_index":811,"title":{},"body":{"components/NotFoundComponent.html":{}}}],["found.component.ts",{"_index":810,"title":{},"body":{"components/NotFoundComponent.html":{},"coverage.html":{}}}],["found/not",{"_index":114,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/NotFoundComponent.html":{},"coverage.html":{}}}],["fresh",{"_index":345,"title":{},"body":{"components/GameComponent.html":{}}}],["full",{"_index":144,"title":{},"body":{"modules/AppRoutingModule.html":{},"components/GameComponent.html":{},"injectables/GameState.html":{},"classes/GameStateModel.html":{}}}],["fullscreen",{"_index":480,"title":{},"body":{"components/GameComponent.html":{}}}],["g.pawns.filter(p",{"_index":409,"title":{},"body":{"components/GameComponent.html":{}}}],["g.pawns.map(p",{"_index":423,"title":{},"body":{"components/GameComponent.html":{}}}],["g.turn",{"_index":379,"title":{},"body":{"components/GameComponent.html":{}}}],["game",{"_index":148,"title":{"interfaces/Game.html":{}},"body":{"modules/AppRoutingModule.html":{},"components/CaseComponent.html":{},"components/EndGameComponent.html":{},"interfaces/Game.html":{},"components/GameComponent.html":{},"modules/GameModule.html":{},"injectables/GameState.html":{},"classes/GameStateModel.html":{},"components/HomepageComponent.html":{},"injectables/VictoryCheckService.html":{},"coverage.html":{}}}],["game'},{'name",{"_index":61,"title":{},"body":{"components/AppComponent.html":{},"components/CaseComponent.html":{},"components/EndGameComponent.html":{},"components/GameComponent.html":{},"components/HeaderComponent.html":{},"components/HomepageComponent.html":{},"components/NotFoundComponent.html":{}}}],["game.actions",{"_index":574,"title":{},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{}}}],["game.component",{"_index":365,"title":{},"body":{"components/GameComponent.html":{},"modules/GameModule.html":{},"modules/GameRoutingModule.html":{}}}],["game.component.html",{"_index":208,"title":{},"body":{"components/EndGameComponent.html":{},"components/GameComponent.html":{}}}],["game.component.scss",{"_index":207,"title":{},"body":{"components/EndGameComponent.html":{},"components/GameComponent.html":{}}}],["game.component.ts",{"_index":203,"title":{},"body":{"components/EndGameComponent.html":{},"coverage.html":{}}}],["game.component.ts:19",{"_index":228,"title":{},"body":{"components/EndGameComponent.html":{}}}],["game.component.ts:23",{"_index":216,"title":{},"body":{"components/EndGameComponent.html":{}}}],["game.component.ts:29",{"_index":233,"title":{},"body":{"components/EndGameComponent.html":{}}}],["game.pawns.filter(p",{"_index":874,"title":{},"body":{"injectables/VictoryCheckService.html":{}}}],["game/end",{"_index":202,"title":{},"body":{"components/EndGameComponent.html":{},"components/GameComponent.html":{},"modules/GameModule.html":{},"coverage.html":{}}}],["game__action",{"_index":483,"title":{},"body":{"components/GameComponent.html":{}}}],["game__actions",{"_index":484,"title":{},"body":{"components/GameComponent.html":{}}}],["game__players",{"_index":481,"title":{},"body":{"components/GameComponent.html":{}}}],["gamecomponent",{"_index":62,"title":{"components/GameComponent.html":{}},"body":{"components/AppComponent.html":{},"components/CaseComponent.html":{},"components/EndGameComponent.html":{},"components/GameComponent.html":{},"modules/GameModule.html":{},"modules/GameRoutingModule.html":{},"components/HeaderComponent.html":{},"components/HomepageComponent.html":{},"components/NotFoundComponent.html":{},"coverage.html":{},"overview.html":{}}}],["gameinit",{"_index":551,"title":{},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{}}}],["gamemodule",{"_index":505,"title":{"modules/GameModule.html":{}},"body":{"modules/GameModule.html":{},"modules.html":{},"overview.html":{}}}],["gamereset",{"_index":344,"title":{},"body":{"components/GameComponent.html":{},"injectables/GameState.html":{},"classes/GameStateModel.html":{},"components/HomepageComponent.html":{}}}],["gameroutingmodule",{"_index":509,"title":{"modules/GameRoutingModule.html":{}},"body":{"modules/GameModule.html":{},"modules/GameRoutingModule.html":{},"modules.html":{},"overview.html":{}}}],["games",{"_index":342,"title":{},"body":{"components/GameComponent.html":{}}}],["gamestate",{"_index":112,"title":{"injectables/GameState.html":{}},"body":{"modules/AppModule.html":{},"components/GameComponent.html":{},"injectables/GameState.html":{},"classes/GameStateModel.html":{},"components/HomepageComponent.html":{},"coverage.html":{}}}],["gamestatemodel",{"_index":544,"title":{"classes/GameStateModel.html":{}},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{},"coverage.html":{}}}],["gauche",{"_index":627,"title":{},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{}}}],["getcolumns",{"_index":524,"title":{},"body":{"injectables/GameState.html":{}}}],["getcolumns(state",{"_index":543,"title":{},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{}}}],["getgame",{"_index":525,"title":{},"body":{"injectables/GameState.html":{}}}],["getgame(state",{"_index":546,"title":{},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{}}}],["getrows",{"_index":526,"title":{},"body":{"injectables/GameState.html":{}}}],["getrows(state",{"_index":548,"title":{},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{}}}],["gets",{"_index":32,"title":{},"body":{"components/AppComponent.html":{},"components/HeaderComponent.html":{}}}],["getstate",{"_index":591,"title":{},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{},"injectables/ThemeState.html":{},"classes/ThemeStateModel.html":{}}}],["gettheme",{"_index":835,"title":{},"body":{"injectables/ThemeState.html":{}}}],["gettheme(state",{"_index":836,"title":{},"body":{"injectables/ThemeState.html":{},"classes/ThemeStateModel.html":{}}}],["getting",{"_index":937,"title":{"index.html":{}},"body":{}}],["getypositionincolumn",{"_index":288,"title":{},"body":{"components/GameComponent.html":{}}}],["getypositionincolumn(column",{"_index":328,"title":{},"body":{"components/GameComponent.html":{}}}],["given",{"_index":323,"title":{},"body":{"components/GameComponent.html":{}}}],["global",{"_index":642,"title":{},"body":{"components/HeaderComponent.html":{}}}],["graph",{"_index":961,"title":{},"body":{"modules.html":{}}}],["grid",{"_index":158,"title":{},"body":{"components/CaseComponent.html":{},"interfaces/Game.html":{},"components/GameComponent.html":{}}}],["gridx",{"_index":280,"title":{},"body":{"components/GameComponent.html":{}}}],["gridy",{"_index":281,"title":{},"body":{"components/GameComponent.html":{}}}],["grille",{"_index":244,"title":{},"body":{"components/EndGameComponent.html":{},"components/GameComponent.html":{}}}],["header",{"_index":632,"title":{},"body":{"components/HeaderComponent.html":{}}}],["header'},{'name",{"_index":64,"title":{},"body":{"components/AppComponent.html":{},"components/CaseComponent.html":{},"components/EndGameComponent.html":{},"components/GameComponent.html":{},"components/HeaderComponent.html":{},"components/HomepageComponent.html":{},"components/NotFoundComponent.html":{}}}],["header.component.html",{"_index":634,"title":{},"body":{"components/HeaderComponent.html":{}}}],["header.component.scss",{"_index":633,"title":{},"body":{"components/HeaderComponent.html":{}}}],["header__title",{"_index":658,"title":{},"body":{"components/HeaderComponent.html":{}}}],["headercomponent",{"_index":63,"title":{"components/HeaderComponent.html":{}},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/CaseComponent.html":{},"components/EndGameComponent.html":{},"components/GameComponent.html":{},"components/HeaderComponent.html":{},"components/HomepageComponent.html":{},"components/NotFoundComponent.html":{},"coverage.html":{},"overview.html":{}}}],["hebergée",{"_index":943,"title":{},"body":{"index.html":{}}}],["height",{"_index":44,"title":{},"body":{"components/AppComponent.html":{},"components/CaseComponent.html":{},"components/GameComponent.html":{},"components/HomepageComponent.html":{},"components/NotFoundComponent.html":{}}}],["hidden",{"_index":253,"title":{},"body":{"components/EndGameComponent.html":{}}}],["home",{"_index":142,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["homepage",{"_index":270,"title":{},"body":{"interfaces/Game.html":{},"components/HomepageComponent.html":{},"modules/HomepageModule.html":{}}}],["homepage'},{'name",{"_index":66,"title":{},"body":{"components/AppComponent.html":{},"components/CaseComponent.html":{},"components/EndGameComponent.html":{},"components/GameComponent.html":{},"components/HeaderComponent.html":{},"components/HomepageComponent.html":{},"components/NotFoundComponent.html":{}}}],["homepage.component",{"_index":716,"title":{},"body":{"modules/HomepageModule.html":{},"modules/HomepageRoutingModule.html":{}}}],["homepage.component.html",{"_index":666,"title":{},"body":{"components/HomepageComponent.html":{}}}],["homepage.component.scss",{"_index":665,"title":{},"body":{"components/HomepageComponent.html":{}}}],["homepagecomponent",{"_index":65,"title":{"components/HomepageComponent.html":{}},"body":{"components/AppComponent.html":{},"components/CaseComponent.html":{},"components/EndGameComponent.html":{},"components/GameComponent.html":{},"components/HeaderComponent.html":{},"components/HomepageComponent.html":{},"modules/HomepageModule.html":{},"modules/HomepageRoutingModule.html":{},"components/NotFoundComponent.html":{},"coverage.html":{},"overview.html":{}}}],["homepagemodule",{"_index":710,"title":{"modules/HomepageModule.html":{}},"body":{"modules/HomepageModule.html":{},"modules.html":{},"overview.html":{}}}],["homepageroutingmodule",{"_index":714,"title":{"modules/HomepageRoutingModule.html":{}},"body":{"modules/HomepageModule.html":{},"modules/HomepageRoutingModule.html":{},"modules.html":{},"overview.html":{}}}],["horizontal",{"_index":702,"title":{},"body":{"components/HomepageComponent.html":{}}}],["horizontalcheck",{"_index":853,"title":{},"body":{"injectables/VictoryCheckService.html":{}}}],["horizontalcheck(game",{"_index":860,"title":{},"body":{"injectables/VictoryCheckService.html":{}}}],["horizontale",{"_index":622,"title":{},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{}}}],["horizontalement",{"_index":899,"title":{},"body":{"injectables/VictoryCheckService.html":{}}}],["horizontally",{"_index":863,"title":{},"body":{"injectables/VictoryCheckService.html":{}}}],["host",{"_index":172,"title":{},"body":{"components/CaseComponent.html":{},"components/HeaderComponent.html":{}}}],["html",{"_index":50,"title":{},"body":{"components/AppComponent.html":{},"components/CaseComponent.html":{},"components/EndGameComponent.html":{},"components/GameComponent.html":{},"components/HeaderComponent.html":{},"components/HomepageComponent.html":{},"components/NotFoundComponent.html":{}}}],["htmlelement",{"_index":443,"title":{},"body":{"components/GameComponent.html":{}}}],["https://puissance",{"_index":948,"title":{},"body":{"index.html":{}}}],["ici",{"_index":947,"title":{},"body":{"index.html":{}}}],["id",{"_index":580,"title":{},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{},"interfaces/Player.html":{}}}],["identifier",{"_index":908,"title":{},"body":{"coverage.html":{}}}],["if((pawn.x",{"_index":904,"title":{},"body":{"injectables/VictoryCheckService.html":{}}}],["if(alignedpawns",{"_index":888,"title":{},"body":{"injectables/VictoryCheckService.html":{}}}],["if(isdark",{"_index":651,"title":{},"body":{"components/HeaderComponent.html":{}}}],["if(pawn.x",{"_index":897,"title":{},"body":{"injectables/VictoryCheckService.html":{}}}],["if(pawn.y",{"_index":609,"title":{},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{},"injectables/VictoryCheckService.html":{}}}],["if(state.game.pawns.length",{"_index":599,"title":{},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{}}}],["if(store.game.game.pawns?.length",{"_index":391,"title":{},"body":{"components/GameComponent.html":{}}}],["if(store.game.game.winner",{"_index":427,"title":{},"body":{"components/GameComponent.html":{}}}],["if(this.victoryservice.diagonalleftcheck(state.game",{"_index":628,"title":{},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{}}}],["if(this.victoryservice.diagonalrightcheck(state.game",{"_index":626,"title":{},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{}}}],["if(this.victoryservice.horizontalcheck(state.game",{"_index":623,"title":{},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{}}}],["if(this.victoryservice.verticalcheck(state.game",{"_index":620,"title":{},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{}}}],["ignore",{"_index":368,"title":{},"body":{"components/GameComponent.html":{},"components/HeaderComponent.html":{},"components/HomepageComponent.html":{}}}],["implements",{"_index":278,"title":{},"body":{"components/GameComponent.html":{},"components/HeaderComponent.html":{}}}],["import",{"_index":34,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/CaseComponent.html":{},"components/EndGameComponent.html":{},"interfaces/Game.html":{},"components/GameComponent.html":{},"modules/GameModule.html":{},"modules/GameRoutingModule.html":{},"injectables/GameState.html":{},"classes/GameStateModel.html":{},"components/HeaderComponent.html":{},"components/HomepageComponent.html":{},"modules/HomepageModule.html":{},"modules/HomepageRoutingModule.html":{},"modules/MaterialModule.html":{},"components/NotFoundComponent.html":{},"interfaces/Pawn.html":{},"injectables/ThemeState.html":{},"classes/ThemeStateModel.html":{},"injectables/VictoryCheckService.html":{}}}],["import('./game/game.module').then(m",{"_index":149,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["import('./homepage/homepage.module').then(m",{"_index":146,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["important",{"_index":708,"title":{},"body":{"components/HomepageComponent.html":{}}}],["imports",{"_index":89,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules/GameModule.html":{},"modules/GameRoutingModule.html":{},"modules/HomepageModule.html":{},"modules/HomepageRoutingModule.html":{},"modules/MaterialModule.html":{}}}],["index",{"_index":20,"title":{"index.html":{}},"body":{"components/AppComponent.html":{},"components/CaseComponent.html":{},"components/EndGameComponent.html":{},"interfaces/Game.html":{},"components/GameComponent.html":{},"injectables/GameState.html":{},"classes/GameStateModel.html":{},"components/HeaderComponent.html":{},"components/HomepageComponent.html":{},"interfaces/Pawn.html":{},"interfaces/Player.html":{},"injectables/ThemeState.html":{},"classes/ThemeStateModel.html":{},"injectables/VictoryCheckService.html":{}}}],["info",{"_index":3,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/CaseComponent.html":{},"components/EndGameComponent.html":{},"interfaces/Game.html":{},"components/GameComponent.html":{},"modules/GameModule.html":{},"modules/GameRoutingModule.html":{},"injectables/GameState.html":{},"classes/GameStateModel.html":{},"components/HeaderComponent.html":{},"components/HomepageComponent.html":{},"modules/HomepageModule.html":{},"modules/HomepageRoutingModule.html":{},"modules/MaterialModule.html":{},"components/NotFoundComponent.html":{},"interfaces/Pawn.html":{},"interfaces/Player.html":{},"injectables/ThemeState.html":{},"classes/ThemeStateModel.html":{},"injectables/VictoryCheckService.html":{}}}],["initgame",{"_index":289,"title":{},"body":{"components/GameComponent.html":{},"injectables/GameState.html":{}}}],["initgame(undefined",{"_index":550,"title":{},"body":{"injectables/GameState.html":{}}}],["initgame({getstate",{"_index":588,"title":{},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{}}}],["initialize",{"_index":554,"title":{},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{}}}],["inject",{"_index":235,"title":{},"body":{"components/EndGameComponent.html":{}}}],["inject(mat_dialog_data",{"_index":232,"title":{},"body":{"components/EndGameComponent.html":{}}}],["injectable",{"_index":519,"title":{"injectables/GameState.html":{},"injectables/ThemeState.html":{},"injectables/VictoryCheckService.html":{}},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{},"injectables/ThemeState.html":{},"classes/ThemeStateModel.html":{},"injectables/VictoryCheckService.html":{},"coverage.html":{}}}],["injectables",{"_index":520,"title":{},"body":{"injectables/GameState.html":{},"injectables/ThemeState.html":{},"injectables/VictoryCheckService.html":{},"overview.html":{}}}],["input",{"_index":168,"title":{},"body":{"components/CaseComponent.html":{}}}],["input('pawn",{"_index":171,"title":{},"body":{"components/CaseComponent.html":{}}}],["inputs",{"_index":163,"title":{},"body":{"components/CaseComponent.html":{}}}],["inset",{"_index":500,"title":{},"body":{"components/GameComponent.html":{}}}],["interface",{"_index":257,"title":{"interfaces/Game.html":{},"interfaces/Pawn.html":{},"interfaces/Player.html":{}},"body":{"interfaces/Game.html":{},"interfaces/Pawn.html":{},"interfaces/Player.html":{},"coverage.html":{}}}],["interfaces",{"_index":258,"title":{},"body":{"interfaces/Game.html":{},"interfaces/Pawn.html":{},"interfaces/Player.html":{},"overview.html":{}}}],["isdarktheme",{"_index":22,"title":{},"body":{"components/AppComponent.html":{}}}],["isinwinningline",{"_index":826,"title":{},"body":{"interfaces/Pawn.html":{}}}],["isn't",{"_index":340,"title":{},"body":{"components/GameComponent.html":{},"injectables/GameState.html":{},"classes/GameStateModel.html":{}}}],["item",{"_index":700,"title":{},"body":{"components/HomepageComponent.html":{}}}],["jaunes",{"_index":234,"title":{},"body":{"components/EndGameComponent.html":{}}}],["jeu",{"_index":388,"title":{},"body":{"components/GameComponent.html":{},"injectables/GameState.html":{},"classes/GameStateModel.html":{}}}],["jouer",{"_index":689,"title":{},"body":{"components/HomepageComponent.html":{}}}],["joueur",{"_index":581,"title":{},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{},"injectables/VictoryCheckService.html":{}}}],["jouée",{"_index":869,"title":{},"body":{"injectables/VictoryCheckService.html":{}}}],["jsdoc",{"_index":954,"title":{},"body":{"index.html":{}}}],["l'accueil",{"_index":817,"title":{},"body":{"components/NotFoundComponent.html":{}}}],["l'appli",{"_index":941,"title":{},"body":{"index.html":{}}}],["l'application",{"_index":942,"title":{},"body":{"index.html":{}}}],["l\\'accueil",{"_index":824,"title":{},"body":{"components/NotFoundComponent.html":{}}}],["la",{"_index":243,"title":{},"body":{"components/EndGameComponent.html":{},"components/GameComponent.html":{},"injectables/GameState.html":{},"classes/GameStateModel.html":{},"components/NotFoundComponent.html":{},"injectables/VictoryCheckService.html":{},"index.html":{}}}],["label",{"_index":706,"title":{},"body":{"components/HomepageComponent.html":{}}}],["last",{"_index":310,"title":{},"body":{"components/GameComponent.html":{},"injectables/GameState.html":{},"classes/GameStateModel.html":{},"injectables/VictoryCheckService.html":{}}}],["layout",{"_index":516,"title":{},"body":{"modules/GameModule.html":{},"modules/HomepageModule.html":{},"dependencies.html":{}}}],["layout/header/header.component",{"_index":105,"title":{},"body":{"modules/AppModule.html":{}}}],["le",{"_index":387,"title":{},"body":{"components/GameComponent.html":{},"injectables/VictoryCheckService.html":{}}}],["left",{"_index":495,"title":{},"body":{"components/GameComponent.html":{},"injectables/VictoryCheckService.html":{}}}],["legend",{"_index":49,"title":{},"body":{"components/AppComponent.html":{},"components/CaseComponent.html":{},"components/EndGameComponent.html":{},"components/GameComponent.html":{},"components/HeaderComponent.html":{},"components/HomepageComponent.html":{},"components/NotFoundComponent.html":{}}}],["les",{"_index":868,"title":{},"body":{"injectables/VictoryCheckService.html":{}}}],["ligne",{"_index":618,"title":{},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{},"injectables/VictoryCheckService.html":{},"index.html":{}}}],["lignes",{"_index":688,"title":{},"body":{"components/HomepageComponent.html":{}}}],["line",{"_index":828,"title":{},"body":{"interfaces/Pawn.html":{}}}],["lineplayed",{"_index":612,"title":{},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{}}}],["list",{"_index":766,"title":{},"body":{"modules/MaterialModule.html":{}}}],["liste",{"_index":418,"title":{},"body":{"components/GameComponent.html":{}}}],["loadchildren",{"_index":145,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["loading",{"_index":680,"title":{},"body":{"components/HomepageComponent.html":{}}}],["m.gamemodule",{"_index":150,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["m.homepagemodule",{"_index":147,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["margin",{"_index":458,"title":{},"body":{"components/GameComponent.html":{},"components/HomepageComponent.html":{},"components/NotFoundComponent.html":{}}}],["mat",{"_index":251,"title":{},"body":{"components/EndGameComponent.html":{},"components/HomepageComponent.html":{}}}],["mat_dialog_data",{"_index":236,"title":{},"body":{"components/EndGameComponent.html":{}}}],["matautocompletemodule",{"_index":738,"title":{},"body":{"modules/MaterialModule.html":{}}}],["matbadgemodule",{"_index":740,"title":{},"body":{"modules/MaterialModule.html":{}}}],["matbottomsheetmodule",{"_index":742,"title":{},"body":{"modules/MaterialModule.html":{}}}],["matbuttonmodule",{"_index":745,"title":{},"body":{"modules/MaterialModule.html":{}}}],["matbuttontogglemodule",{"_index":747,"title":{},"body":{"modules/MaterialModule.html":{}}}],["matcardmodule",{"_index":749,"title":{},"body":{"modules/MaterialModule.html":{}}}],["match",{"_index":241,"title":{},"body":{"components/EndGameComponent.html":{},"components/GameComponent.html":{}}}],["matcheckboxmodule",{"_index":751,"title":{},"body":{"modules/MaterialModule.html":{}}}],["matching",{"_index":72,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/CaseComponent.html":{},"components/EndGameComponent.html":{},"interfaces/Game.html":{},"components/GameComponent.html":{},"modules/GameModule.html":{},"modules/GameRoutingModule.html":{},"injectables/GameState.html":{},"classes/GameStateModel.html":{},"components/HeaderComponent.html":{},"components/HomepageComponent.html":{},"modules/HomepageModule.html":{},"modules/HomepageRoutingModule.html":{},"modules/MaterialModule.html":{},"components/NotFoundComponent.html":{},"interfaces/Pawn.html":{},"interfaces/Player.html":{},"injectables/ThemeState.html":{},"classes/ThemeStateModel.html":{},"injectables/VictoryCheckService.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"routes.html":{}}}],["matchipsmodule",{"_index":753,"title":{},"body":{"modules/MaterialModule.html":{}}}],["matdatepickermodule",{"_index":757,"title":{},"body":{"modules/MaterialModule.html":{}}}],["matdialog",{"_index":358,"title":{},"body":{"components/GameComponent.html":{}}}],["matdialogmodule",{"_index":759,"title":{},"body":{"modules/MaterialModule.html":{}}}],["matdividermodule",{"_index":760,"title":{},"body":{"modules/MaterialModule.html":{}}}],["material/material.module",{"_index":99,"title":{},"body":{"modules/AppModule.html":{},"modules/GameModule.html":{},"modules/HomepageModule.html":{}}}],["materialmodule",{"_index":83,"title":{"modules/MaterialModule.html":{}},"body":{"modules/AppModule.html":{},"modules/GameModule.html":{},"modules/HomepageModule.html":{},"modules/MaterialModule.html":{},"modules.html":{},"overview.html":{}}}],["matexpansionmodule",{"_index":762,"title":{},"body":{"modules/MaterialModule.html":{}}}],["matgridlistmodule",{"_index":764,"title":{},"body":{"modules/MaterialModule.html":{}}}],["maticonmodule",{"_index":767,"title":{},"body":{"modules/MaterialModule.html":{}}}],["matinputmodule",{"_index":769,"title":{},"body":{"modules/MaterialModule.html":{}}}],["matlistmodule",{"_index":771,"title":{},"body":{"modules/MaterialModule.html":{}}}],["matmenumodule",{"_index":773,"title":{},"body":{"modules/MaterialModule.html":{}}}],["matnativedatemodule",{"_index":775,"title":{},"body":{"modules/MaterialModule.html":{}}}],["matpaginatormodule",{"_index":778,"title":{},"body":{"modules/MaterialModule.html":{}}}],["matprogressbarmodule",{"_index":780,"title":{},"body":{"modules/MaterialModule.html":{}}}],["matprogressspinnermodule",{"_index":782,"title":{},"body":{"modules/MaterialModule.html":{}}}],["matradiomodule",{"_index":784,"title":{},"body":{"modules/MaterialModule.html":{}}}],["matripplemodule",{"_index":776,"title":{},"body":{"modules/MaterialModule.html":{}}}],["matselectmodule",{"_index":786,"title":{},"body":{"modules/MaterialModule.html":{}}}],["matsidenavmodule",{"_index":788,"title":{},"body":{"modules/MaterialModule.html":{}}}],["matslidermodule",{"_index":790,"title":{},"body":{"modules/MaterialModule.html":{}}}],["matslidetogglemodule",{"_index":792,"title":{},"body":{"modules/MaterialModule.html":{}}}],["matsnackbar",{"_index":355,"title":{},"body":{"components/GameComponent.html":{}}}],["matsnackbarmodule",{"_index":794,"title":{},"body":{"modules/MaterialModule.html":{}}}],["matsortmodule",{"_index":795,"title":{},"body":{"modules/MaterialModule.html":{}}}],["matsteppermodule",{"_index":755,"title":{},"body":{"modules/MaterialModule.html":{}}}],["mattablemodule",{"_index":797,"title":{},"body":{"modules/MaterialModule.html":{}}}],["mattabsmodule",{"_index":799,"title":{},"body":{"modules/MaterialModule.html":{}}}],["mattoolbarmodule",{"_index":801,"title":{},"body":{"modules/MaterialModule.html":{}}}],["mattooltipmodule",{"_index":803,"title":{},"body":{"modules/MaterialModule.html":{}}}],["mattreemodule",{"_index":805,"title":{},"body":{"modules/MaterialModule.html":{}}}],["max",{"_index":456,"title":{},"body":{"components/GameComponent.html":{},"components/HomepageComponent.html":{},"components/NotFoundComponent.html":{}}}],["metadata",{"_index":13,"title":{},"body":{"components/AppComponent.html":{},"components/CaseComponent.html":{},"components/EndGameComponent.html":{},"components/GameComponent.html":{},"components/HeaderComponent.html":{},"components/HomepageComponent.html":{},"components/NotFoundComponent.html":{}}}],["methods",{"_index":282,"title":{},"body":{"components/GameComponent.html":{},"injectables/GameState.html":{},"classes/GameStateModel.html":{},"components/HeaderComponent.html":{},"components/HomepageComponent.html":{},"injectables/ThemeState.html":{},"injectables/VictoryCheckService.html":{}}}],["min",{"_index":43,"title":{},"body":{"components/AppComponent.html":{}}}],["model",{"_index":577,"title":{},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{},"injectables/ThemeState.html":{},"classes/ThemeStateModel.html":{}}}],["models/game",{"_index":361,"title":{},"body":{"components/GameComponent.html":{}}}],["models/pawn",{"_index":362,"title":{},"body":{"components/GameComponent.html":{}}}],["models/player",{"_index":367,"title":{},"body":{"components/GameComponent.html":{}}}],["module",{"_index":74,"title":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules/GameModule.html":{},"modules/GameRoutingModule.html":{},"modules/HomepageModule.html":{},"modules/HomepageRoutingModule.html":{},"modules/MaterialModule.html":{}},"body":{}}],["modules",{"_index":76,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules/GameModule.html":{},"modules/GameRoutingModule.html":{},"modules/HomepageModule.html":{},"modules/HomepageRoutingModule.html":{},"modules/MaterialModule.html":{},"modules.html":{},"overview.html":{}}}],["n'existe",{"_index":814,"title":{},"body":{"components/NotFoundComponent.html":{}}}],["n\\'existe",{"_index":823,"title":{},"body":{"components/NotFoundComponent.html":{}}}],["name",{"_index":55,"title":{},"body":{"components/AppComponent.html":{},"components/CaseComponent.html":{},"components/EndGameComponent.html":{},"components/GameComponent.html":{},"injectables/GameState.html":{},"classes/GameStateModel.html":{},"components/HeaderComponent.html":{},"components/HomepageComponent.html":{},"components/NotFoundComponent.html":{},"interfaces/Player.html":{},"injectables/ThemeState.html":{},"classes/ThemeStateModel.html":{},"injectables/VictoryCheckService.html":{}}}],["navigate",{"_index":676,"title":{},"body":{"components/HomepageComponent.html":{}}}],["new",{"_index":569,"title":{},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{},"coverage.html":{}}}],["next",{"_index":331,"title":{},"body":{"components/GameComponent.html":{}}}],["ng",{"_index":703,"title":{},"body":{"components/HomepageComponent.html":{}}}],["ngmodule",{"_index":91,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules/GameModule.html":{},"modules/GameRoutingModule.html":{},"modules/HomepageModule.html":{},"modules/HomepageRoutingModule.html":{},"modules/MaterialModule.html":{}}}],["ngoninit",{"_index":370,"title":{},"body":{"components/GameComponent.html":{},"components/HeaderComponent.html":{}}}],["ngxs.config",{"_index":111,"title":{},"body":{"modules/AppModule.html":{}}}],["ngxs/storage",{"_index":108,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["ngxs/store",{"_index":37,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/GameComponent.html":{},"injectables/GameState.html":{},"classes/GameStateModel.html":{},"components/HeaderComponent.html":{},"components/HomepageComponent.html":{},"injectables/ThemeState.html":{},"classes/ThemeStateModel.html":{},"dependencies.html":{}}}],["ngxs/store/operators",{"_index":572,"title":{},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{}}}],["ngxsconfig",{"_index":110,"title":{},"body":{"modules/AppModule.html":{}}}],["ngxsmodule",{"_index":106,"title":{},"body":{"modules/AppModule.html":{}}}],["ngxsmodule.forroot([themestate",{"_index":116,"title":{},"body":{"modules/AppModule.html":{}}}],["ngxsstoragepluginmodule",{"_index":107,"title":{},"body":{"modules/AppModule.html":{}}}],["ngxsstoragepluginmodule.forroot",{"_index":117,"title":{},"body":{"modules/AppModule.html":{}}}],["nombre",{"_index":402,"title":{},"body":{"components/GameComponent.html":{}}}],["none",{"_index":498,"title":{},"body":{"components/GameComponent.html":{}}}],["notfoundcomponent",{"_index":67,"title":{"components/NotFoundComponent.html":{}},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/CaseComponent.html":{},"components/EndGameComponent.html":{},"components/GameComponent.html":{},"components/HeaderComponent.html":{},"components/HomepageComponent.html":{},"components/NotFoundComponent.html":{},"coverage.html":{},"overview.html":{}}}],["now",{"_index":276,"title":{},"body":{"interfaces/Game.html":{},"interfaces/Player.html":{}}}],["nul",{"_index":242,"title":{},"body":{"components/EndGameComponent.html":{},"components/GameComponent.html":{}}}],["number",{"_index":268,"title":{},"body":{"interfaces/Game.html":{},"components/GameComponent.html":{},"injectables/GameState.html":{},"classes/GameStateModel.html":{},"interfaces/Pawn.html":{},"interfaces/Player.html":{},"injectables/VictoryCheckService.html":{}}}],["object",{"_index":681,"title":{},"body":{"components/HomepageComponent.html":{}}}],["observable",{"_index":25,"title":{},"body":{"components/AppComponent.html":{},"components/GameComponent.html":{},"components/HeaderComponent.html":{},"components/HomepageComponent.html":{}}}],["occuper",{"_index":413,"title":{},"body":{"components/GameComponent.html":{}}}],["ok",{"_index":397,"title":{},"body":{"components/GameComponent.html":{}}}],["one",{"_index":273,"title":{},"body":{"interfaces/Game.html":{},"components/GameComponent.html":{},"injectables/GameState.html":{},"classes/GameStateModel.html":{},"components/HeaderComponent.html":{},"components/HomepageComponent.html":{},"interfaces/Player.html":{}}}],["oninit",{"_index":279,"title":{},"body":{"components/GameComponent.html":{},"components/HeaderComponent.html":{}}}],["opacity",{"_index":177,"title":{},"body":{"components/CaseComponent.html":{},"components/GameComponent.html":{},"components/HomepageComponent.html":{}}}],["openendgamedialog",{"_index":290,"title":{},"body":{"components/GameComponent.html":{}}}],["openendgamedialog(winner",{"_index":333,"title":{},"body":{"components/GameComponent.html":{}}}],["optional",{"_index":220,"title":{},"body":{"components/EndGameComponent.html":{},"interfaces/Game.html":{},"components/GameComponent.html":{},"injectables/GameState.html":{},"components/HomepageComponent.html":{},"interfaces/Pawn.html":{},"injectables/ThemeState.html":{},"injectables/VictoryCheckService.html":{}}}],["ordonne",{"_index":877,"title":{},"body":{"injectables/VictoryCheckService.html":{}}}],["oups",{"_index":813,"title":{},"body":{"components/NotFoundComponent.html":{}}}],["out",{"_index":86,"title":{},"body":{"modules/AppModule.html":{},"modules/GameModule.html":{},"modules/HomepageModule.html":{},"overview.html":{}}}],["outline",{"_index":184,"title":{},"body":{"components/CaseComponent.html":{}}}],["overflow",{"_index":252,"title":{},"body":{"components/EndGameComponent.html":{}}}],["overlaymodule",{"_index":807,"title":{},"body":{"modules/MaterialModule.html":{}}}],["overview",{"_index":963,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["p",{"_index":425,"title":{},"body":{"components/GameComponent.html":{}}}],["p.player.id",{"_index":875,"title":{},"body":{"injectables/VictoryCheckService.html":{}}}],["p.x",{"_index":410,"title":{},"body":{"components/GameComponent.html":{},"injectables/VictoryCheckService.html":{}}}],["p.y",{"_index":424,"title":{},"body":{"components/GameComponent.html":{},"injectables/VictoryCheckService.html":{}}}],["package",{"_index":921,"title":{"dependencies.html":{}},"body":{}}],["padding",{"_index":193,"title":{},"body":{"components/CaseComponent.html":{},"components/GameComponent.html":{},"components/HomepageComponent.html":{},"components/NotFoundComponent.html":{}}}],["page",{"_index":677,"title":{},"body":{"components/HomepageComponent.html":{},"components/NotFoundComponent.html":{}}}],["par",{"_index":414,"title":{},"body":{"components/GameComponent.html":{}}}],["param",{"_index":239,"title":{},"body":{"components/EndGameComponent.html":{},"components/GameComponent.html":{},"components/HomepageComponent.html":{}}}],["parameter",{"_index":218,"title":{},"body":{"components/EndGameComponent.html":{}}}],["parameters",{"_index":219,"title":{},"body":{"components/EndGameComponent.html":{},"components/GameComponent.html":{},"injectables/GameState.html":{},"components/HomepageComponent.html":{},"injectables/ThemeState.html":{},"injectables/VictoryCheckService.html":{}}}],["paramètres",{"_index":422,"title":{},"body":{"components/GameComponent.html":{}}}],["pas",{"_index":815,"title":{},"body":{"components/NotFoundComponent.html":{}}}],["passée",{"_index":407,"title":{},"body":{"components/GameComponent.html":{}}}],["patchstate",{"_index":589,"title":{},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{},"injectables/ThemeState.html":{},"classes/ThemeStateModel.html":{}}}],["path",{"_index":140,"title":{},"body":{"modules/AppRoutingModule.html":{},"modules/GameRoutingModule.html":{},"modules/HomepageRoutingModule.html":{}}}],["pathmatch",{"_index":143,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["pawn",{"_index":164,"title":{"interfaces/Pawn.html":{}},"body":{"components/CaseComponent.html":{},"interfaces/Game.html":{},"components/GameComponent.html":{},"injectables/GameState.html":{},"classes/GameStateModel.html":{},"interfaces/Pawn.html":{},"injectables/VictoryCheckService.html":{},"coverage.html":{}}}],["pawn.y",{"_index":905,"title":{},"body":{"injectables/VictoryCheckService.html":{}}}],["pawncolor",{"_index":440,"title":{},"body":{"components/GameComponent.html":{}}}],["pawnlist",{"_index":885,"title":{},"body":{"injectables/VictoryCheckService.html":{}}}],["pawnlist[index",{"_index":886,"title":{},"body":{"injectables/VictoryCheckService.html":{}}}],["pawnplayed",{"_index":611,"title":{},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{},"injectables/VictoryCheckService.html":{}}}],["pawnplayed.player",{"_index":621,"title":{},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{}}}],["pawnplayed.player.id",{"_index":876,"title":{},"body":{"injectables/VictoryCheckService.html":{}}}],["pawnplayed.x",{"_index":615,"title":{},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{},"injectables/VictoryCheckService.html":{}}}],["pawnplayed.y",{"_index":613,"title":{},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{},"injectables/VictoryCheckService.html":{}}}],["pawns",{"_index":263,"title":{},"body":{"interfaces/Game.html":{},"components/GameComponent.html":{},"injectables/GameState.html":{},"classes/GameStateModel.html":{},"injectables/VictoryCheckService.html":{}}}],["pawnsincolumn",{"_index":399,"title":{},"body":{"components/GameComponent.html":{}}}],["pawnslist",{"_index":606,"title":{},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{}}}],["pawntoanimate",{"_index":442,"title":{},"body":{"components/GameComponent.html":{}}}],["pawntoanimate.classlist.add(\"show",{"_index":446,"title":{},"body":{"components/GameComponent.html":{}}}],["pawntoanimate.classlist.remove(\"show",{"_index":451,"title":{},"body":{"components/GameComponent.html":{}}}],["pawntoanimate.style.top",{"_index":448,"title":{},"body":{"components/GameComponent.html":{}}}],["pawntodisplay",{"_index":416,"title":{},"body":{"components/GameComponent.html":{}}}],["payload",{"_index":590,"title":{},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{}}}],["pion",{"_index":415,"title":{},"body":{"components/GameComponent.html":{},"injectables/GameState.html":{},"classes/GameStateModel.html":{}}}],["pions",{"_index":404,"title":{},"body":{"components/GameComponent.html":{},"injectables/VictoryCheckService.html":{}}}],["play",{"_index":275,"title":{},"body":{"interfaces/Game.html":{},"components/GameComponent.html":{}}}],["played",{"_index":271,"title":{},"body":{"interfaces/Game.html":{},"components/GameComponent.html":{},"injectables/GameState.html":{},"classes/GameStateModel.html":{},"interfaces/Pawn.html":{},"injectables/VictoryCheckService.html":{}}}],["playedpawn",{"_index":318,"title":{},"body":{"components/GameComponent.html":{}}}],["playedpawn.y",{"_index":382,"title":{},"body":{"components/GameComponent.html":{}}}],["player",{"_index":215,"title":{"interfaces/Player.html":{}},"body":{"components/EndGameComponent.html":{},"interfaces/Game.html":{},"components/GameComponent.html":{},"injectables/GameState.html":{},"classes/GameStateModel.html":{},"interfaces/Pawn.html":{},"interfaces/Player.html":{},"coverage.html":{}}}],["player.id",{"_index":441,"title":{},"body":{"components/GameComponent.html":{}}}],["player1",{"_index":264,"title":{},"body":{"interfaces/Game.html":{},"injectables/GameState.html":{},"classes/GameStateModel.html":{}}}],["player2",{"_index":265,"title":{},"body":{"interfaces/Game.html":{},"injectables/GameState.html":{},"classes/GameStateModel.html":{}}}],["playercolumn",{"_index":873,"title":{},"body":{"injectables/VictoryCheckService.html":{}}}],["playercolumn.map((pawn",{"_index":884,"title":{},"body":{"injectables/VictoryCheckService.html":{}}}],["playercolumn.sort((a,b",{"_index":879,"title":{},"body":{"injectables/VictoryCheckService.html":{}}}],["playerpawns",{"_index":901,"title":{},"body":{"injectables/VictoryCheckService.html":{}}}],["playerpawns.map((pawn",{"_index":903,"title":{},"body":{"injectables/VictoryCheckService.html":{}}}],["playerpawns.sort((a,b",{"_index":902,"title":{},"body":{"injectables/VictoryCheckService.html":{}}}],["playerrow",{"_index":892,"title":{},"body":{"injectables/VictoryCheckService.html":{}}}],["playerrow.map((pawn",{"_index":896,"title":{},"body":{"injectables/VictoryCheckService.html":{}}}],["playerrow.sort((a,b",{"_index":893,"title":{},"body":{"injectables/VictoryCheckService.html":{}}}],["players",{"_index":579,"title":{},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{}}}],["playpawn",{"_index":291,"title":{},"body":{"components/GameComponent.html":{},"injectables/GameState.html":{},"classes/GameStateModel.html":{}}}],["playpawn(column",{"_index":338,"title":{},"body":{"components/GameComponent.html":{}}}],["playpawn(undefined",{"_index":555,"title":{},"body":{"injectables/GameState.html":{}}}],["playpawn({getstate",{"_index":605,"title":{},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{}}}],["pleine",{"_index":246,"title":{},"body":{"components/EndGameComponent.html":{},"components/GameComponent.html":{},"injectables/GameState.html":{},"classes/GameStateModel.html":{}}}],["plugin",{"_index":109,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["portalmodule",{"_index":728,"title":{},"body":{"modules/MaterialModule.html":{}}}],["position",{"_index":173,"title":{},"body":{"components/CaseComponent.html":{},"components/GameComponent.html":{},"components/HeaderComponent.html":{}}}],["pour",{"_index":616,"title":{},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{}}}],["present",{"_index":322,"title":{},"body":{"components/GameComponent.html":{}}}],["private",{"_index":285,"title":{},"body":{"components/GameComponent.html":{},"injectables/GameState.html":{},"classes/GameStateModel.html":{},"components/HomepageComponent.html":{}}}],["properties",{"_index":21,"title":{},"body":{"components/AppComponent.html":{},"components/EndGameComponent.html":{},"interfaces/Game.html":{},"components/GameComponent.html":{},"injectables/GameState.html":{},"classes/GameStateModel.html":{},"components/HeaderComponent.html":{},"components/HomepageComponent.html":{},"interfaces/Pawn.html":{},"interfaces/Player.html":{},"classes/ThemeStateModel.html":{}}}],["provide",{"_index":850,"title":{},"body":{"injectables/VictoryCheckService.html":{}}}],["providedin",{"_index":867,"title":{},"body":{"injectables/VictoryCheckService.html":{}}}],["providers",{"_index":133,"title":{},"body":{"modules/AppModule.html":{}}}],["public",{"_index":209,"title":{},"body":{"components/EndGameComponent.html":{},"components/GameComponent.html":{},"injectables/VictoryCheckService.html":{}}}],["puissance",{"_index":654,"title":{},"body":{"components/HeaderComponent.html":{}}}],["puissance4",{"_index":939,"title":{},"body":{"index.html":{}}}],["purpose",{"_index":829,"title":{},"body":{"interfaces/Pawn.html":{}}}],["put",{"_index":327,"title":{},"body":{"components/GameComponent.html":{}}}],["qui",{"_index":870,"title":{},"body":{"injectables/VictoryCheckService.html":{}}}],["quit",{"_index":435,"title":{},"body":{"components/GameComponent.html":{}}}],["quitter",{"_index":247,"title":{},"body":{"components/EndGameComponent.html":{}}}],["radius",{"_index":467,"title":{},"body":{"components/GameComponent.html":{},"components/HomepageComponent.html":{}}}],["red",{"_index":197,"title":{},"body":{"components/CaseComponent.html":{},"components/EndGameComponent.html":{},"components/GameComponent.html":{},"injectables/GameState.html":{},"classes/GameStateModel.html":{}}}],["redirectto",{"_index":141,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["redwins",{"_index":210,"title":{},"body":{"components/EndGameComponent.html":{}}}],["register",{"_index":122,"title":{},"body":{"modules/AppModule.html":{}}}],["registerwhenstable:30000",{"_index":132,"title":{},"body":{"modules/AppModule.html":{}}}],["registrationstrategy",{"_index":131,"title":{},"body":{"modules/AppModule.html":{}}}],["rejouer",{"_index":248,"title":{},"body":{"components/EndGameComponent.html":{}}}],["relative",{"_index":174,"title":{},"body":{"components/CaseComponent.html":{}}}],["remove",{"_index":309,"title":{},"body":{"components/GameComponent.html":{}}}],["removeitem",{"_index":571,"title":{},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{}}}],["removes",{"_index":347,"title":{},"body":{"components/GameComponent.html":{},"injectables/GameState.html":{},"classes/GameStateModel.html":{}}}],["repeat(11",{"_index":475,"title":{},"body":{"components/GameComponent.html":{}}}],["repeat(13",{"_index":477,"title":{},"body":{"components/GameComponent.html":{}}}],["repeat(15",{"_index":479,"title":{},"body":{"components/GameComponent.html":{}}}],["repeat(5",{"_index":470,"title":{},"body":{"components/GameComponent.html":{}}}],["repeat(7",{"_index":463,"title":{},"body":{"components/GameComponent.html":{}}}],["repeat(9",{"_index":473,"title":{},"body":{"components/GameComponent.html":{}}}],["replay",{"_index":438,"title":{},"body":{"components/GameComponent.html":{}}}],["represents",{"_index":260,"title":{},"body":{"interfaces/Game.html":{},"interfaces/Pawn.html":{},"interfaces/Player.html":{}}}],["reset",{"_index":85,"title":{},"body":{"modules/AppModule.html":{},"modules/GameModule.html":{},"injectables/GameState.html":{},"classes/GameStateModel.html":{},"modules/HomepageModule.html":{},"overview.html":{}}}],["resetgame",{"_index":292,"title":{},"body":{"components/GameComponent.html":{},"injectables/GameState.html":{}}}],["resetgame(undefined",{"_index":559,"title":{},"body":{"injectables/GameState.html":{}}}],["resetgame({getstate",{"_index":595,"title":{},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{}}}],["resets",{"_index":675,"title":{},"body":{"components/HomepageComponent.html":{}}}],["result",{"_index":71,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/CaseComponent.html":{},"components/EndGameComponent.html":{},"interfaces/Game.html":{},"components/GameComponent.html":{},"modules/GameModule.html":{},"modules/GameRoutingModule.html":{},"injectables/GameState.html":{},"classes/GameStateModel.html":{},"components/HeaderComponent.html":{},"components/HomepageComponent.html":{},"modules/HomepageModule.html":{},"modules/HomepageRoutingModule.html":{},"modules/MaterialModule.html":{},"components/NotFoundComponent.html":{},"interfaces/Pawn.html":{},"interfaces/Player.html":{},"injectables/ThemeState.html":{},"classes/ThemeStateModel.html":{},"injectables/VictoryCheckService.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"routes.html":{}}}],["results",{"_index":73,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/CaseComponent.html":{},"components/EndGameComponent.html":{},"interfaces/Game.html":{},"components/GameComponent.html":{},"modules/GameModule.html":{},"modules/GameRoutingModule.html":{},"injectables/GameState.html":{},"classes/GameStateModel.html":{},"components/HeaderComponent.html":{},"components/HomepageComponent.html":{},"modules/HomepageModule.html":{},"modules/HomepageRoutingModule.html":{},"modules/MaterialModule.html":{},"components/NotFoundComponent.html":{},"interfaces/Pawn.html":{},"interfaces/Player.html":{},"injectables/ThemeState.html":{},"classes/ThemeStateModel.html":{},"injectables/VictoryCheckService.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"routes.html":{}}}],["retourne",{"_index":412,"title":{},"body":{"components/GameComponent.html":{}}}],["retrieves",{"_index":839,"title":{},"body":{"injectables/ThemeState.html":{},"classes/ThemeStateModel.html":{}}}],["return",{"_index":398,"title":{},"body":{"components/GameComponent.html":{},"injectables/GameState.html":{},"classes/GameStateModel.html":{},"injectables/ThemeState.html":{},"classes/ThemeStateModel.html":{},"injectables/VictoryCheckService.html":{}}}],["returns",{"_index":304,"title":{},"body":{"components/GameComponent.html":{},"injectables/GameState.html":{},"classes/GameStateModel.html":{},"components/HeaderComponent.html":{},"components/HomepageComponent.html":{},"injectables/ThemeState.html":{},"injectables/VictoryCheckService.html":{}}}],["revenir",{"_index":816,"title":{},"body":{"components/NotFoundComponent.html":{}}}],["right",{"_index":482,"title":{},"body":{"components/GameComponent.html":{},"injectables/VictoryCheckService.html":{}}}],["root",{"_index":15,"title":{},"body":{"components/AppComponent.html":{},"injectables/VictoryCheckService.html":{}}}],["root'},{'name",{"_index":56,"title":{},"body":{"components/AppComponent.html":{},"components/CaseComponent.html":{},"components/EndGameComponent.html":{},"components/GameComponent.html":{},"components/HeaderComponent.html":{},"components/HomepageComponent.html":{},"components/NotFoundComponent.html":{}}}],["rotate(45deg",{"_index":707,"title":{},"body":{"components/HomepageComponent.html":{}}}],["rouges",{"_index":227,"title":{},"body":{"components/EndGameComponent.html":{}}}],["router",{"_index":366,"title":{},"body":{"components/GameComponent.html":{},"components/HomepageComponent.html":{}}}],["routermodule",{"_index":136,"title":{},"body":{"modules/AppRoutingModule.html":{},"modules/GameRoutingModule.html":{},"modules/HomepageRoutingModule.html":{}}}],["routermodule.forchild(routes",{"_index":518,"title":{},"body":{"modules/GameRoutingModule.html":{},"modules/HomepageRoutingModule.html":{}}}],["routermodule.forroot(routes",{"_index":152,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["routes",{"_index":137,"title":{"routes.html":{}},"body":{"modules/AppRoutingModule.html":{},"modules/GameRoutingModule.html":{},"modules/HomepageRoutingModule.html":{},"overview.html":{},"routes.html":{}}}],["routing.module",{"_index":95,"title":{},"body":{"modules/AppModule.html":{},"modules/GameModule.html":{},"modules/HomepageModule.html":{}}}],["routing.module.ts",{"_index":135,"title":{},"body":{"modules/AppRoutingModule.html":{},"modules/GameRoutingModule.html":{},"modules/HomepageRoutingModule.html":{}}}],["row",{"_index":294,"title":{},"body":{"components/GameComponent.html":{},"components/HomepageComponent.html":{},"injectables/VictoryCheckService.html":{}}}],["rowplayed",{"_index":861,"title":{},"body":{"injectables/VictoryCheckService.html":{}}}],["rows",{"_index":266,"title":{},"body":{"interfaces/Game.html":{},"components/GameComponent.html":{},"injectables/GameState.html":{},"classes/GameStateModel.html":{},"components/HomepageComponent.html":{}}}],["rxjs",{"_index":38,"title":{},"body":{"components/AppComponent.html":{},"components/GameComponent.html":{},"components/HeaderComponent.html":{},"components/HomepageComponent.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":360,"title":{},"body":{"components/GameComponent.html":{},"components/HeaderComponent.html":{}}}],["récupère",{"_index":401,"title":{},"body":{"components/GameComponent.html":{},"injectables/VictoryCheckService.html":{}}}],["scale(0",{"_index":709,"title":{},"body":{"components/HomepageComponent.html":{}}}],["scrollingmodule",{"_index":730,"title":{},"body":{"modules/MaterialModule.html":{}}}],["seconds",{"_index":127,"title":{},"body":{"modules/AppModule.html":{}}}],["select",{"_index":36,"title":{},"body":{"components/AppComponent.html":{},"components/GameComponent.html":{},"components/HeaderComponent.html":{},"components/HomepageComponent.html":{}}}],["select(gamestate.getcolumns",{"_index":678,"title":{},"body":{"components/HomepageComponent.html":{}}}],["select(gamestate.getgame",{"_index":348,"title":{},"body":{"components/GameComponent.html":{}}}],["select(gamestate.getrows",{"_index":682,"title":{},"body":{"components/HomepageComponent.html":{}}}],["select(themestate.gettheme",{"_index":27,"title":{},"body":{"components/AppComponent.html":{},"components/HeaderComponent.html":{}}}],["selected",{"_index":269,"title":{},"body":{"interfaces/Game.html":{},"injectables/GameState.html":{},"classes/GameStateModel.html":{},"components/HeaderComponent.html":{},"injectables/ThemeState.html":{},"classes/ThemeStateModel.html":{}}}],["selector",{"_index":14,"title":{},"body":{"components/AppComponent.html":{},"components/CaseComponent.html":{},"components/EndGameComponent.html":{},"components/GameComponent.html":{},"injectables/GameState.html":{},"classes/GameStateModel.html":{},"components/HeaderComponent.html":{},"components/HomepageComponent.html":{},"components/NotFoundComponent.html":{},"injectables/ThemeState.html":{},"classes/ThemeStateModel.html":{}}}],["service",{"_index":538,"title":{},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{}}}],["services/victory",{"_index":575,"title":{},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{}}}],["serviceworker",{"_index":123,"title":{},"body":{"modules/AppModule.html":{}}}],["serviceworkermodule",{"_index":100,"title":{},"body":{"modules/AppModule.html":{}}}],["serviceworkermodule.register('ngsw",{"_index":118,"title":{},"body":{"modules/AppModule.html":{}}}],["set",{"_index":166,"title":{},"body":{"components/CaseComponent.html":{},"components/GameComponent.html":{},"injectables/GameState.html":{},"classes/GameStateModel.html":{},"components/HeaderComponent.html":{},"components/HomepageComponent.html":{}}}],["setcolumns",{"_index":527,"title":{},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{},"components/HomepageComponent.html":{}}}],["setcolumns(event",{"_index":668,"title":{},"body":{"components/HomepageComponent.html":{}}}],["setcolumns(event.value",{"_index":685,"title":{},"body":{"components/HomepageComponent.html":{}}}],["setcolumns(undefined",{"_index":562,"title":{},"body":{"injectables/GameState.html":{}}}],["setcolumns({getstate",{"_index":594,"title":{},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{}}}],["setrows",{"_index":528,"title":{},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{},"components/HomepageComponent.html":{}}}],["setrows(event",{"_index":672,"title":{},"body":{"components/HomepageComponent.html":{}}}],["setrows(event.value",{"_index":686,"title":{},"body":{"components/HomepageComponent.html":{}}}],["setrows(undefined",{"_index":565,"title":{},"body":{"injectables/GameState.html":{}}}],["setrows({getstate",{"_index":593,"title":{},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{}}}],["sets",{"_index":311,"title":{},"body":{"components/GameComponent.html":{},"injectables/GameState.html":{},"classes/GameStateModel.html":{},"components/HomepageComponent.html":{},"injectables/ThemeState.html":{},"classes/ThemeStateModel.html":{}}}],["settimeout",{"_index":447,"title":{},"body":{"components/GameComponent.html":{}}}],["shadow",{"_index":189,"title":{},"body":{"components/CaseComponent.html":{},"components/GameComponent.html":{},"components/HeaderComponent.html":{},"components/HomepageComponent.html":{}}}],["sheet",{"_index":744,"title":{},"body":{"modules/MaterialModule.html":{}}}],["show",{"_index":230,"title":{},"body":{"components/EndGameComponent.html":{},"components/GameComponent.html":{}}}],["shown",{"_index":205,"title":{},"body":{"components/EndGameComponent.html":{}}}],["shows",{"_index":335,"title":{},"body":{"components/GameComponent.html":{}}}],["si",{"_index":385,"title":{},"body":{"components/GameComponent.html":{},"injectables/VictoryCheckService.html":{}}}],["size",{"_index":182,"title":{},"body":{"components/CaseComponent.html":{},"components/HomepageComponent.html":{},"components/NotFoundComponent.html":{}}}],["slider",{"_index":670,"title":{},"body":{"components/HomepageComponent.html":{}}}],["small",{"_index":692,"title":{},"body":{"components/HomepageComponent.html":{}}}],["snackbar",{"_index":341,"title":{},"body":{"components/GameComponent.html":{}}}],["solid",{"_index":186,"title":{},"body":{"components/CaseComponent.html":{},"components/GameComponent.html":{}}}],["soon",{"_index":124,"title":{},"body":{"modules/AppModule.html":{}}}],["source",{"_index":4,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/CaseComponent.html":{},"components/EndGameComponent.html":{},"interfaces/Game.html":{},"components/GameComponent.html":{},"modules/GameModule.html":{},"modules/GameRoutingModule.html":{},"injectables/GameState.html":{},"classes/GameStateModel.html":{},"components/HeaderComponent.html":{},"components/HomepageComponent.html":{},"modules/HomepageModule.html":{},"modules/HomepageRoutingModule.html":{},"modules/MaterialModule.html":{},"components/NotFoundComponent.html":{},"interfaces/Pawn.html":{},"interfaces/Player.html":{},"injectables/ThemeState.html":{},"classes/ThemeStateModel.html":{},"injectables/VictoryCheckService.html":{}}}],["spinner",{"_index":783,"title":{},"body":{"modules/MaterialModule.html":{}}}],["src/app/app",{"_index":134,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["src/app/app.component.ts",{"_index":10,"title":{},"body":{"components/AppComponent.html":{},"coverage.html":{}}}],["src/app/app.component.ts:18",{"_index":29,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.module.ts",{"_index":87,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app/game/case/case.component.ts",{"_index":154,"title":{},"body":{"components/CaseComponent.html":{},"coverage.html":{}}}],["src/app/game/case/case.component.ts:18",{"_index":165,"title":{},"body":{"components/CaseComponent.html":{}}}],["src/app/game/dialogs/end",{"_index":201,"title":{},"body":{"components/EndGameComponent.html":{},"coverage.html":{}}}],["src/app/game/game",{"_index":517,"title":{},"body":{"modules/GameRoutingModule.html":{}}}],["src/app/game/game.component.ts",{"_index":277,"title":{},"body":{"components/GameComponent.html":{},"coverage.html":{}}}],["src/app/game/game.component.ts:117",{"_index":329,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/game/game.component.ts:133",{"_index":321,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/game/game.component.ts:151",{"_index":313,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/game/game.component.ts:163",{"_index":334,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/game/game.component.ts:190",{"_index":295,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/game/game.component.ts:29",{"_index":349,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/game/game.component.ts:35",{"_index":351,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/game/game.component.ts:41",{"_index":354,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/game/game.component.ts:63",{"_index":332,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/game/game.component.ts:73",{"_index":343,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/game/game.component.ts:80",{"_index":306,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/game/game.component.ts:88",{"_index":339,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/game/game.module.ts",{"_index":510,"title":{},"body":{"modules/GameModule.html":{}}}],["src/app/homepage/homepage",{"_index":719,"title":{},"body":{"modules/HomepageRoutingModule.html":{}}}],["src/app/homepage/homepage.component.ts",{"_index":664,"title":{},"body":{"components/HomepageComponent.html":{},"coverage.html":{}}}],["src/app/homepage/homepage.component.ts:23",{"_index":683,"title":{},"body":{"components/HomepageComponent.html":{}}}],["src/app/homepage/homepage.component.ts:29",{"_index":679,"title":{},"body":{"components/HomepageComponent.html":{}}}],["src/app/homepage/homepage.component.ts:41",{"_index":674,"title":{},"body":{"components/HomepageComponent.html":{}}}],["src/app/homepage/homepage.component.ts:49",{"_index":669,"title":{},"body":{"components/HomepageComponent.html":{}}}],["src/app/homepage/homepage.component.ts:56",{"_index":673,"title":{},"body":{"components/HomepageComponent.html":{}}}],["src/app/homepage/homepage.module.ts",{"_index":715,"title":{},"body":{"modules/HomepageModule.html":{}}}],["src/app/layout/header/header.component.ts",{"_index":631,"title":{},"body":{"components/HeaderComponent.html":{},"coverage.html":{}}}],["src/app/layout/header/header.component.ts:22",{"_index":646,"title":{},"body":{"components/HeaderComponent.html":{}}}],["src/app/layout/header/header.component.ts:41",{"_index":644,"title":{},"body":{"components/HeaderComponent.html":{}}}],["src/app/layout/header/header.component.ts:49",{"_index":638,"title":{},"body":{"components/HeaderComponent.html":{}}}],["src/app/material/material.module.ts",{"_index":720,"title":{},"body":{"modules/MaterialModule.html":{}}}],["src/app/models/game",{"_index":573,"title":{},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{},"injectables/VictoryCheckService.html":{}}}],["src/app/models/game.ts",{"_index":259,"title":{},"body":{"interfaces/Game.html":{},"coverage.html":{}}}],["src/app/models/pawn",{"_index":170,"title":{},"body":{"components/CaseComponent.html":{},"injectables/VictoryCheckService.html":{}}}],["src/app/models/pawn.ts",{"_index":825,"title":{},"body":{"interfaces/Pawn.html":{},"coverage.html":{}}}],["src/app/models/player",{"_index":238,"title":{},"body":{"components/EndGameComponent.html":{},"injectables/GameState.html":{},"classes/GameStateModel.html":{}}}],["src/app/models/player.ts",{"_index":832,"title":{},"body":{"interfaces/Player.html":{},"coverage.html":{}}}],["src/app/not",{"_index":809,"title":{},"body":{"components/NotFoundComponent.html":{},"coverage.html":{}}}],["src/app/store/game/game.state.ts",{"_index":521,"title":{},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{},"coverage.html":{}}}],["src/app/store/game/game.state.ts:106",{"_index":564,"title":{},"body":{"injectables/GameState.html":{}}}],["src/app/store/game/game.state.ts:122",{"_index":561,"title":{},"body":{"injectables/GameState.html":{}}}],["src/app/store/game/game.state.ts:137",{"_index":532,"title":{},"body":{"injectables/GameState.html":{}}}],["src/app/store/game/game.state.ts:157",{"_index":557,"title":{},"body":{"injectables/GameState.html":{}}}],["src/app/store/game/game.state.ts:16",{"_index":630,"title":{},"body":{"classes/GameStateModel.html":{}}}],["src/app/store/game/game.state.ts:177",{"_index":536,"title":{},"body":{"injectables/GameState.html":{}}}],["src/app/store/game/game.state.ts:46",{"_index":570,"title":{},"body":{"injectables/GameState.html":{}}}],["src/app/store/game/game.state.ts:52",{"_index":547,"title":{},"body":{"injectables/GameState.html":{}}}],["src/app/store/game/game.state.ts:60",{"_index":549,"title":{},"body":{"injectables/GameState.html":{}}}],["src/app/store/game/game.state.ts:68",{"_index":545,"title":{},"body":{"injectables/GameState.html":{}}}],["src/app/store/game/game.state.ts:76",{"_index":553,"title":{},"body":{"injectables/GameState.html":{}}}],["src/app/store/game/game.state.ts:90",{"_index":567,"title":{},"body":{"injectables/GameState.html":{}}}],["src/app/store/services/victory",{"_index":848,"title":{},"body":{"injectables/VictoryCheckService.html":{},"coverage.html":{}}}],["src/app/store/theme/theme.state.ts",{"_index":834,"title":{},"body":{"injectables/ThemeState.html":{},"classes/ThemeStateModel.html":{},"coverage.html":{}}}],["src/app/store/theme/theme.state.ts:12",{"_index":847,"title":{},"body":{"classes/ThemeStateModel.html":{}}}],["src/app/store/theme/theme.state.ts:31",{"_index":838,"title":{},"body":{"injectables/ThemeState.html":{}}}],["src/app/store/theme/theme.state.ts:39",{"_index":843,"title":{},"body":{"injectables/ThemeState.html":{}}}],["stable",{"_index":125,"title":{},"body":{"modules/AppModule.html":{}}}],["start",{"_index":346,"title":{},"body":{"components/GameComponent.html":{}}}],["started",{"_index":938,"title":{"index.html":{}},"body":{}}],["startgame",{"_index":667,"title":{},"body":{"components/HomepageComponent.html":{}}}],["state",{"_index":261,"title":{},"body":{"interfaces/Game.html":{},"components/GameComponent.html":{},"injectables/GameState.html":{},"classes/GameStateModel.html":{},"injectables/ThemeState.html":{},"classes/ThemeStateModel.html":{}}}],["state.dark",{"_index":845,"title":{},"body":{"injectables/ThemeState.html":{},"classes/ThemeStateModel.html":{}}}],["state.game",{"_index":585,"title":{},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{}}}],["state.game.columns",{"_index":587,"title":{},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{}}}],["state.game.pawns",{"_index":607,"title":{},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{}}}],["state.game.pawns.slice(0",{"_index":598,"title":{},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{}}}],["state.game.player1",{"_index":592,"title":{},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{}}}],["state.game.player1.id",{"_index":603,"title":{},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{}}}],["state.game.player2",{"_index":604,"title":{},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{}}}],["state.game.rows",{"_index":586,"title":{},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{}}}],["state.game.turn?.id",{"_index":602,"title":{},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{}}}],["statecontext",{"_index":530,"title":{},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{},"injectables/ThemeState.html":{},"classes/ThemeStateModel.html":{}}}],["statements",{"_index":909,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":523,"title":{},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{},"injectables/ThemeState.html":{},"classes/ThemeStateModel.html":{}}}],["sticky",{"_index":657,"title":{},"body":{"components/HeaderComponent.html":{}}}],["store",{"_index":31,"title":{},"body":{"components/AppComponent.html":{},"components/EndGameComponent.html":{},"components/GameComponent.html":{},"components/HeaderComponent.html":{},"components/HomepageComponent.html":{}}}],["store.game.game.columns",{"_index":393,"title":{},"body":{"components/GameComponent.html":{}}}],["store.game.game.rows",{"_index":392,"title":{},"body":{"components/GameComponent.html":{}}}],["store/game/game.actions",{"_index":363,"title":{},"body":{"components/GameComponent.html":{},"components/HomepageComponent.html":{}}}],["store/game/game.state",{"_index":113,"title":{},"body":{"modules/AppModule.html":{},"components/GameComponent.html":{},"components/HomepageComponent.html":{}}}],["store/theme/theme.actions",{"_index":647,"title":{},"body":{"components/HeaderComponent.html":{}}}],["store/theme/theme.state",{"_index":40,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/HeaderComponent.html":{}}}],["string",{"_index":222,"title":{},"body":{"components/EndGameComponent.html":{},"interfaces/Player.html":{}}}],["styles",{"_index":6,"title":{},"body":{"components/AppComponent.html":{},"components/CaseComponent.html":{},"components/EndGameComponent.html":{},"components/GameComponent.html":{},"components/HeaderComponent.html":{},"components/HomepageComponent.html":{},"components/NotFoundComponent.html":{}}}],["styleurls",{"_index":16,"title":{},"body":{"components/AppComponent.html":{},"components/CaseComponent.html":{},"components/EndGameComponent.html":{},"components/GameComponent.html":{},"components/HeaderComponent.html":{},"components/HomepageComponent.html":{},"components/NotFoundComponent.html":{}}}],["subscribe",{"_index":380,"title":{},"body":{"components/GameComponent.html":{}}}],["support",{"_index":958,"title":{},"body":{"modules.html":{}}}],["sur",{"_index":389,"title":{},"body":{"components/GameComponent.html":{},"index.html":{}}}],["svg",{"_index":959,"title":{},"body":{"modules.html":{}}}],["switch",{"_index":434,"title":{},"body":{"components/GameComponent.html":{}}}],["sync",{"_index":455,"title":{},"body":{"components/GameComponent.html":{}}}],["table",{"_index":920,"title":{},"body":{"coverage.html":{}}}],["tableau",{"_index":878,"title":{},"body":{"injectables/VictoryCheckService.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":919,"title":{},"body":{"coverage.html":{}}}],["tag",{"_index":641,"title":{},"body":{"components/HeaderComponent.html":{}}}],["take",{"_index":359,"title":{},"body":{"components/GameComponent.html":{},"components/HeaderComponent.html":{}}}],["takes",{"_index":217,"title":{},"body":{"components/EndGameComponent.html":{}}}],["template",{"_index":5,"title":{},"body":{"components/AppComponent.html":{},"components/CaseComponent.html":{},"components/EndGameComponent.html":{},"components/GameComponent.html":{},"components/HeaderComponent.html":{},"components/HomepageComponent.html":{},"components/NotFoundComponent.html":{}}}],["templateurl",{"_index":18,"title":{},"body":{"components/AppComponent.html":{},"components/CaseComponent.html":{},"components/EndGameComponent.html":{},"components/GameComponent.html":{},"components/HeaderComponent.html":{},"components/HomepageComponent.html":{},"components/NotFoundComponent.html":{}}}],["termine",{"_index":386,"title":{},"body":{"components/GameComponent.html":{}}}],["tester",{"_index":940,"title":{},"body":{"index.html":{}}}],["text",{"_index":229,"title":{},"body":{"components/EndGameComponent.html":{},"components/GameComponent.html":{},"components/HeaderComponent.html":{},"components/HomepageComponent.html":{},"components/NotFoundComponent.html":{}}}],["theme",{"_index":30,"title":{},"body":{"components/AppComponent.html":{},"components/HeaderComponent.html":{},"injectables/ThemeState.html":{},"classes/ThemeStateModel.html":{}}}],["theme.actions",{"_index":844,"title":{},"body":{"injectables/ThemeState.html":{},"classes/ThemeStateModel.html":{}}}],["themestate",{"_index":39,"title":{"injectables/ThemeState.html":{}},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/HeaderComponent.html":{},"injectables/ThemeState.html":{},"classes/ThemeStateModel.html":{},"coverage.html":{}}}],["themestatemodel",{"_index":837,"title":{"classes/ThemeStateModel.html":{}},"body":{"injectables/ThemeState.html":{},"classes/ThemeStateModel.html":{},"coverage.html":{}}}],["theming",{"_index":643,"title":{},"body":{"components/HeaderComponent.html":{}}}],["there's",{"_index":542,"title":{},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{}}}],["this._snack.open(error.message",{"_index":396,"title":{},"body":{"components/GameComponent.html":{}}}],["this.animatefallingpawn(playedpawn.x",{"_index":381,"title":{},"body":{"components/GameComponent.html":{}}}],["this.applydarktheme",{"_index":649,"title":{},"body":{"components/HeaderComponent.html":{}}}],["this.checkvictory(playedpawn",{"_index":383,"title":{},"body":{"components/GameComponent.html":{}}}],["this.dark.pipe(take(1)).subscribe(isdark",{"_index":650,"title":{},"body":{"components/HeaderComponent.html":{}}}],["this.dialog.open(endgamecomponent",{"_index":429,"title":{},"body":{"components/GameComponent.html":{}}}],["this.game.pipe(take(1)).subscribe(g",{"_index":372,"title":{},"body":{"components/GameComponent.html":{}}}],["this.getypositionincolumn(column",{"_index":378,"title":{},"body":{"components/GameComponent.html":{}}}],["this.gridx",{"_index":373,"title":{},"body":{"components/GameComponent.html":{}}}],["this.gridy",{"_index":375,"title":{},"body":{"components/GameComponent.html":{}}}],["this.gridy.length",{"_index":449,"title":{},"body":{"components/GameComponent.html":{}}}],["this.initgame",{"_index":371,"title":{},"body":{"components/GameComponent.html":{}}}],["this.openendgamedialog(store.game.game.winner",{"_index":394,"title":{},"body":{"components/GameComponent.html":{}}}],["this.resetgame",{"_index":439,"title":{},"body":{"components/GameComponent.html":{}}}],["this.router.navigate(['game",{"_index":684,"title":{},"body":{"components/HomepageComponent.html":{}}}],["this.router.navigate(['home",{"_index":436,"title":{},"body":{"components/GameComponent.html":{}}}],["this.store.dispatch(new",{"_index":377,"title":{},"body":{"components/GameComponent.html":{},"components/HeaderComponent.html":{},"components/HomepageComponent.html":{}}}],["throw",{"_index":600,"title":{},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{}}}],["thumb",{"_index":705,"title":{},"body":{"components/HomepageComponent.html":{}}}],["title",{"_index":256,"title":{},"body":{"components/EndGameComponent.html":{},"components/HomepageComponent.html":{}}}],["toggle",{"_index":748,"title":{},"body":{"modules/MaterialModule.html":{}}}],["toogle",{"_index":645,"title":{},"body":{"components/HeaderComponent.html":{}}}],["toogletheme",{"_index":637,"title":{},"body":{"components/HeaderComponent.html":{},"injectables/ThemeState.html":{},"classes/ThemeStateModel.html":{}}}],["toogletheme(undefined",{"_index":841,"title":{},"body":{"injectables/ThemeState.html":{}}}],["toogletheme({getstate",{"_index":846,"title":{},"body":{"injectables/ThemeState.html":{},"classes/ThemeStateModel.html":{}}}],["top",{"_index":490,"title":{},"body":{"components/GameComponent.html":{},"components/HeaderComponent.html":{},"components/HomepageComponent.html":{},"components/NotFoundComponent.html":{}}}],["tous",{"_index":900,"title":{},"body":{"injectables/VictoryCheckService.html":{}}}],["train",{"_index":661,"title":{},"body":{"components/HeaderComponent.html":{},"components/HomepageComponent.html":{}}}],["transform",{"_index":493,"title":{},"body":{"components/GameComponent.html":{},"components/HomepageComponent.html":{}}}],["transition",{"_index":496,"title":{},"body":{"components/GameComponent.html":{}}}],["translatex",{"_index":494,"title":{},"body":{"components/GameComponent.html":{}}}],["tree",{"_index":8,"title":{},"body":{"components/AppComponent.html":{},"components/CaseComponent.html":{},"components/EndGameComponent.html":{},"components/GameComponent.html":{},"components/HeaderComponent.html":{},"components/HomepageComponent.html":{},"components/NotFoundComponent.html":{}}}],["true",{"_index":432,"title":{},"body":{"components/GameComponent.html":{},"interfaces/Pawn.html":{},"injectables/ThemeState.html":{},"classes/ThemeStateModel.html":{},"injectables/VictoryCheckService.html":{}}}],["truncatedpawns",{"_index":597,"title":{},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{}}}],["tslib",{"_index":933,"title":{},"body":{"dependencies.html":{}}}],["turn",{"_index":267,"title":{},"body":{"interfaces/Game.html":{},"components/GameComponent.html":{},"injectables/GameState.html":{},"classes/GameStateModel.html":{}}}],["two",{"_index":274,"title":{},"body":{"interfaces/Game.html":{},"components/GameComponent.html":{},"injectables/GameState.html":{},"classes/GameStateModel.html":{}}}],["type",{"_index":23,"title":{},"body":{"components/AppComponent.html":{},"components/CaseComponent.html":{},"components/EndGameComponent.html":{},"interfaces/Game.html":{},"components/GameComponent.html":{},"injectables/GameState.html":{},"classes/GameStateModel.html":{},"components/HeaderComponent.html":{},"components/HomepageComponent.html":{},"interfaces/Pawn.html":{},"interfaces/Player.html":{},"injectables/ThemeState.html":{},"classes/ThemeStateModel.html":{},"injectables/VictoryCheckService.html":{},"coverage.html":{}}}],["un",{"_index":390,"title":{},"body":{"components/GameComponent.html":{}}}],["undefined",{"_index":534,"title":{},"body":{"injectables/GameState.html":{}}}],["undo",{"_index":454,"title":{},"body":{"components/GameComponent.html":{}}}],["une",{"_index":617,"title":{},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{}}}],["up",{"_index":299,"title":{},"body":{"components/GameComponent.html":{},"injectables/VictoryCheckService.html":{}}}],["update",{"_index":541,"title":{},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{}}}],["url(\"/assets/img/empty",{"_index":180,"title":{},"body":{"components/CaseComponent.html":{}}}],["url(\"/assets/img/red",{"_index":198,"title":{},"body":{"components/CaseComponent.html":{}}}],["url(\"/assets/img/yellow",{"_index":200,"title":{},"body":{"components/CaseComponent.html":{}}}],["used",{"_index":833,"title":{},"body":{"interfaces/Player.html":{}}}],["uses",{"_index":537,"title":{},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{}}}],["value",{"_index":224,"title":{},"body":{"components/EndGameComponent.html":{},"components/GameComponent.html":{},"injectables/GameState.html":{},"classes/GameStateModel.html":{},"classes/ThemeStateModel.html":{}}}],["var",{"_index":53,"title":{},"body":{"components/AppComponent.html":{},"components/CaseComponent.html":{},"components/EndGameComponent.html":{},"components/GameComponent.html":{},"components/HeaderComponent.html":{},"components/HomepageComponent.html":{},"components/NotFoundComponent.html":{}}}],["vertical",{"_index":330,"title":{},"body":{"components/GameComponent.html":{}}}],["verticalcheck",{"_index":854,"title":{},"body":{"injectables/VictoryCheckService.html":{}}}],["verticalcheck(game",{"_index":864,"title":{},"body":{"injectables/VictoryCheckService.html":{}}}],["verticale",{"_index":619,"title":{},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{}}}],["verticalement",{"_index":891,"title":{},"body":{"injectables/VictoryCheckService.html":{}}}],["vertically",{"_index":866,"title":{},"body":{"injectables/VictoryCheckService.html":{}}}],["victoire",{"_index":225,"title":{},"body":{"components/EndGameComponent.html":{}}}],["victory",{"_index":317,"title":{},"body":{"components/GameComponent.html":{},"injectables/GameState.html":{},"classes/GameStateModel.html":{}}}],["victorycheckservice",{"_index":568,"title":{"injectables/VictoryCheckService.html":{}},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{},"injectables/VictoryCheckService.html":{},"coverage.html":{}}}],["victoryservice",{"_index":522,"title":{},"body":{"injectables/GameState.html":{},"classes/GameStateModel.html":{}}}],["void",{"_index":305,"title":{},"body":{"components/GameComponent.html":{},"injectables/GameState.html":{},"components/HeaderComponent.html":{},"components/HomepageComponent.html":{},"injectables/ThemeState.html":{}}}],["vérif",{"_index":384,"title":{},"body":{"components/GameComponent.html":{}}}],["weight",{"_index":818,"title":{},"body":{"components/NotFoundComponent.html":{}}}],["whichever",{"_index":128,"title":{},"body":{"modules/AppModule.html":{}}}],["wich",{"_index":326,"title":{},"body":{"components/GameComponent.html":{}}}],["width",{"_index":175,"title":{},"body":{"components/CaseComponent.html":{},"components/EndGameComponent.html":{},"components/GameComponent.html":{},"components/HomepageComponent.html":{},"components/NotFoundComponent.html":{}}}],["win",{"_index":221,"title":{},"body":{"components/EndGameComponent.html":{},"interfaces/Game.html":{}}}],["win__image",{"_index":249,"title":{},"body":{"components/EndGameComponent.html":{}}}],["winner",{"_index":211,"title":{},"body":{"components/EndGameComponent.html":{},"interfaces/Game.html":{},"components/GameComponent.html":{},"injectables/GameState.html":{},"classes/GameStateModel.html":{}}}],["winning",{"_index":827,"title":{},"body":{"interfaces/Pawn.html":{}}}],["wins",{"_index":231,"title":{},"body":{"components/EndGameComponent.html":{}}}],["won",{"_index":337,"title":{},"body":{"components/GameComponent.html":{},"injectables/VictoryCheckService.html":{}}}],["worker",{"_index":102,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["worker.js",{"_index":119,"title":{},"body":{"modules/AppModule.html":{}}}],["x",{"_index":325,"title":{},"body":{"components/GameComponent.html":{},"interfaces/Pawn.html":{}}}],["y",{"_index":320,"title":{},"body":{"components/GameComponent.html":{},"interfaces/Pawn.html":{}}}],["yellow",{"_index":199,"title":{},"body":{"components/CaseComponent.html":{},"components/EndGameComponent.html":{},"components/GameComponent.html":{}}}],["yellowwins",{"_index":212,"title":{},"body":{"components/EndGameComponent.html":{}}}],["yes",{"_index":336,"title":{},"body":{"components/GameComponent.html":{}}}],["z",{"_index":176,"title":{},"body":{"components/CaseComponent.html":{},"components/GameComponent.html":{}}}],["zone.js",{"_index":935,"title":{},"body":{"dependencies.html":{}}}],["zoom",{"_index":84,"title":{},"body":{"modules/AppModule.html":{},"modules/GameModule.html":{},"modules/HomepageModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"components/AppComponent.html":{"url":"components/AppComponent.html","title":"component - AppComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  AppComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/app.component.ts\n\n\n\n    \n        Description\n    \n    \n        App component\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-root\n            \n\n            \n                styleUrls\n                ./app.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./app.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                isDarkTheme\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        isDarkTheme\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Select(ThemeState.getTheme)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app/app.component.ts:18\n                        \n                    \n\n            \n                \n                    Get theme from the store, gets applied in the template\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import { Component } from '@angular/core';\nimport { Select } from '@ngxs/store';\nimport { Observable } from 'rxjs';\nimport { ThemeState } from './store/theme/theme.state';\n\n/**\n * App component\n */\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  /**\n   * Get theme from the store, gets applied in the template\n   */\n  @Select(ThemeState.getTheme) isDarkTheme!: Observable;\n}\n\n    \n\n    \n        \n  \n  \n\n  \n  \n    \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n\n\n    \n\n    \n                \n                    ./app.component.scss\n                \n                .app{\n    min-height: 100%;\n\n    &__container{\n        height: calc(100vh - 84px);\n    }\n}\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CaseComponent', 'selector': 'app-case'},{'name': 'EndGameComponent', 'selector': 'app-end-game'},{'name': 'GameComponent', 'selector': 'app-game'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'HomepageComponent', 'selector': 'app-homepage'},{'name': 'NotFoundComponent', 'selector': 'app-not-found'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'AppComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_bootstrap\n\n\n\ncluster_AppModule_declarations\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAppComponent\n\nAppComponent\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAppComponent->AppModule\n\n\n\n\n\nHeaderComponent\n\nHeaderComponent\n\nAppModule -->\n\nHeaderComponent->AppModule\n\n\n\n\n\nNotFoundComponent\n\nNotFoundComponent\n\nAppModule -->\n\nNotFoundComponent->AppModule\n\n\n\n\n\nAppComponent \n\nAppComponent \n\nAppComponent  -->\n\nAppModule->AppComponent \n\n\n\n\n\nAppRoutingModule\n\nAppRoutingModule\n\nAppModule -->\n\nAppRoutingModule->AppModule\n\n\n\n\n\nMaterialModule\n\nMaterialModule\n\nAppModule -->\n\nMaterialModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            AppComponent\n                        \n                        \n                            HeaderComponent\n                        \n                        \n                            NotFoundComponent\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AppRoutingModule\n                        \n                        \n                            MaterialModule\n                        \n                    \n                \n                \n                    Bootstrap\n                    \n                        \n                            AppComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { MaterialModule } from './material/material.module';\nimport { ServiceWorkerModule } from '@angular/service-worker';\nimport { environment } from '../environments/environment';\nimport { HeaderComponent } from './layout/header/header.component';\nimport { NgxsModule } from '@ngxs/store';\nimport { NgxsStoragePluginModule } from '@ngxs/storage-plugin';\nimport { ngxsConfig } from './ngxs.config';\nimport { ThemeState } from './store/theme/theme.state';\nimport { GameState } from './store/game/game.state';\nimport { NotFoundComponent } from './not-found/not-found.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    HeaderComponent,\n    NotFoundComponent\n  ],\n  imports: [\n    NgxsModule.forRoot([ThemeState, GameState], ngxsConfig),\n    NgxsStoragePluginModule.forRoot(),\n    BrowserModule,\n    AppRoutingModule,\n    BrowserAnimationsModule,\n    MaterialModule,\n    ServiceWorkerModule.register('ngsw-worker.js', {\n      enabled: environment.production,\n      // Register the ServiceWorker as soon as the app is stable\n      // or after 30 seconds (whichever comes first).\n      registrationStrategy: 'registerWhenStable:30000'\n    })\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppRoutingModule.html":{"url":"modules/AppRoutingModule.html","title":"module - AppRoutingModule","body":"\n                   \n\n\n\n\n    Modules\n    AppRoutingModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/app-routing.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { NotFoundComponent } from './not-found/not-found.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    redirectTo: '/home',\n    pathMatch: 'full'\n  },\n  {\n    path: 'home',\n    loadChildren: () => \"import('./homepage/homepage.module').then(m => m.HomepageModule)\"\n  },\n  {\n    path: 'game',\n    loadChildren: () => \"import('./game/game.module').then(m => m.GameModule)\"\n  },\n  {\n    path: '404', \n    component: NotFoundComponent\n  },\n  {\n    path: '**', \n    redirectTo: '/404'\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/CaseComponent.html":{"url":"components/CaseComponent.html","title":"component - CaseComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  CaseComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/game/case/case.component.ts\n\n\n\n    \n        Description\n    \n    \n        Case component, all the cells that composes the game grid\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n            \n                changeDetection\n                ChangeDetectionStrategy.OnPush\n            \n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-case\n            \n\n            \n                styleUrls\n                ./case.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./case.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                pawn\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        pawn\n                    \n                \n                \n                    \n                        Type :         Pawn\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/game/case/case.component.ts:18\n                            \n                        \n                \n                    \n                        Pawn to set in the cell\n\n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n        import { Component, Input, ChangeDetectionStrategy } from '@angular/core';\nimport { Pawn } from 'src/app/models/pawn';\n\n/**\n * Case component, all the cells that composes the game grid\n */\n@Component({\n  selector: 'app-case',\n  templateUrl: './case.component.html',\n  styleUrls: ['./case.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class CaseComponent {\n  /**\n   * Pawn to set in the cell\n   * @type {Pawn}\n   */\n  @Input('pawn') pawn!: Pawn;\n\n}\n\n    \n\n    \n        \n\n\n\n\n    \n\n    \n                \n                    ./case.component.scss\n                \n                :host{\n    position: relative;\n}\n\n.case{\n    width: 100%;\n    height: 100%;\n    position: relative;\n    z-index: 100;\n    opacity: 1;\n    background: url(\"/assets/img/empty-case.png\");\n    background-size: contain;\n    outline: 1px solid #2867b2;\n    box-shadow: 2px 2px 2px #2867b2, -2px -2px 2px #2867b2, 2px -2px 2px #2867b2, -2px 2px 2px #2867b2;\n\n    &:before{\n        content: \"\";\n        padding-bottom: 100%;\n        display: block;\n        outline: 1px solid #2867b2;\n    }\n\n    &--pawn-red{\n        background: url(\"/assets/img/red-case.png\");\n        background-size: contain;\n    }\n\n    &--pawn-yellow{\n        background: url(\"/assets/img/yellow-case.png\");\n        background-size: contain;\n    }\n}\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CaseComponent', 'selector': 'app-case'},{'name': 'EndGameComponent', 'selector': 'app-end-game'},{'name': 'GameComponent', 'selector': 'app-game'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'HomepageComponent', 'selector': 'app-homepage'},{'name': 'NotFoundComponent', 'selector': 'app-not-found'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'CaseComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/EndGameComponent.html":{"url":"components/EndGameComponent.html","title":"component - EndGameComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  EndGameComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/game/dialogs/end-game/end-game.component.ts\n\n\n\n    \n        Description\n    \n    \n        Dialog component, shown when the game ends\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n            \n                changeDetection\n                ChangeDetectionStrategy.OnPush\n            \n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-end-game\n            \n\n            \n                styleUrls\n                ./end-game.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./end-game.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                redWins\n                            \n                            \n                                    Public\n                                winner\n                            \n                            \n                                    Public\n                                yellowWins\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(winner: Player)\n                    \n                \n                        \n                            \n                                Defined in src/app/game/dialogs/end-game/end-game.component.ts:23\n                            \n                        \n\n                \n                    \n                            Constructor takes winner in parameter\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        winner\n                                                  \n                                                        \n                                                                        Player\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                the player that did win the game (from the store)\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        redWins\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"Victoire des rouges !\"\n                    \n                \n                    \n                        \n                                Defined in src/app/game/dialogs/end-game/end-game.component.ts:19\n                        \n                    \n\n            \n                \n                    Text to show when red wins\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        winner\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Player\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Inject(MAT_DIALOG_DATA)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app/game/dialogs/end-game/end-game.component.ts:29\n                        \n                    \n\n            \n                \n                    the player that did win the game (from the store)\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        yellowWins\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"Victoire des jaunes !\"\n                    \n                \n                    \n                        \n                                Defined in src/app/game/dialogs/end-game/end-game.component.ts:23\n                        \n                    \n\n            \n                \n                    Text to show when yellow wins\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import { ChangeDetectionStrategy, Component, Inject } from '@angular/core';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { Player } from 'src/app/models/player';\n\n/**\n * Dialog component, shown when the game ends\n */\n@Component({\n  selector: 'app-end-game',\n  templateUrl: './end-game.component.html',\n  styleUrls: ['./end-game.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class EndGameComponent{\n\n  /**\n   * Text to show when red wins\n   */\n  public redWins: string = \"Victoire des rouges !\";\n  /**\n   * Text to show when yellow wins\n   */\n  public yellowWins: string = \"Victoire des jaunes !\";\n\n  /**\n   * Constructor takes winner in parameter\n   * @param {Player} winner the player that did win the game (from the store) \n   */\n  constructor(@Inject(MAT_DIALOG_DATA) public winner: Player) {}\n\n}\n\n    \n\n    \n        \n     Victoire des Rouges !\n     Victoire des Jaunes !\n\nMatch nul !La grille est pleine...\n\n    \n        \n        \n    \n    \n\n\n  Quitter\n  Rejouer\n\n\n    \n\n    \n                \n                    ./end-game.component.scss\n                \n                .win__image{\n    width: 80%;\n}\n\n.mat-dialog-content{\n    overflow: hidden;\n    text-align: center;\n}\n\n.mat-dialog-title{\n    text-align: center;\n}\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '     Victoire des Rouges !     Victoire des Jaunes !Match nul !La grille est pleine...                              Quitter  Rejouer'\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CaseComponent', 'selector': 'app-case'},{'name': 'EndGameComponent', 'selector': 'app-end-game'},{'name': 'GameComponent', 'selector': 'app-game'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'HomepageComponent', 'selector': 'app-homepage'},{'name': 'NotFoundComponent', 'selector': 'app-not-found'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'EndGameComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Game.html":{"url":"interfaces/Game.html","title":"interface - Game","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Game\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/models/game.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents the game state\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            columns\n                                        \n                                \n                                \n                                        \n                                            pawns\n                                        \n                                \n                                \n                                        \n                                            player1\n                                        \n                                \n                                \n                                        \n                                            player2\n                                        \n                                \n                                \n                                        \n                                            rows\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            turn\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            winner\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        columns\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        columns:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    number of columns of the grid, to be selected on the homepage\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        pawns\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        pawns:         Pawn[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Pawn[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Pawns that have been played since the game began\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        player1\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        player1:         Player\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Player\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    player one\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        player2\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        player2:         Player\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Player\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    player two\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        rows\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        rows:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    number of rows of the grid, to be selected on the homepage\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        turn\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        turn:         Player\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Player\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    player that have to play now\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        winner\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        winner:         Player\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Player\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    player that did win the game\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Pawn } from \"./pawn\";\nimport { Player } from \"./player\";\n\n/**\n * Represents the game state\n */\nexport interface Game {\n    /**\n     * player one\n     */\n    player1: Player;\n\n    /**\n     * player two\n     */\n    player2: Player;\n\n    /**\n     * player that have to play now\n     */\n    turn?: Player;\n\n    /**\n     * player that did win the game\n     */\n    winner?: Player;\n\n    /**\n     * number of rows of the grid, to be selected on the homepage\n     */\n    rows: number;\n\n    /**\n     * number of columns of the grid, to be selected on the homepage\n     */\n    columns: number;\n\n    /**\n     * Pawns that have been played since the game began\n     */\n    pawns: Pawn[];\n}\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/GameComponent.html":{"url":"components/GameComponent.html","title":"component - GameComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  GameComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/game/game.component.ts\n\n\n\n    \n        Description\n    \n    \n        Game component\n\n    \n\n\n    \n        Implements\n    \n    \n                    OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-game\n            \n\n            \n                styleUrls\n                ./game.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./game.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                game\n                            \n                            \n                                    Public\n                                gridX\n                            \n                            \n                                    Public\n                                gridY\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                animateFallingPawn\n                            \n                            \n                                cancelLastMove\n                            \n                            \n                                    Private\n                                checkVictory\n                            \n                            \n                                    Public\n                                displayPawn\n                            \n                            \n                                    Private\n                                getYPositionInColumn\n                            \n                            \n                                    Private\n                                initGame\n                            \n                            \n                                    Public\n                                openEndGameDialog\n                            \n                            \n                                    Public\n                                playPawn\n                            \n                            \n                                resetGame\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        animateFallingPawn\n                        \n                    \n                \n            \n            \n                \nanimateFallingPawn(column: number, row: number, player: Player)\n                \n            \n\n\n            \n                \n                    Defined in src/app/game/game.component.ts:190\n                \n            \n\n\n            \n                \n                    Animate a falling pawn in the column played, falling up to the row where the pawn will fall\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    column\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        column played\n\n                                    \n                                \n                                \n                                    row\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        row where the animation ends\n\n                                    \n                                \n                                \n                                    player\n                                    \n                                                Player\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        player that played to determine the color of the pawn to animate\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        cancelLastMove\n                        \n                    \n                \n            \n            \n                \ncancelLastMove()\n                \n            \n\n\n            \n                \n                    Defined in src/app/game/game.component.ts:80\n                \n            \n\n\n            \n                \n                    Dispatch CancelLastMove Action from the store, remove last pawn played and sets turn to the last player\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        checkVictory\n                        \n                    \n                \n            \n            \n                \n                    \n                    checkVictory(playedPawn: Pawn)\n                \n            \n\n\n            \n                \n                    Defined in src/app/game/game.component.ts:151\n                \n            \n\n\n            \n                \n                    Dispatch CheckWinner Action from the store, checks if played pawn causes a victory\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    playedPawn\n                                    \n                                                Pawn\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        pawn that was just played\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        displayPawn\n                        \n                    \n                \n            \n            \n                \n                    \n                    displayPawn(x: number, y: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/game/game.component.ts:133\n                \n            \n\n\n            \n                \n                    Get a Pawn if present on given coordinates\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    x\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        column in wich the pawns will be put\n\n                                    \n                                \n                                \n                                    y\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        row in wich the pawns will be put\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Pawn\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        getYPositionInColumn\n                        \n                    \n                \n            \n            \n                \n                    \n                    getYPositionInColumn(column: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/game/game.component.ts:117\n                \n            \n\n\n            \n                \n                    Get the number of pawns in a column to set the vertical position of the next pawn that will be played in that column\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    column\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        column in wich the pawns will be put\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        initGame\n                        \n                    \n                \n            \n            \n                \n                    \n                    initGame()\n                \n            \n\n\n            \n                \n                    Defined in src/app/game/game.component.ts:63\n                \n            \n\n\n            \n                \n                    Get rows and columns to set from the store\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        openEndGameDialog\n                        \n                    \n                \n            \n            \n                \n                    \n                    openEndGameDialog(winner?: Player)\n                \n            \n\n\n            \n                \n                    Defined in src/app/game/game.component.ts:163\n                \n            \n\n\n            \n                \n                    Shows the end game dialog\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    winner\n                                    \n                                                Player\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        player that played that last pawn and won\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        playPawn\n                        \n                    \n                \n            \n            \n                \n                    \n                    playPawn(column: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/game/game.component.ts:88\n                \n            \n\n\n            \n                \n                    Play a pawn if the column played isn't full (shows a snackbar if so), end games if the grid is full or if the player won\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    column\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        column in wich the pawns will be put\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        resetGame\n                        \n                    \n                \n            \n            \n                \nresetGame()\n                \n            \n\n\n            \n                \n                    Defined in src/app/game/game.component.ts:73\n                \n            \n\n\n            \n                \n                    Dispatch GameReset Action from the store, fresh start (removes all the pawns and set turn to player one)\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        game\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Observable\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Select(GameState.getGame)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app/game/game.component.ts:29\n                        \n                    \n\n            \n                \n                    Game State from the store\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        gridX\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Array\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/game/game.component.ts:35\n                        \n                    \n\n            \n                \n                    Number of columns, doesn't get any actual pawn in it\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        gridY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Array\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/game/game.component.ts:41\n                        \n                    \n\n            \n                \n                    Number of rows, doesn't get any actual pawn in it\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import { Component, OnInit } from '@angular/core';\nimport { Select, Store } from '@ngxs/store';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { MatDialog } from '@angular/material/dialog';\nimport { Observable } from 'rxjs';\nimport { take } from 'rxjs/operators';\nimport { Game } from '../models/game';\nimport { Pawn } from '../models/pawn';\nimport { CheckWinner, GameReset, PlayPawn, CancelLastMove } from '../store/game/game.actions';\nimport { GameState } from '../store/game/game.state';\nimport { EndGameComponent } from './dialogs/end-game/end-game.component';\nimport { Router } from '@angular/router';\nimport { Player } from '../models/player';\n\n/**\n * Game component\n */\n@Component({\n  selector: 'app-game',\n  templateUrl: './game.component.html',\n  styleUrls: ['./game.component.scss']\n})\nexport class GameComponent implements OnInit {\n\n  /**\n   * Game State from the store\n   * @type {Observable}\n   */\n  @Select(GameState.getGame) game!: Observable;\n\n  /**\n   * Number of columns, doesn't get any actual pawn in it\n   * @type {Array}\n   */\n  public gridX: Array = [];\n\n  /**\n   * Number of rows, doesn't get any actual pawn in it\n   * @type {Array}\n   */\n  public gridY: Array = [];\n\n  /**\n   * @ignore\n   */\n  constructor(\n    private store: Store,\n    private _snack: MatSnackBar,\n    private dialog: MatDialog,\n    private router: Router\n    ) { }\n\n    /**\n   * @ignore\n   */\n  ngOnInit(): void {\n    this.initGame();\n  }\n\n  /**\n   * Get rows and columns to set from the store\n   */\n  private initGame(){\n    this.game.pipe(take(1)).subscribe(g => {\n      this.gridX = Array(g!.columns);\n      this.gridY = Array(g!.rows);\n    });\n  }\n\n  /**\n   * Dispatch GameReset Action from the store, fresh start (removes all the pawns and set turn to player one)\n   */\n  resetGame(){\n    this.store.dispatch(new GameReset());\n  }\n\n  /**\n   * Dispatch CancelLastMove Action from the store, remove last pawn played and sets turn to the last player\n   */\n  cancelLastMove(){\n    this.store.dispatch(new CancelLastMove());\n  }\n\n  /**\n   * Play a pawn if the column played isn't full (shows a snackbar if so), end games if the grid is full or if the player won\n   * @param {number} column column in wich the pawns will be put\n   */\n  public playPawn(column: number){\n    this.game.pipe(take(1)).subscribe(g => {\n      const playedPawn: Pawn = {\n        x: column,\n        y: this.getYPositionInColumn(column),\n        player: g.turn!\n      }\n      this.store.dispatch(new PlayPawn( playedPawn )).subscribe(\n        (store) => {\n          this.animateFallingPawn(playedPawn.x, playedPawn.y, g.turn!);\n          this.checkVictory(playedPawn);\n\n          // Vérif : Si la grille est pleine, on termine le jeu sur un match nul\n          if(store.game.game.pawns?.length === store.game.game.rows * store.game.game.columns){\n            this.openEndGameDialog(store.game.game.winner);\n          }\n        },\n        error => {\n          this._snack.open(error.message, \"OK\");\n        }\n      );\n    })\n  }\n\n  /**\n   * Get the number of pawns in a column to set the vertical position of the next pawn that will be played in that column\n   * @param {number} column column in wich the pawns will be put\n   * @return {number}\n   */\n  private getYPositionInColumn(column: number): number{\n    let pawnsInColumn: number = 0;\n    this.game.pipe(take(1)).subscribe(g => {\n      // On récupère le nombre de pions dans la colonne passée en param\n      pawnsInColumn = g.pawns.filter(p => p.x === column).length;\n    });\n    // on retourne la position en Y à occuper par le pion\n    return pawnsInColumn;\n  }\n\n  /**\n   * Get a Pawn if present on given coordinates\n   * @param {number} x column in wich the pawns will be put\n   * @param {number} y row in wich the pawns will be put\n   * @return {Pawn}\n   */\n  public displayPawn(x: number, y: number): Pawn{\n    let pawnToDisplay!: Pawn;\n    \n    this.game.pipe(take(1)).subscribe(g => {\n      // On check dans la liste de pions du store si on en a un aux coordonnées de la case passée en paramètres\n      g.pawns.map(p => {\n        if (p.x === x && p.y === y) {\n          pawnToDisplay = p;\n        }\n      });\n    });\n    return pawnToDisplay;\n  }\n\n  /**\n   * Dispatch CheckWinner Action from the store, checks if played pawn causes a victory\n   * @param {Pawn} playedPawn pawn that was just played\n   */\n  private checkVictory(playedPawn: Pawn){\n    this.store.dispatch(new CheckWinner(playedPawn)).subscribe(store => {\n      if(store.game.game.winner){\n        this.openEndGameDialog(store.game.game.winner);\n      }\n    });\n  }\n\n  /**\n   * Shows the end game dialog\n   * @param {Player} winner player that played that last pawn and won\n   */\n  public openEndGameDialog(winner?: Player) {\n    const dialogRef = this.dialog.open(EndGameComponent, {\n      data: winner,\n      disableClose: true\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      switch (result) {\n        case 'quit':\n          this.router.navigate(['home']);\n          break;\n        case 'replay':\n          this.resetGame()\n          break;\n      \n        default:\n          break;\n      }\n    });\n  }\n\n  /**\n   * Animate a falling pawn in the column played, falling up to the row where the pawn will fall\n   * @param {number} column column played\n   * @param {number} row row where the animation ends\n   * @param {Player} player player that played to determine the color of the pawn to animate\n   */\n  animateFallingPawn(column: number, row: number, player: Player){\n    const pawnColor = player.id === 0 ? \"red\" : \"yellow\";\n    let pawnToAnimate: HTMLElement = document.getElementsByClassName(`falling-${pawnColor}-${column}`)[0] as HTMLElement;\n    pawnToAnimate.classList.add(\"show\");\n    setTimeout(() => {\n      pawnToAnimate.style.top = `${((this.gridY.length - 1 - row) * 100)}%`;\n    }, 10);\n    setTimeout(() => {\n      pawnToAnimate.classList.remove(\"show\");\n      pawnToAnimate.style.top = \"0%\";\n    }, 140);\n    \n  }\n\n}\n\n    \n\n    \n        \n    {{ (game | async)!.turn!.name }} -->\n    \n        \n            \n                \n                    \n                    \n                \n            \n        \n    \n    \n        \n        \n            \n                undo\n            \n        \n        \n            \n                sync\n            \n        \n        \n    \n\n\n    \n\n    \n                \n                    ./game.component.scss\n                \n                .game{\n    max-width: 88vh;\n    margin: auto;\n\n    &__grid-container{\n        margin: 20px;\n        display: grid;\n        grid-template-columns: repeat(7, 1fr);\n        border: 12px solid #2867b2;\n        border-radius: 23px;\n\n        &--5{\n            grid-template-columns: repeat(5, 1fr);\n        }\n        &--7{\n            grid-template-columns: repeat(7, 1fr);\n        }\n        &--9{\n            grid-template-columns: repeat(9, 1fr);\n        }\n        &--11{\n            grid-template-columns: repeat(11, 1fr);\n        }\n        &--13{\n            grid-template-columns: repeat(13, 1fr);\n        }\n        &--15{\n            grid-template-columns: repeat(15, 1fr);\n        }\n    }\n}\n\n.game--fullscreen{\n    max-width: 100%;\n    margin: auto;\n}\n\n.game--almost-fullscreen{\n    max-width: 88vh;\n    margin: auto;\n}\n\n.game__players--player-two{\n    text-align: right;\n}\n\n.game__action{\n    text-align: center;\n}\n\n.game__actions{\n    margin: 20px 0px;\n    padding-bottom: 30px;\n}\n\n.case__animated{\n    width: 90%;\n    height: 90%;\n    position: absolute;\n    top: 0;\n    border-radius: 50px;\n    z-index: 50;\n    transform: translateX(-50%);\n    left: 50%;\n    opacity: 1;\n    transition: top .15s;\n    display: none;\n\n    &.show{\n        display: block;\n    }\n\n    &--red{\n        background: #f4433b;\n        box-shadow: inset 10px 10px 10px #72211d, inset -10px -10px 10px #72211d;\n    }\n\n    &--yellow{\n        background: #f4e43b;\n        box-shadow: inset 10px 10px 10px #6b641a, inset -10px -10px 10px #6b641a;\n    }\n}\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '    {{ (game | async)!.turn!.name }} -->                                                                                                                                                                        undo                                                        sync                                '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CaseComponent', 'selector': 'app-case'},{'name': 'EndGameComponent', 'selector': 'app-end-game'},{'name': 'GameComponent', 'selector': 'app-game'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'HomepageComponent', 'selector': 'app-homepage'},{'name': 'NotFoundComponent', 'selector': 'app-not-found'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'GameComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/GameModule.html":{"url":"modules/GameModule.html","title":"module - GameModule","body":"\n                   \n\n\n\n\n    Modules\n    GameModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_GameModule\n\n\n\ncluster_GameModule_declarations\n\n\n\ncluster_GameModule_imports\n\n\n\n\nCaseComponent\n\nCaseComponent\n\n\n\nGameModule\n\nGameModule\n\nGameModule -->\n\nCaseComponent->GameModule\n\n\n\n\n\nEndGameComponent\n\nEndGameComponent\n\nGameModule -->\n\nEndGameComponent->GameModule\n\n\n\n\n\nGameComponent\n\nGameComponent\n\nGameModule -->\n\nGameComponent->GameModule\n\n\n\n\n\nGameRoutingModule\n\nGameRoutingModule\n\nGameModule -->\n\nGameRoutingModule->GameModule\n\n\n\n\n\nMaterialModule\n\nMaterialModule\n\nGameModule -->\n\nMaterialModule->GameModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/game/game.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            CaseComponent\n                        \n                        \n                            EndGameComponent\n                        \n                        \n                            GameComponent\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            GameRoutingModule\n                        \n                        \n                            MaterialModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { GameRoutingModule } from './game-routing.module';\nimport { GameComponent } from './game.component';\nimport { MaterialModule } from '../material/material.module';\nimport { CaseComponent } from './case/case.component';\nimport { EndGameComponent } from './dialogs/end-game/end-game.component';\nimport { FlexLayoutModule } from '@angular/flex-layout';\n\n\n@NgModule({\n  declarations: [\n    GameComponent,\n    CaseComponent,\n    EndGameComponent\n  ],\n  imports: [\n    CommonModule,\n    GameRoutingModule,\n    MaterialModule,\n    FlexLayoutModule\n  ]\n})\nexport class GameModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/GameRoutingModule.html":{"url":"modules/GameRoutingModule.html","title":"module - GameRoutingModule","body":"\n                   \n\n\n\n\n    Modules\n    GameRoutingModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/game/game-routing.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { GameComponent } from './game.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: GameComponent\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class GameRoutingModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GameState.html":{"url":"injectables/GameState.html","title":"injectable - GameState","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  GameState\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/store/game/game.state.ts\n        \n\n\n            \n                Description\n            \n            \n                Game State\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                victoryService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                cancelLastMove\n                            \n                            \n                                checkWinner\n                            \n                            \n                                    Static\n                                getColumns\n                            \n                            \n                                    Static\n                                getGame\n                            \n                            \n                                    Static\n                                getRows\n                            \n                            \n                                initGame\n                            \n                            \n                                playPawn\n                            \n                            \n                                resetGame\n                            \n                            \n                                setColumns\n                            \n                            \n                                setRows\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        cancelLastMove\n                        \n                    \n                \n            \n            \n                \ncancelLastMove(undefined: StateContext)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Action(CancelLastMove)\n                \n            \n\n            \n                \n                    Defined in src/app/store/game/game.state.ts:137\n                \n            \n\n\n            \n                \n                    Removes last played pawn if there is at least one pawn in the game\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                StateContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        checkWinner\n                        \n                    \n                \n            \n            \n                \ncheckWinner(undefined: StateContext, undefined: CheckWinner)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Action(CheckWinner)\n                \n            \n\n            \n                \n                    Defined in src/app/store/game/game.state.ts:177\n                \n            \n\n\n            \n                \n                    Uses Victory service to check if 4 pawns are aligned, update state if there's a winner\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                StateContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                            CheckWinner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        getColumns\n                        \n                    \n                \n            \n            \n                \n                    \n                    getColumns(state: GameStateModel)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Selector()\n                \n            \n\n            \n                \n                    Defined in src/app/store/game/game.state.ts:68\n                \n            \n\n\n            \n                \n                    Returns columns\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    state\n                                    \n                                                GameStateModel\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        getGame\n                        \n                    \n                \n            \n            \n                \n                    \n                    getGame(state: GameStateModel)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Selector()\n                \n            \n\n            \n                \n                    Defined in src/app/store/game/game.state.ts:52\n                \n            \n\n\n            \n                \n                    Returns game state\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    state\n                                    \n                                                GameStateModel\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        getRows\n                        \n                    \n                \n            \n            \n                \n                    \n                    getRows(state: GameStateModel)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Selector()\n                \n            \n\n            \n                \n                    Defined in src/app/store/game/game.state.ts:60\n                \n            \n\n\n            \n                \n                    Returns rows\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    state\n                                    \n                                                GameStateModel\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        initGame\n                        \n                    \n                \n            \n            \n                \ninitGame(undefined: StateContext, undefined: GameInit)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Action(GameInit)\n                \n            \n\n            \n                \n                    Defined in src/app/store/game/game.state.ts:76\n                \n            \n\n\n            \n                \n                    Initialize the game, set player turn to player one\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                StateContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                                GameInit\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        playPawn\n                        \n                    \n                \n            \n            \n                \nplayPawn(undefined: StateContext, undefined: PlayPawn)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Action(PlayPawn)\n                \n            \n\n            \n                \n                    Defined in src/app/store/game/game.state.ts:157\n                \n            \n\n\n            \n                \n                    Add a pawn to the state pawn array if column played isn't full\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                StateContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                                PlayPawn\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        resetGame\n                        \n                    \n                \n            \n            \n                \nresetGame(undefined: StateContext)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Action(GameReset)\n                \n            \n\n            \n                \n                    Defined in src/app/store/game/game.state.ts:122\n                \n            \n\n\n            \n                \n                    Reset the game, set player turn to red and reset the pawn array\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                StateContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setColumns\n                        \n                    \n                \n            \n            \n                \nsetColumns(undefined: StateContext, undefined: SetColumns)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Action(SetColumns)\n                \n            \n\n            \n                \n                    Defined in src/app/store/game/game.state.ts:106\n                \n            \n\n\n            \n                \n                    Sets selected columns in the game state\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                StateContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                            SetColumns\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setRows\n                        \n                    \n                \n            \n            \n                \nsetRows(undefined: StateContext, undefined: SetRows)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Action(SetRows)\n                \n            \n\n            \n                \n                    Defined in src/app/store/game/game.state.ts:90\n                \n            \n\n\n            \n                \n                    Sets selected rows in the game state\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                StateContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                            SetRows\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        victoryService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         VictoryCheckService\n\n                    \n                \n                \n                    \n                        Default value : new VictoryCheckService()\n                    \n                \n                    \n                        \n                                Defined in src/app/store/game/game.state.ts:46\n                        \n                    \n\n            \n                \n                    Victory Service, has all the methods to check if 4 pawns are aligned\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { State, Action, StateContext, Selector } from '@ngxs/store';\nimport { removeItem } from '@ngxs/store/operators';\nimport { Game } from 'src/app/models/game';\nimport { CheckWinner, GameInit, PlayPawn, GameReset, CancelLastMove, SetRows, SetColumns } from './game.actions';\nimport { VictoryCheckService } from '../services/victory-check.service';\nimport { Player } from 'src/app/models/player';\n\n/**\n * Game State Model\n */\nexport class GameStateModel {\n    /**\n     * Game state, contains the two players, the columns and rows number and an array of the pawns played\n     */\n    game: Game = {\n        player1: {id: 0, name: \"Joueur 1\"},\n        player2: {id: 1, name: \"Joueur 2\"},\n        rows: 6,\n        columns: 7,\n        pawns: []\n    };\n}\n\n/**\n * Game State\n */\n@State({\n    name: 'game',\n    defaults: {\n        game: {\n            player1: {id: 0, name: \"Joueur 1\"},\n            player2: {id: 1, name: \"Joueur 2\"},\n            rows: 6,\n            columns: 7,\n            pawns: []\n        }\n    }\n})\n@Injectable()\nexport class GameState {\n\n    /**\n     * Victory Service, has all the methods to check if 4 pawns are aligned\n     */\n    private victoryService: VictoryCheckService = new VictoryCheckService();\n\n    /**\n     * Returns game state\n     */\n    @Selector()\n    static getGame(state: GameStateModel) {\n        return state.game;\n    }\n\n    /**\n     * Returns rows\n     */\n    @Selector()\n    static getRows(state: GameStateModel) {\n        return state.game.rows;\n    }\n\n    /**\n     * Returns columns\n     */\n    @Selector()\n    static getColumns(state: GameStateModel) {\n        return state.game.columns;\n    }\n\n    /**\n     * Initialize the game, set player turn to player one\n     */\n    @Action(GameInit)\n    initGame({getState, patchState }: StateContext, {payload}: GameInit) {\n        const state = getState();\n        patchState({\n            ...state, game: {\n                ...payload,\n                turn: state.game.player1,\n            }\n        });\n    }\n\n    /**\n     * Sets selected rows in the game state\n     */\n    @Action(SetRows)\n    setRows({getState, patchState }: StateContext, {rows}: SetRows) {\n        const state = getState();\n        patchState({\n            ...state, game: {\n                ...state.game,\n                rows: rows,\n                pawns: [],\n                turn: state.game.player1,\n            }\n        });\n    }\n\n    /**\n     * Sets selected columns in the game state\n     */\n    @Action(SetColumns)\n    setColumns({getState, patchState }: StateContext, {columns}: SetColumns) {\n        const state = getState();\n        patchState({\n            ...state, game: {\n                ...state.game,\n                columns: columns,\n                pawns: [],\n                turn: state.game.player1,\n            }\n        });\n    }\n\n    /**\n     * Reset the game, set player turn to red and reset the pawn array\n     */\n    @Action(GameReset)\n    resetGame({getState, patchState }: StateContext) {\n        const state = getState();\n        patchState({\n            ...state, game: {\n                ...state.game,\n                pawns: [],\n                turn: state.game.player1,\n            }\n        });\n    }\n    \n    /**\n     * Removes last played pawn if there is at least one pawn in the game\n     */\n    @Action(CancelLastMove)\n    cancelLastMove({getState, patchState }: StateContext) {\n        const state = getState();\n        const truncatedPawns = state.game.pawns.slice(0,-1);\n        // check : there is at least one pawn \n        if(state.game.pawns.length === 0){\n            throw new Error('🧐 Aucun pion en jeu !');\n        }\n        patchState({\n            ...state, game: {\n                ...state.game,\n                pawns: truncatedPawns,\n                turn: state.game.turn?.id == state.game.player1.id ? state.game.player2 : state.game.player1,\n            }\n        });\n    }\n\n    /**\n     * Add a pawn to the state pawn array if column played isn't full\n     */\n    @Action(PlayPawn)\n    playPawn({getState, patchState }: StateContext, {pawn}: PlayPawn) {\n        const state = getState();\n        const pawnsList = [...state.game.pawns, pawn]\n        // check : column is full already\n        if(pawn.y >= state.game.rows){\n            throw new Error('🧐 La colonne est pleine !');\n        }\n        patchState({\n            ...state, game: {\n                ...state.game,\n                turn: state.game.turn?.id == state.game.player1.id ? state.game.player2 : state.game.player1,\n                pawns: pawnsList\n            }\n        });\n    }\n\n    /**\n     * Uses Victory service to check if 4 pawns are aligned, update state if there's a winner\n     */\n    @Action(CheckWinner)\n    checkWinner({getState, patchState }: StateContext, {pawnPlayed}: CheckWinner) {\n        const state = getState();\n        let winner!: Player;\n        const linePlayed = pawnPlayed.y;\n        const columnPlayed = pawnPlayed.x;\n\n        // check pour une ligne verticale\n        if(this.victoryService.verticalCheck(state.game, columnPlayed, pawnPlayed)){\n            winner = pawnPlayed.player;\n        }\n\n        // check pour une ligne horizontale\n        if(this.victoryService.horizontalCheck(state.game, linePlayed, pawnPlayed)){\n            winner = pawnPlayed.player;\n        }\n\n        // check pour une ligne diagonale à droite\n        if(this.victoryService.diagonalRightCheck(state.game, pawnPlayed)){\n            winner = pawnPlayed.player;\n        }\n\n        // check pour une ligne diagonale à gauche\n        if(this.victoryService.diagonalLeftCheck(state.game, pawnPlayed)){\n            winner = pawnPlayed.player;\n        }\n\n        patchState({\n            ...state, game: {\n                ...state.game,\n                winner: winner\n            }\n        });\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GameStateModel.html":{"url":"classes/GameStateModel.html","title":"class - GameStateModel","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GameStateModel\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/store/game/game.state.ts\n        \n\n\n            \n                Description\n            \n            \n                Game State Model\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                game\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        game\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Game\n\n                    \n                \n                \n                    \n                        Default value : {\n        player1: {id: 0, name: \"Joueur 1\"},\n        player2: {id: 1, name: \"Joueur 2\"},\n        rows: 6,\n        columns: 7,\n        pawns: []\n    }\n                    \n                \n                    \n                        \n                                Defined in src/app/store/game/game.state.ts:16\n                        \n                    \n\n            \n                \n                    Game state, contains the two players, the columns and rows number and an array of the pawns played\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { State, Action, StateContext, Selector } from '@ngxs/store';\nimport { removeItem } from '@ngxs/store/operators';\nimport { Game } from 'src/app/models/game';\nimport { CheckWinner, GameInit, PlayPawn, GameReset, CancelLastMove, SetRows, SetColumns } from './game.actions';\nimport { VictoryCheckService } from '../services/victory-check.service';\nimport { Player } from 'src/app/models/player';\n\n/**\n * Game State Model\n */\nexport class GameStateModel {\n    /**\n     * Game state, contains the two players, the columns and rows number and an array of the pawns played\n     */\n    game: Game = {\n        player1: {id: 0, name: \"Joueur 1\"},\n        player2: {id: 1, name: \"Joueur 2\"},\n        rows: 6,\n        columns: 7,\n        pawns: []\n    };\n}\n\n/**\n * Game State\n */\n@State({\n    name: 'game',\n    defaults: {\n        game: {\n            player1: {id: 0, name: \"Joueur 1\"},\n            player2: {id: 1, name: \"Joueur 2\"},\n            rows: 6,\n            columns: 7,\n            pawns: []\n        }\n    }\n})\n@Injectable()\nexport class GameState {\n\n    /**\n     * Victory Service, has all the methods to check if 4 pawns are aligned\n     */\n    private victoryService: VictoryCheckService = new VictoryCheckService();\n\n    /**\n     * Returns game state\n     */\n    @Selector()\n    static getGame(state: GameStateModel) {\n        return state.game;\n    }\n\n    /**\n     * Returns rows\n     */\n    @Selector()\n    static getRows(state: GameStateModel) {\n        return state.game.rows;\n    }\n\n    /**\n     * Returns columns\n     */\n    @Selector()\n    static getColumns(state: GameStateModel) {\n        return state.game.columns;\n    }\n\n    /**\n     * Initialize the game, set player turn to player one\n     */\n    @Action(GameInit)\n    initGame({getState, patchState }: StateContext, {payload}: GameInit) {\n        const state = getState();\n        patchState({\n            ...state, game: {\n                ...payload,\n                turn: state.game.player1,\n            }\n        });\n    }\n\n    /**\n     * Sets selected rows in the game state\n     */\n    @Action(SetRows)\n    setRows({getState, patchState }: StateContext, {rows}: SetRows) {\n        const state = getState();\n        patchState({\n            ...state, game: {\n                ...state.game,\n                rows: rows,\n                pawns: [],\n                turn: state.game.player1,\n            }\n        });\n    }\n\n    /**\n     * Sets selected columns in the game state\n     */\n    @Action(SetColumns)\n    setColumns({getState, patchState }: StateContext, {columns}: SetColumns) {\n        const state = getState();\n        patchState({\n            ...state, game: {\n                ...state.game,\n                columns: columns,\n                pawns: [],\n                turn: state.game.player1,\n            }\n        });\n    }\n\n    /**\n     * Reset the game, set player turn to red and reset the pawn array\n     */\n    @Action(GameReset)\n    resetGame({getState, patchState }: StateContext) {\n        const state = getState();\n        patchState({\n            ...state, game: {\n                ...state.game,\n                pawns: [],\n                turn: state.game.player1,\n            }\n        });\n    }\n    \n    /**\n     * Removes last played pawn if there is at least one pawn in the game\n     */\n    @Action(CancelLastMove)\n    cancelLastMove({getState, patchState }: StateContext) {\n        const state = getState();\n        const truncatedPawns = state.game.pawns.slice(0,-1);\n        // check : there is at least one pawn \n        if(state.game.pawns.length === 0){\n            throw new Error('🧐 Aucun pion en jeu !');\n        }\n        patchState({\n            ...state, game: {\n                ...state.game,\n                pawns: truncatedPawns,\n                turn: state.game.turn?.id == state.game.player1.id ? state.game.player2 : state.game.player1,\n            }\n        });\n    }\n\n    /**\n     * Add a pawn to the state pawn array if column played isn't full\n     */\n    @Action(PlayPawn)\n    playPawn({getState, patchState }: StateContext, {pawn}: PlayPawn) {\n        const state = getState();\n        const pawnsList = [...state.game.pawns, pawn]\n        // check : column is full already\n        if(pawn.y >= state.game.rows){\n            throw new Error('🧐 La colonne est pleine !');\n        }\n        patchState({\n            ...state, game: {\n                ...state.game,\n                turn: state.game.turn?.id == state.game.player1.id ? state.game.player2 : state.game.player1,\n                pawns: pawnsList\n            }\n        });\n    }\n\n    /**\n     * Uses Victory service to check if 4 pawns are aligned, update state if there's a winner\n     */\n    @Action(CheckWinner)\n    checkWinner({getState, patchState }: StateContext, {pawnPlayed}: CheckWinner) {\n        const state = getState();\n        let winner!: Player;\n        const linePlayed = pawnPlayed.y;\n        const columnPlayed = pawnPlayed.x;\n\n        // check pour une ligne verticale\n        if(this.victoryService.verticalCheck(state.game, columnPlayed, pawnPlayed)){\n            winner = pawnPlayed.player;\n        }\n\n        // check pour une ligne horizontale\n        if(this.victoryService.horizontalCheck(state.game, linePlayed, pawnPlayed)){\n            winner = pawnPlayed.player;\n        }\n\n        // check pour une ligne diagonale à droite\n        if(this.victoryService.diagonalRightCheck(state.game, pawnPlayed)){\n            winner = pawnPlayed.player;\n        }\n\n        // check pour une ligne diagonale à gauche\n        if(this.victoryService.diagonalLeftCheck(state.game, pawnPlayed)){\n            winner = pawnPlayed.player;\n        }\n\n        patchState({\n            ...state, game: {\n                ...state.game,\n                winner: winner\n            }\n        });\n    }\n}\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/HeaderComponent.html":{"url":"components/HeaderComponent.html","title":"component - HeaderComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  HeaderComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/layout/header/header.component.ts\n\n\n\n    \n        Description\n    \n    \n        App header component\n\n    \n\n\n    \n        Implements\n    \n    \n                    OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-header\n            \n\n            \n                styleUrls\n                ./header.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./header.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                dark\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                applyDarkTheme\n                            \n                            \n                                toogleTheme\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        applyDarkTheme\n                        \n                    \n                \n            \n            \n                \napplyDarkTheme()\n                \n            \n\n\n            \n                \n                    Defined in src/app/layout/header/header.component.ts:49\n                \n            \n\n\n            \n                \n                    Applies selected theme in body tag , for global theming\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toogleTheme\n                        \n                    \n                \n            \n            \n                \ntoogleTheme()\n                \n            \n\n\n            \n                \n                    Defined in src/app/layout/header/header.component.ts:41\n                \n            \n\n\n            \n                \n                    Toogle theme\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        dark\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Select(ThemeState.getTheme)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app/layout/header/header.component.ts:22\n                        \n                    \n\n            \n                \n                    Gets the theme set from the store\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import { Component, OnInit } from '@angular/core';\nimport { Select, Store } from '@ngxs/store';\nimport { Observable } from 'rxjs';\nimport { take } from 'rxjs/operators';\nimport { ToogleTheme } from '../../store/theme/theme.actions';\nimport { ThemeState } from '../../store/theme/theme.state';\n\n/**\n * App header component\n */\n@Component({\n  selector: 'app-header',\n  templateUrl: './header.component.html',\n  styleUrls: ['./header.component.scss']\n})\nexport class HeaderComponent implements OnInit {\n\n  /**\n   * Gets the theme set from the store\n   * @type {Observable}\n   */\n  @Select(ThemeState.getTheme) dark!: Observable;\n\n  /**\n   * @ignore\n   */\n  constructor(private store: Store) { \n\n  }\n\n  /**\n   * @ignore\n   */\n  ngOnInit(): void {\n    this.applyDarkTheme();\n  }\n\n  /**\n   * Toogle theme\n   */\n  toogleTheme() {\n    this.store.dispatch(new ToogleTheme());\n    this.applyDarkTheme();\n  }\n\n  /**\n   * Applies selected theme in body tag , for global theming\n   */\n  applyDarkTheme(){\n    this.dark.pipe(take(1)).subscribe(isDark => {\n      if(isDark){\n        document.body.classList.add(\"dark-theme\");\n      }\n      else{\n        \n        document.body.classList.remove(\"dark-theme\");\n      }\n    });\n  }\n\n}\n\n    \n\n    \n        \n    Puissance 4\n\n    \n\n    brightness_5\n    \n    \n    dark_mode\n\n    \n\n    \n                \n                    ./header.component.scss\n                \n                :host{\n    position: sticky;\n    top: 0;\n\n    .header__title{\n        font-family: \"Train One\";\n        text-shadow: 2px 2px 6px #999;\n    }\n}\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '    Puissance 4        brightness_5            dark_mode'\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CaseComponent', 'selector': 'app-case'},{'name': 'EndGameComponent', 'selector': 'app-end-game'},{'name': 'GameComponent', 'selector': 'app-game'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'HomepageComponent', 'selector': 'app-homepage'},{'name': 'NotFoundComponent', 'selector': 'app-not-found'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'HeaderComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/HomepageComponent.html":{"url":"components/HomepageComponent.html","title":"component - HomepageComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  HomepageComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/homepage/homepage.component.ts\n\n\n\n    \n        Description\n    \n    \n        Homepage component\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-homepage\n            \n\n            \n                styleUrls\n                ./homepage.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./homepage.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                columns\n                            \n                            \n                                rows\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                setColumns\n                            \n                            \n                                setRows\n                            \n                            \n                                startGame\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        setColumns\n                        \n                    \n                \n            \n            \n                \nsetColumns(event: any)\n                \n            \n\n\n            \n                \n                    Defined in src/app/homepage/homepage.component.ts:49\n                \n            \n\n\n            \n                \n                    Sets the columns in the store from the column slider\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    event\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setRows\n                        \n                    \n                \n            \n            \n                \nsetRows(event: any)\n                \n            \n\n\n            \n                \n                    Defined in src/app/homepage/homepage.component.ts:56\n                \n            \n\n\n            \n                \n                    Sets the rows in the store from the row slider\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    event\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        startGame\n                        \n                    \n                \n            \n            \n                \nstartGame()\n                \n            \n\n\n            \n                \n                    Defined in src/app/homepage/homepage.component.ts:41\n                \n            \n\n\n            \n                \n                    Resets the game and navigate to the game page\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        columns\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Select(GameState.getColumns)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app/homepage/homepage.component.ts:29\n                        \n                    \n\n            \n                \n                    Columns from the store to set in the slider when loading the component\n\n                \n            \n\n                \n                    \n                        \n                                Parameters :\n                                \n                                    \n                                        \n                                            Name\n                                        \n                                    \n                                    \n                                            \n                                                    [object Object]\n                                            \n                                    \n                                \n                        \n                    \n                \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        rows\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Select(GameState.getRows)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app/homepage/homepage.component.ts:23\n                        \n                    \n\n            \n                \n                    Rows from the store to set in the slider when loading the component\n\n                \n            \n\n                \n                    \n                        \n                                Parameters :\n                                \n                                    \n                                        \n                                            Name\n                                        \n                                    \n                                    \n                                            \n                                                    [object Object]\n                                            \n                                    \n                                \n                        \n                    \n                \n        \n    \n\n\n\n\n\n    \n        import { Component } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Select, Store } from '@ngxs/store';\nimport { Observable } from 'rxjs';\nimport { GameReset, SetColumns, SetRows } from '../store/game/game.actions';\nimport { GameState } from '../store/game/game.state';\n\n\n/**\n * Homepage component\n */\n@Component({\n  selector: 'app-homepage',\n  templateUrl: './homepage.component.html',\n  styleUrls: ['./homepage.component.scss']\n})\nexport class HomepageComponent {\n\n  /**\n   * Rows from the store to set in the slider when loading the component\n   * @param {Observable} \n   */\n  @Select(GameState.getRows) rows!: Observable;\n\n  /**\n   * Columns from the store to set in the slider when loading the component\n   * @param {Observable} \n   */\n  @Select(GameState.getColumns) columns!: Observable;\n\n  /**\n   * @ignore\n   */\n  constructor(\n    private store: Store,\n    private router: Router) { }\n\n    /**\n   * Resets the game and navigate to the game page\n   */\n  startGame(){\n    this.store.dispatch(new GameReset());\n    this.router.navigate(['game']);\n  }\n\n  /**\n   * Sets the columns in the store from the column slider\n   */\n  setColumns(event: any){\n    this.store.dispatch(new SetColumns(event.value));\n  }\n\n  /**\n   * Sets the rows in the store from the row slider\n   */\n  setRows(event: any){\n    this.store.dispatch(new SetRows(event.value));\n  }\n\n}\n\n    \n\n    \n        \n\n    \n        \n            \n        \n    \n    \n        \n            \n                Colonnes :\n                \n            \n\n            \n                Lignes :\n                \n            \n            \n            Jouer\n        \n    \n\n\n    \n\n    \n                \n                    ./homepage.component.scss\n                \n                .homepage {\n    height: 100%;\n\n    &__title{\n        font-family: \"Train One\";\n        font-size: 3rem;\n        text-shadow: 2px 2px 6px #999;\n        margin-bottom: 10%;\n\n        &--small{\n            font-size: 2rem;\n            text-shadow: 2px 2px 6px #999;\n        }\n    }\n\n    &__image{\n        max-width: 80%;\n        max-height: 90%;\n    }\n\n    &__play-button{\n        font-size: 1.2rem;\n        padding: 5px 30px;\n        margin-top: 20px;\n    }\n\n    &__settings-title{\n        margin-bottom: 20px;\n    }\n\n    &__settings-item{\n        margin: 2% 20%;\n\n        .mat-slider-horizontal{\n            width: 100%;\n        }\n\n        ::ng-deep {\n            .mat-slider-thumb-label {\n                transform: rotate(45deg) !important;\n                border-radius: 50% 50% 0 !important;\n            }\n            \n            .mat-slider-thumb {\n                transform: scale(0) !important;\n            }\n            \n            .mat-slider-thumb-label-text {\n                opacity: 1 !important;\n            }\n        }\n    }\n}\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                                                            Colonnes :                                                        Lignes :                                                    Jouer            '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CaseComponent', 'selector': 'app-case'},{'name': 'EndGameComponent', 'selector': 'app-end-game'},{'name': 'GameComponent', 'selector': 'app-game'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'HomepageComponent', 'selector': 'app-homepage'},{'name': 'NotFoundComponent', 'selector': 'app-not-found'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'HomepageComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/HomepageModule.html":{"url":"modules/HomepageModule.html","title":"module - HomepageModule","body":"\n                   \n\n\n\n\n    Modules\n    HomepageModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_HomepageModule\n\n\n\ncluster_HomepageModule_declarations\n\n\n\ncluster_HomepageModule_imports\n\n\n\n\nHomepageComponent\n\nHomepageComponent\n\n\n\nHomepageModule\n\nHomepageModule\n\nHomepageModule -->\n\nHomepageComponent->HomepageModule\n\n\n\n\n\nHomepageRoutingModule\n\nHomepageRoutingModule\n\nHomepageModule -->\n\nHomepageRoutingModule->HomepageModule\n\n\n\n\n\nMaterialModule\n\nMaterialModule\n\nHomepageModule -->\n\nMaterialModule->HomepageModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/homepage/homepage.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            HomepageComponent\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            HomepageRoutingModule\n                        \n                        \n                            MaterialModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { HomepageRoutingModule } from './homepage-routing.module';\nimport { HomepageComponent } from './homepage.component';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { MaterialModule } from '../material/material.module';\nimport { FormsModule } from '@angular/forms';\n\n\n@NgModule({\n  declarations: [\n    HomepageComponent\n  ],\n  imports: [\n    CommonModule,\n    HomepageRoutingModule,\n    FlexLayoutModule,\n    MaterialModule,\n    FormsModule\n  ]\n})\nexport class HomepageModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/HomepageRoutingModule.html":{"url":"modules/HomepageRoutingModule.html","title":"module - HomepageRoutingModule","body":"\n                   \n\n\n\n\n    Modules\n    HomepageRoutingModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/homepage/homepage-routing.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { HomepageComponent } from './homepage.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: HomepageComponent\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class HomepageRoutingModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MaterialModule.html":{"url":"modules/MaterialModule.html","title":"module - MaterialModule","body":"\n                   \n\n\n\n\n    Modules\n    MaterialModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/material/material.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {ClipboardModule} from '@angular/cdk/clipboard';\nimport {DragDropModule} from '@angular/cdk/drag-drop';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {ScrollingModule} from '@angular/cdk/scrolling';\nimport {CdkStepperModule} from '@angular/cdk/stepper';\nimport {CdkTableModule} from '@angular/cdk/table';\nimport {CdkTreeModule} from '@angular/cdk/tree';\nimport {MatAutocompleteModule} from '@angular/material/autocomplete';\nimport {MatBadgeModule} from '@angular/material/badge';\nimport {MatBottomSheetModule} from '@angular/material/bottom-sheet';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatButtonToggleModule} from '@angular/material/button-toggle';\nimport {MatCardModule} from '@angular/material/card';\nimport {MatCheckboxModule} from '@angular/material/checkbox';\nimport {MatChipsModule} from '@angular/material/chips';\nimport {MatStepperModule} from '@angular/material/stepper';\nimport {MatDatepickerModule} from '@angular/material/datepicker';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatDividerModule} from '@angular/material/divider';\nimport {MatExpansionModule} from '@angular/material/expansion';\nimport {MatGridListModule} from '@angular/material/grid-list';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatInputModule} from '@angular/material/input';\nimport {MatListModule} from '@angular/material/list';\nimport {MatMenuModule} from '@angular/material/menu';\nimport {MatNativeDateModule, MatRippleModule} from '@angular/material/core';\nimport {MatPaginatorModule} from '@angular/material/paginator';\nimport {MatProgressBarModule} from '@angular/material/progress-bar';\nimport {MatProgressSpinnerModule} from '@angular/material/progress-spinner';\nimport {MatRadioModule} from '@angular/material/radio';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatSidenavModule} from '@angular/material/sidenav';\nimport {MatSliderModule} from '@angular/material/slider';\nimport {MatSlideToggleModule} from '@angular/material/slide-toggle';\nimport {MatSnackBarModule} from '@angular/material/snack-bar';\nimport {MatSortModule} from '@angular/material/sort';\nimport {MatTableModule} from '@angular/material/table';\nimport {MatTabsModule} from '@angular/material/tabs';\nimport {MatToolbarModule} from '@angular/material/toolbar';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatTreeModule} from '@angular/material/tree';\nimport {OverlayModule} from '@angular/cdk/overlay';\n\n\n\n@NgModule({\n  declarations: [],\n  imports: [\n    CommonModule\n  ],\n  exports: [\n    A11yModule,\n    ClipboardModule,\n    CdkStepperModule,\n    CdkTableModule,\n    CdkTreeModule,\n    DragDropModule,\n    MatAutocompleteModule,\n    MatBadgeModule,\n    MatBottomSheetModule,\n    MatButtonModule,\n    MatButtonToggleModule,\n    MatCardModule,\n    MatCheckboxModule,\n    MatChipsModule,\n    MatStepperModule,\n    MatDatepickerModule,\n    MatDialogModule,\n    MatDividerModule,\n    MatExpansionModule,\n    MatGridListModule,\n    MatIconModule,\n    MatInputModule,\n    MatListModule,\n    MatMenuModule,\n    MatNativeDateModule,\n    MatPaginatorModule,\n    MatProgressBarModule,\n    MatProgressSpinnerModule,\n    MatRadioModule,\n    MatRippleModule,\n    MatSelectModule,\n    MatSidenavModule,\n    MatSliderModule,\n    MatSlideToggleModule,\n    MatSnackBarModule,\n    MatSortModule,\n    MatTableModule,\n    MatTabsModule,\n    MatToolbarModule,\n    MatTooltipModule,\n    MatTreeModule,\n    OverlayModule,\n    PortalModule,\n    ScrollingModule,\n  ]\n})\nexport class MaterialModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/NotFoundComponent.html":{"url":"components/NotFoundComponent.html","title":"component - NotFoundComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  NotFoundComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/not-found/not-found.component.ts\n\n\n\n    \n        Description\n    \n    \n        404 component\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-not-found\n            \n\n            \n                styleUrls\n                ./not-found.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./not-found.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        import { Component } from '@angular/core';\n\n/**\n * 404 component\n */\n@Component({\n  selector: 'app-not-found',\n  templateUrl: './not-found.component.html',\n  styleUrls: ['./not-found.component.scss']\n})\nexport class NotFoundComponent  {\n\n}\n\n    \n\n    \n        \n     Oups !\n    La page n'existe pas !\n    \n    \n    Revenir à l'accueil\n\n\n    \n\n    \n                \n                    ./not-found.component.scss\n                \n                .not-found{\n\n    text-align: center;\n    margin-top: 50px;\n\n    &__title{\n        font-size: 2rem;\n        font-weight: bold;\n    }\n\n    &__image{\n        max-width: 80%;\n        max-height: 40vh;\n    }\n\n    &__action{\n        margin-top: 100px;\n        padding: 5px 30px;\n    }\n}\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '     Oups !    La page n\\'existe pas !            Revenir à l\\'accueil'\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CaseComponent', 'selector': 'app-case'},{'name': 'EndGameComponent', 'selector': 'app-end-game'},{'name': 'GameComponent', 'selector': 'app-game'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'HomepageComponent', 'selector': 'app-homepage'},{'name': 'NotFoundComponent', 'selector': 'app-not-found'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'NotFoundComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Pawn.html":{"url":"interfaces/Pawn.html","title":"interface - Pawn","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Pawn\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/models/pawn.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents a pawn\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            isInWinningLine\n                                        \n                                \n                                \n                                        \n                                            player\n                                        \n                                \n                                \n                                        \n                                            x\n                                        \n                                \n                                \n                                        \n                                            y\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        isInWinningLine\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        isInWinningLine:     \n\n                                    \n                                \n\n\n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    true if the pawn is in a winning line, for display purpose\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        player\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        player:         Player\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Player\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    player that played the pawn\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        x\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        x:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    x coordinate of the pawn\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        y\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        y:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    y coordinate of the pawn\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Player } from \"./player\";\n\n/**\n * Represents a pawn\n */\nexport interface Pawn{\n    /**\n     * x coordinate of the pawn\n     */\n    x: number;\n\n    /**\n     * y coordinate of the pawn\n     */\n    y: number;\n\n    /**\n     * player that played the pawn\n     */\n    player: Player;\n\n    /**\n     * true if the pawn is in a winning line, for display purpose\n     */\n    isInWinningLine?: false;\n}\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Player.html":{"url":"interfaces/Player.html","title":"interface - Player","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Player\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/models/player.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents a player\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    player id ( 0 for player one, 1 for player 2)\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    player name (not used for now)\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface Player{\n    /**\n     * player id ( 0 for player one, 1 for player 2)\n     */\n    id: number;\n\n    /**\n     * player name (not used for now)\n     */\n    name: string;\n}\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ThemeState.html":{"url":"injectables/ThemeState.html","title":"injectable - ThemeState","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ThemeState\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/store/theme/theme.state.ts\n        \n\n\n            \n                Description\n            \n            \n                Theme state\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                getTheme\n                            \n                            \n                                toogleTheme\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        getTheme\n                        \n                    \n                \n            \n            \n                \n                    \n                    getTheme(state: ThemeStateModel)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Selector()\n                \n            \n\n            \n                \n                    Defined in src/app/store/theme/theme.state.ts:31\n                \n            \n\n\n            \n                \n                    Retrieves the theme\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    state\n                                    \n                                                ThemeStateModel\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toogleTheme\n                        \n                    \n                \n            \n            \n                \ntoogleTheme(undefined: StateContext)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Action(ToogleTheme)\n                \n            \n\n            \n                \n                    Defined in src/app/store/theme/theme.state.ts:39\n                \n            \n\n\n            \n                \n                    Sets the theme in the state\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                StateContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { State, Action, StateContext, Selector } from '@ngxs/store';\nimport { ToogleTheme } from './theme.actions';\n\n/**\n * Theme state model\n */\nexport class ThemeStateModel {\n    /**\n     * true if dark theme is selected\n     */\n    dark: boolean = false;\n}\n\n/**\n * Theme state\n */\n@State({\n    name: 'theme',\n    defaults: {\n        dark: false\n    }\n})\n@Injectable()\nexport class ThemeState {\n\n    /**\n     * Retrieves the theme\n     */\n    @Selector()\n    static getTheme(state: ThemeStateModel) {\n        return state.dark;\n    }\n\n    /**\n     * Sets the theme in the state\n     */\n    @Action(ToogleTheme)\n    toogleTheme({getState, patchState }: StateContext) {\n        const state = getState();\n        patchState({\n            ...state, dark: !state.dark\n        });\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ThemeStateModel.html":{"url":"classes/ThemeStateModel.html","title":"class - ThemeStateModel","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ThemeStateModel\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/store/theme/theme.state.ts\n        \n\n\n            \n                Description\n            \n            \n                Theme state model\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                dark\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        dark\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/store/theme/theme.state.ts:12\n                        \n                    \n\n            \n                \n                    true if dark theme is selected\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { State, Action, StateContext, Selector } from '@ngxs/store';\nimport { ToogleTheme } from './theme.actions';\n\n/**\n * Theme state model\n */\nexport class ThemeStateModel {\n    /**\n     * true if dark theme is selected\n     */\n    dark: boolean = false;\n}\n\n/**\n * Theme state\n */\n@State({\n    name: 'theme',\n    defaults: {\n        dark: false\n    }\n})\n@Injectable()\nexport class ThemeState {\n\n    /**\n     * Retrieves the theme\n     */\n    @Selector()\n    static getTheme(state: ThemeStateModel) {\n        return state.dark;\n    }\n\n    /**\n     * Sets the theme in the state\n     */\n    @Action(ToogleTheme)\n    toogleTheme({getState, patchState }: StateContext) {\n        const state = getState();\n        patchState({\n            ...state, dark: !state.dark\n        });\n    }\n}\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/VictoryCheckService.html":{"url":"injectables/VictoryCheckService.html","title":"injectable - VictoryCheckService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  VictoryCheckService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/store/services/victory-check.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Provide methods to check if 4 pawns are aligned\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                diagonalLeftCheck\n                            \n                            \n                                    Public\n                                diagonalRightCheck\n                            \n                            \n                                    Public\n                                horizontalCheck\n                            \n                            \n                                    Public\n                                verticalCheck\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        diagonalLeftCheck\n                        \n                    \n                \n            \n            \n                \n                    \n                    diagonalLeftCheck(game: Game, pawnPlayed: Pawn)\n                \n            \n\n\n            \n                \n                    Defined in src/app/store/services/victory-check.service.ts:101\n                \n            \n\n\n            \n                \n                    Check if 4 pawns are aligned diagonally in the last cell played, from bottom left to up right\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    game\n                                    \n                                                Game\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pawnPlayed\n                                    \n                                                Pawn\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        diagonalRightCheck\n                        \n                    \n                \n            \n            \n                \n                    \n                    diagonalRightCheck(game: Game, pawnPlayed: Pawn)\n                \n            \n\n\n            \n                \n                    Defined in src/app/store/services/victory-check.service.ts:72\n                \n            \n\n\n            \n                \n                    Check if 4 pawns are aligned diagonally in the last cell played, from bottom right to up left\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    game\n                                    \n                                                Game\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pawnPlayed\n                                    \n                                                Pawn\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        horizontalCheck\n                        \n                    \n                \n            \n            \n                \n                    \n                    horizontalCheck(game: Game, rowPlayed: number, pawnPlayed: Pawn)\n                \n            \n\n\n            \n                \n                    Defined in src/app/store/services/victory-check.service.ts:44\n                \n            \n\n\n            \n                \n                    Check if 4 pawns are aligned horizontally in the last row played\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    game\n                                    \n                                                Game\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    rowPlayed\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pawnPlayed\n                                    \n                                                Pawn\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        verticalCheck\n                        \n                    \n                \n            \n            \n                \n                    \n                    verticalCheck(game: Game, columnPlayed: number, pawnPlayed: Pawn)\n                \n            \n\n\n            \n                \n                    Defined in src/app/store/services/victory-check.service.ts:16\n                \n            \n\n\n            \n                \n                    Check if 4 pawns are aligned vertically in the last column played\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    game\n                                    \n                                                Game\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    columnPlayed\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pawnPlayed\n                                    \n                                                Pawn\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { Game } from 'src/app/models/game';\nimport { Pawn } from 'src/app/models/pawn';\n\n/**\n * Provide methods to check if 4 pawns are aligned\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class VictoryCheckService {\n\n  /**\n   * Check if 4 pawns are aligned vertically in the last column played\n   */\n  public verticalCheck(game: Game, columnPlayed: number, pawnPlayed: Pawn): boolean{\n\n    let won: boolean = false;\n\n    // On récupère les pions de la colonne jouée qui appartiennent au joueur\n    let playerColumn = game.pawns.filter(p => (p.x === columnPlayed && p.player.id === pawnPlayed.player.id));\n    // On ordonne le tableau\n    playerColumn = playerColumn.sort((a,b) => (a.y - b.y));\n    // On check si on a 4 pions alignés\n    let alignedPawns: number = 1;\n    playerColumn.map((pawn, index, pawnList) => {\n        if(pawn.y === pawnList[index - 1]?.y + 1 ) {\n            alignedPawns++;\n        }\n        else alignedPawns = 1;\n\n        if(alignedPawns > 3) {\n          console.info(pawnPlayed.player.name + \" a aligné 4 pions verticalement! 🎉\")\n          won = true;\n        }\n    });\n\n    return won;\n  }\n\n  /**\n   * Check if 4 pawns are aligned horizontally in the last row played\n   */\n  public horizontalCheck(game: Game, rowPlayed: number, pawnPlayed: Pawn): boolean{\n\n    let won: boolean = false;\n\n    // On récupère les pions de la ligne jouée qui appartiennent au joueur\n    let playerRow = game.pawns.filter(p => (p.y === rowPlayed && p.player.id === pawnPlayed.player.id));\n    // On ordonne le tableau\n    playerRow = playerRow.sort((a,b) => (a.x - b.x));\n    // On check si on a 4 pions alignés\n    let alignedPawns: number = 1;\n    playerRow.map((pawn, index, pawnList) => {\n        if(pawn.x === pawnList[index - 1]?.x + 1 ) {\n            alignedPawns++;\n        }\n        else alignedPawns = 1;\n\n        if(alignedPawns > 3) {\n          console.info(pawnPlayed.player.name + \" a aligné 4 pions horizontalement! 🎉\")\n          won = true;\n        }\n    });\n\n    return won;\n  }\n\n  /**\n   * Check if 4 pawns are aligned diagonally in the last cell played, from bottom right to up left\n   */\n  public diagonalRightCheck(game: Game, pawnPlayed: Pawn): boolean{\n\n    let won: boolean = false;\n\n    // On récupère tous les pions du joueur dans la diagonale droite \n    let playerPawns = game.pawns.filter(p => (p.x + p.y === pawnPlayed.x + pawnPlayed.y ) && (p.player.id === pawnPlayed.player.id));\n    \n    // On ordonne le tableau\n    playerPawns = playerPawns.sort((a,b) => (a.x - b.x));\n    // On check si on a 4 pions alignés\n    let alignedPawns: number = 1;\n    playerPawns.map((pawn, index, pawnList) => {\n        if((pawn.x === pawnList[index - 1]?.x + 1) && (pawn.y === pawnList[index - 1]?.y - 1)) {\n            alignedPawns++;\n        }\n        else alignedPawns = 1;\n\n        if(alignedPawns > 3) {\n          console.info(pawnPlayed.player.name + \" a aligné 4 pions en diagonale! 🎉\")\n          won = true;\n        }\n    });\n\n    return won;\n  }\n\n  /**\n   * Check if 4 pawns are aligned diagonally in the last cell played, from bottom left to up right\n   */\n  public diagonalLeftCheck(game: Game, pawnPlayed: Pawn): boolean{\n\n    let won: boolean = false;\n\n    // On récupère tous les pions du joueur dans la diagonale droite \n    let playerPawns = game.pawns.filter(p => (p.x - p.y === pawnPlayed.x - pawnPlayed.y ) && (p.player.id === pawnPlayed.player.id));\n    \n    // On ordonne le tableau\n    playerPawns = playerPawns.sort((a,b) => (a.x - b.x));\n    // On check si on a 4 pions alignés\n    let alignedPawns: number = 1;\n    playerPawns.map((pawn, index, pawnList) => {\n        if((pawn.x === pawnList[index - 1]?.x + 1) && (pawn.y === pawnList[index - 1]?.y + 1)) {\n            alignedPawns++;\n        }\n        else alignedPawns = 1;\n\n        if(alignedPawns > 3) {\n          console.info(pawnPlayed.player.name + \" a aligné 4 pions en diagonale! 🎉\")\n          won = true;\n        }\n    });\n\n    return won;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app/app.component.ts\n            \n            component\n            AppComponent\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/app/game/case/case.component.ts\n            \n            component\n            CaseComponent\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/app/game/dialogs/end-game/end-game.component.ts\n            \n            component\n            EndGameComponent\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/app/game/game.component.ts\n            \n            component\n            GameComponent\n            \n                100 %\n                (13/13)\n            \n        \n        \n            \n                \n                src/app/homepage/homepage.component.ts\n            \n            component\n            HomepageComponent\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/app/layout/header/header.component.ts\n            \n            component\n            HeaderComponent\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/app/models/game.ts\n            \n            interface\n            Game\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/app/models/pawn.ts\n            \n            interface\n            Pawn\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/app/models/player.ts\n            \n            interface\n            Player\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/app/not-found/not-found.component.ts\n            \n            component\n            NotFoundComponent\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/store/game/game.state.ts\n            \n            class\n            GameStateModel\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/app/store/game/game.state.ts\n            \n            injectable\n            GameState\n            \n                100 %\n                (12/12)\n            \n        \n        \n            \n                \n                src/app/store/services/victory-check.service.ts\n            \n            injectable\n            VictoryCheckService\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/app/store/theme/theme.state.ts\n            \n            class\n            ThemeStateModel\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/app/store/theme/theme.state.ts\n            \n            injectable\n            ThemeState\n            \n                100 %\n                (3/3)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular/animations : ~12.1.0-\n        \n            @angular/cdk : ^12.1.3\n        \n            @angular/common : ~12.1.0-\n        \n            @angular/compiler : ~12.1.0-\n        \n            @angular/core : ~12.1.0-\n        \n            @angular/flex-layout : ^12.0.0-beta.34\n        \n            @angular/forms : ~12.1.0-\n        \n            @angular/material : ^12.1.3\n        \n            @angular/platform-browser : ~12.1.0-\n        \n            @angular/platform-browser-dynamic : ~12.1.0-\n        \n            @angular/router : ~12.1.0-\n        \n            @angular/service-worker : ~12.1.0-\n        \n            @ngxs/storage-plugin : ^3.7.2\n        \n            @ngxs/store : ^3.7.2\n        \n            rxjs : ~6.6.0\n        \n            tslib : ^2.2.0\n        \n            zone.js : ~0.11.4\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nPuissance4\nTester l'appli:\nL'application est hebergée sur firebase, elle est dispo en ligne ici: https://puissance-4-6585f.web.app\nDocumentation:\nLa doc est faite avec compodoc / JSDoc et elle est hebergée sur firebase aussi, elle est dispo en ligne ici: https://puissance-4-documentation.web.appweb.app\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppRoutingModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        GameModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        GameRoutingModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        HomepageModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        HomepageRoutingModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MaterialModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_declarations\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_bootstrap\n\n\n\ncluster_GameModule\n\n\n\ncluster_GameModule_declarations\n\n\n\ncluster_GameModule_imports\n\n\n\ncluster_HomepageModule\n\n\n\ncluster_HomepageModule_declarations\n\n\n\ncluster_HomepageModule_imports\n\n\n\n\nAppComponent\n\nAppComponent\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAppComponent->AppModule\n\n\n\n\n\nHeaderComponent\n\nHeaderComponent\n\nAppModule -->\n\nHeaderComponent->AppModule\n\n\n\n\n\nNotFoundComponent\n\nNotFoundComponent\n\nAppModule -->\n\nNotFoundComponent->AppModule\n\n\n\n\n\nAppComponent \n\nAppComponent \n\nAppComponent  -->\n\nAppModule->AppComponent \n\n\n\n\n\nAppRoutingModule\n\nAppRoutingModule\n\nAppModule -->\n\nAppRoutingModule->AppModule\n\n\n\n\n\nMaterialModule\n\nMaterialModule\n\nAppModule -->\n\nMaterialModule->AppModule\n\n\n\n\n\nGameModule\n\nGameModule\n\nGameModule -->\n\nMaterialModule->GameModule\n\n\n\n\n\nHomepageModule\n\nHomepageModule\n\nHomepageModule -->\n\nMaterialModule->HomepageModule\n\n\n\n\n\nCaseComponent\n\nCaseComponent\n\nGameModule -->\n\nCaseComponent->GameModule\n\n\n\n\n\nEndGameComponent\n\nEndGameComponent\n\nGameModule -->\n\nEndGameComponent->GameModule\n\n\n\n\n\nGameComponent\n\nGameComponent\n\nGameModule -->\n\nGameComponent->GameModule\n\n\n\n\n\nGameRoutingModule\n\nGameRoutingModule\n\nGameModule -->\n\nGameRoutingModule->GameModule\n\n\n\n\n\nHomepageComponent\n\nHomepageComponent\n\nHomepageModule -->\n\nHomepageComponent->HomepageModule\n\n\n\n\n\nHomepageRoutingModule\n\nHomepageRoutingModule\n\nHomepageModule -->\n\nHomepageRoutingModule->HomepageModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        7 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    7 Components\n                \n            \n        \n        \n            \n                \n                    \n                    3 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    2 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    3 Interfaces\n                \n            \n        \n        \n            \n                \n                    \n                    \n                        9 Routes\n                    \n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"routes.html":{"url":"routes.html","title":"routes - routes","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Routes\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
